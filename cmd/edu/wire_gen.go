// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"edu/internal/conf"
	"edu/internal/domain"
	"edu/internal/infra/repo"
	"edu/internal/server"
	"edu/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, data *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := repo.NewGormDB(data)
	tx := repo.NewTxImp(db, logger)
	baseRepo, cleanup, err := repo.NewBaseRepo(data, db, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := repo.NewUserRepo(baseRepo, logger)
	userService := domain.NewUserService(userRepo, logger)
	tenantRepo := repo.NewTenantRepo(baseRepo, logger)
	tenantPermissionRepo := repo.NewTenantPermissionRepo(baseRepo, logger)
	tenantService := domain.NewTenantService(tenantRepo, tenantPermissionRepo, logger)
	teacherRepo := repo.NewTeacherRepo(baseRepo, logger)
	teacherService := domain.NewTeacherService(teacherRepo)
	studentRepo := repo.NewStudentRepo(baseRepo, logger)
	studentService := domain.NewStudentService(studentRepo)
	roomRepo := repo.NewRoomRepo(baseRepo, logger)
	roomService := domain.NewRoomService(roomRepo)
	subjectRepo := repo.NewSubjectRepo(baseRepo, logger)
	subjectService := domain.NewSubjectService(subjectRepo)
	permissionRepo := repo.NewPermissionRepo(baseRepo, logger)
	permissionService := domain.NewPermissionService(permissionRepo)
	roleRepo := repo.NewRoleRepo(baseRepo, logger)
	rolePermissionRepo := repo.NewRolePermissionRepo(baseRepo, logger)
	roleService := domain.NewRoleService(roleRepo, rolePermissionRepo)
	dossierService := service.NewDossierService(tx, userService, tenantService, teacherService, studentService, roomService, subjectService, permissionService, roleService)
	grpcServer := server.NewGRPCServer(confServer, dossierService, logger)
	customerRepo := repo.NewCustomerRepo(baseRepo, logger)
	customerService := domain.NewCustomerService(customerRepo)
	lessonHistoryRepo := repo.NewLessonHistoryRepo(baseRepo, logger)
	lessonHistoryService := domain.NewLessonHistoryService(lessonHistoryRepo)
	serviceCustomerService := service.NewCustomerService(tx, customerService, studentService, lessonHistoryService)
	authService := service.NewAuthService(tx, userService, permissionService, roleService, tenantService)
	skuRepo := repo.NewSkuRepo(baseRepo, logger)
	skuService := domain.NewSkuService(logger, skuRepo)
	combineSkuRepo := repo.NewCombineSkuRepo(baseRepo, logger)
	combineSkuService := domain.NewCombineSkuService(logger, combineSkuRepo)
	combineSkuItemRepo := repo.NewCombineSkuItemRepo(baseRepo, logger)
	combineSkuItemService := domain.NewCombineSkuItemService(logger, combineSkuItemRepo)
	productService := service.NewProductService(logger, tx, skuService, combineSkuService, combineSkuItemService)
	taskRepo := repo.NewTaskRepo(baseRepo, logger)
	taskService := domain.NewTaskService(taskRepo)
	serviceTaskService := service.NewTaskService(taskService, tx)
	coursePlanRepo := repo.NewCoursePlanRepo(baseRepo, logger)
	coursePlanService := domain.NewCoursePlanService(logger, coursePlanRepo)
	coursePlanDetailRepo := repo.NewCoursePlanDetailRepo(baseRepo, logger)
	coursePlanDetailService := domain.NewCoursePlanDetailService(coursePlanDetailRepo)
	coursePlanStudentRepo := repo.NewCoursePlanStudentRepo(baseRepo, logger)
	coursePlanStudentService := domain.NewCoursePlanStudentService(coursePlanStudentRepo)
	dailyLessonRepo := repo.NewDailyLessonRepo(baseRepo, logger)
	dailyLessonService := domain.NewDailyLessonService(dailyLessonRepo)
	dailyLessonStudentRepo := repo.NewDailyLessonStudentRepo(baseRepo, logger)
	dailyLessonStudentService := domain.NewDailyLessonStudentService(dailyLessonStudentRepo)
	metaRepo := repo.NewMetaRepo(baseRepo, logger)
	metaService := domain.NewMetaService(metaRepo)
	courseService := service.NewCourseService(logger, tx, coursePlanService, coursePlanDetailService, coursePlanStudentService, dailyLessonService, dailyLessonStudentService, metaService)
	httpServer := server.NewHTTPServer(confServer, dossierService, serviceCustomerService, authService, productService, serviceTaskService, courseService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
