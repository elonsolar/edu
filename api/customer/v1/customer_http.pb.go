// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: customer/v1/customer.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCustomerAdjustLessonNumber = "/workbench.v1.Customer/AdjustLessonNumber"
const OperationCustomerCreateCustomer = "/workbench.v1.Customer/CreateCustomer"
const OperationCustomerCreateStudent = "/workbench.v1.Customer/CreateStudent"
const OperationCustomerDeleteCustomer = "/workbench.v1.Customer/DeleteCustomer"
const OperationCustomerDeleteStudent = "/workbench.v1.Customer/DeleteStudent"
const OperationCustomerGetCustomer = "/workbench.v1.Customer/GetCustomer"
const OperationCustomerGetStudent = "/workbench.v1.Customer/GetStudent"
const OperationCustomerListCustomer = "/workbench.v1.Customer/ListCustomer"
const OperationCustomerListLessonHistory = "/workbench.v1.Customer/ListLessonHistory"
const OperationCustomerListStudent = "/workbench.v1.Customer/ListStudent"
const OperationCustomerUpdateCustomer = "/workbench.v1.Customer/UpdateCustomer"
const OperationCustomerUpdateStudent = "/workbench.v1.Customer/UpdateStudent"

type CustomerHTTPServer interface {
	AdjustLessonNumber(context.Context, *AdjustLessonNumberRequest) (*AdjustLessonNumberReply, error)
	// CreateCustomer customer
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerReply, error)
	// CreateStudent student
	CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentReply, error)
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*DeleteCustomerReply, error)
	DeleteStudent(context.Context, *DeleteStudentRequest) (*DeleteStudentReply, error)
	GetCustomer(context.Context, *GetCustomerRequest) (*GetCustomerReply, error)
	GetStudent(context.Context, *GetStudentRequest) (*GetStudentReply, error)
	ListCustomer(context.Context, *ListCustomerRequest) (*ListCustomerReply, error)
	ListLessonHistory(context.Context, *ListLessonHistoryRequest) (*ListLessonHistoryReply, error)
	ListStudent(context.Context, *ListStudentRequest) (*ListStudentReply, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerReply, error)
	UpdateStudent(context.Context, *UpdateStudentRequest) (*UpdateStudentReply, error)
}

func RegisterCustomerHTTPServer(s *http.Server, srv CustomerHTTPServer) {
	r := s.Route("/")
	r.POST("/customer", _Customer_CreateCustomer0_HTTP_Handler(srv))
	r.PUT("/customer/{id}", _Customer_UpdateCustomer0_HTTP_Handler(srv))
	r.DELETE("/customer/{id}", _Customer_DeleteCustomer0_HTTP_Handler(srv))
	r.GET("/customer", _Customer_GetCustomer0_HTTP_Handler(srv))
	r.GET("/customer/page", _Customer_ListCustomer0_HTTP_Handler(srv))
	r.POST("/customer/lesson/adjust", _Customer_AdjustLessonNumber0_HTTP_Handler(srv))
	r.GET("/customer/lesson/history", _Customer_ListLessonHistory0_HTTP_Handler(srv))
	r.POST("/student", _Customer_CreateStudent0_HTTP_Handler(srv))
	r.PUT("/student/{id}", _Customer_UpdateStudent0_HTTP_Handler(srv))
	r.DELETE("/student/{id}", _Customer_DeleteStudent0_HTTP_Handler(srv))
	r.GET("/student", _Customer_GetStudent0_HTTP_Handler(srv))
	r.GET("/student/page", _Customer_ListStudent0_HTTP_Handler(srv))
}

func _Customer_CreateCustomer0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCustomerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerCreateCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCustomer(ctx, req.(*CreateCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_UpdateCustomer0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCustomerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerUpdateCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_DeleteCustomer0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCustomerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerDeleteCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_GetCustomer0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCustomerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerGetCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomer(ctx, req.(*GetCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_ListCustomer0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCustomerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerListCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCustomer(ctx, req.(*ListCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_AdjustLessonNumber0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdjustLessonNumberRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerAdjustLessonNumber)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdjustLessonNumber(ctx, req.(*AdjustLessonNumberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdjustLessonNumberReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_ListLessonHistory0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLessonHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerListLessonHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLessonHistory(ctx, req.(*ListLessonHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLessonHistoryReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_CreateStudent0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerCreateStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStudent(ctx, req.(*CreateStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_UpdateStudent0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerUpdateStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStudent(ctx, req.(*UpdateStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_DeleteStudent0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerDeleteStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStudent(ctx, req.(*DeleteStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_GetStudent0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerGetStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStudent(ctx, req.(*GetStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Customer_ListStudent0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerListStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStudent(ctx, req.(*ListStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStudentReply)
		return ctx.Result(200, reply)
	}
}

type CustomerHTTPClient interface {
	AdjustLessonNumber(ctx context.Context, req *AdjustLessonNumberRequest, opts ...http.CallOption) (rsp *AdjustLessonNumberReply, err error)
	CreateCustomer(ctx context.Context, req *CreateCustomerRequest, opts ...http.CallOption) (rsp *CreateCustomerReply, err error)
	CreateStudent(ctx context.Context, req *CreateStudentRequest, opts ...http.CallOption) (rsp *CreateStudentReply, err error)
	DeleteCustomer(ctx context.Context, req *DeleteCustomerRequest, opts ...http.CallOption) (rsp *DeleteCustomerReply, err error)
	DeleteStudent(ctx context.Context, req *DeleteStudentRequest, opts ...http.CallOption) (rsp *DeleteStudentReply, err error)
	GetCustomer(ctx context.Context, req *GetCustomerRequest, opts ...http.CallOption) (rsp *GetCustomerReply, err error)
	GetStudent(ctx context.Context, req *GetStudentRequest, opts ...http.CallOption) (rsp *GetStudentReply, err error)
	ListCustomer(ctx context.Context, req *ListCustomerRequest, opts ...http.CallOption) (rsp *ListCustomerReply, err error)
	ListLessonHistory(ctx context.Context, req *ListLessonHistoryRequest, opts ...http.CallOption) (rsp *ListLessonHistoryReply, err error)
	ListStudent(ctx context.Context, req *ListStudentRequest, opts ...http.CallOption) (rsp *ListStudentReply, err error)
	UpdateCustomer(ctx context.Context, req *UpdateCustomerRequest, opts ...http.CallOption) (rsp *UpdateCustomerReply, err error)
	UpdateStudent(ctx context.Context, req *UpdateStudentRequest, opts ...http.CallOption) (rsp *UpdateStudentReply, err error)
}

type CustomerHTTPClientImpl struct {
	cc *http.Client
}

func NewCustomerHTTPClient(client *http.Client) CustomerHTTPClient {
	return &CustomerHTTPClientImpl{client}
}

func (c *CustomerHTTPClientImpl) AdjustLessonNumber(ctx context.Context, in *AdjustLessonNumberRequest, opts ...http.CallOption) (*AdjustLessonNumberReply, error) {
	var out AdjustLessonNumberReply
	pattern := "/customer/lesson/adjust"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerAdjustLessonNumber))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...http.CallOption) (*CreateCustomerReply, error) {
	var out CreateCustomerReply
	pattern := "/customer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerCreateCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...http.CallOption) (*CreateStudentReply, error) {
	var out CreateStudentReply
	pattern := "/student"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerCreateStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...http.CallOption) (*DeleteCustomerReply, error) {
	var out DeleteCustomerReply
	pattern := "/customer/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerDeleteCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...http.CallOption) (*DeleteStudentReply, error) {
	var out DeleteStudentReply
	pattern := "/student/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerDeleteStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...http.CallOption) (*GetCustomerReply, error) {
	var out GetCustomerReply
	pattern := "/customer"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerGetCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...http.CallOption) (*GetStudentReply, error) {
	var out GetStudentReply
	pattern := "/student"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerGetStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) ListCustomer(ctx context.Context, in *ListCustomerRequest, opts ...http.CallOption) (*ListCustomerReply, error) {
	var out ListCustomerReply
	pattern := "/customer/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerListCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) ListLessonHistory(ctx context.Context, in *ListLessonHistoryRequest, opts ...http.CallOption) (*ListLessonHistoryReply, error) {
	var out ListLessonHistoryReply
	pattern := "/customer/lesson/history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerListLessonHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) ListStudent(ctx context.Context, in *ListStudentRequest, opts ...http.CallOption) (*ListStudentReply, error) {
	var out ListStudentReply
	pattern := "/student/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerListStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...http.CallOption) (*UpdateCustomerReply, error) {
	var out UpdateCustomerReply
	pattern := "/customer/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerUpdateCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerHTTPClientImpl) UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...http.CallOption) (*UpdateStudentReply, error) {
	var out UpdateStudentReply
	pattern := "/student/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerUpdateStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
