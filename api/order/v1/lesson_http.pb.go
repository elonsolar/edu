// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: lesson/v1/lesson.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLessonCreateStudentLesson = "/workbench.v1.Lesson/CreateStudentLesson"
const OperationLessonGetStudentLesson = "/workbench.v1.Lesson/GetStudentLesson"
const OperationLessonListStudentLesson = "/workbench.v1.Lesson/ListStudentLesson"

type LessonHTTPServer interface {
	// CreateStudentLesson 课时
	CreateStudentLesson(context.Context, *CreateStudentLessonRequest) (*CreateStudentLessonReply, error)
	GetStudentLesson(context.Context, *GetStudentLessonRequest) (*GetStudentLessonReply, error)
	ListStudentLesson(context.Context, *ListStudentLessonRequest) (*ListStudentLessonReply, error)
}

func RegisterLessonHTTPServer(s *http.Server, srv LessonHTTPServer) {
	r := s.Route("/")
	r.POST("/student-lesson", _Lesson_CreateStudentLesson0_HTTP_Handler(srv))
	r.GET("/student-lesson", _Lesson_GetStudentLesson0_HTTP_Handler(srv))
	r.GET("/student-lesson/page", _Lesson_ListStudentLesson0_HTTP_Handler(srv))
}

func _Lesson_CreateStudentLesson0_HTTP_Handler(srv LessonHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStudentLessonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLessonCreateStudentLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStudentLesson(ctx, req.(*CreateStudentLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStudentLessonReply)
		return ctx.Result(200, reply)
	}
}

func _Lesson_GetStudentLesson0_HTTP_Handler(srv LessonHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStudentLessonRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLessonGetStudentLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStudentLesson(ctx, req.(*GetStudentLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStudentLessonReply)
		return ctx.Result(200, reply)
	}
}

func _Lesson_ListStudentLesson0_HTTP_Handler(srv LessonHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStudentLessonRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLessonListStudentLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStudentLesson(ctx, req.(*ListStudentLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStudentLessonReply)
		return ctx.Result(200, reply)
	}
}

type LessonHTTPClient interface {
	CreateStudentLesson(ctx context.Context, req *CreateStudentLessonRequest, opts ...http.CallOption) (rsp *CreateStudentLessonReply, err error)
	GetStudentLesson(ctx context.Context, req *GetStudentLessonRequest, opts ...http.CallOption) (rsp *GetStudentLessonReply, err error)
	ListStudentLesson(ctx context.Context, req *ListStudentLessonRequest, opts ...http.CallOption) (rsp *ListStudentLessonReply, err error)
}

type LessonHTTPClientImpl struct {
	cc *http.Client
}

func NewLessonHTTPClient(client *http.Client) LessonHTTPClient {
	return &LessonHTTPClientImpl{client}
}

func (c *LessonHTTPClientImpl) CreateStudentLesson(ctx context.Context, in *CreateStudentLessonRequest, opts ...http.CallOption) (*CreateStudentLessonReply, error) {
	var out CreateStudentLessonReply
	pattern := "/student-lesson"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLessonCreateStudentLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LessonHTTPClientImpl) GetStudentLesson(ctx context.Context, in *GetStudentLessonRequest, opts ...http.CallOption) (*GetStudentLessonReply, error) {
	var out GetStudentLessonReply
	pattern := "/student-lesson"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLessonGetStudentLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LessonHTTPClientImpl) ListStudentLesson(ctx context.Context, in *ListStudentLessonRequest, opts ...http.CallOption) (*ListStudentLessonReply, error) {
	var out ListStudentLessonReply
	pattern := "/student-lesson/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLessonListStudentLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
