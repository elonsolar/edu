// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: lesson/v1/lesson.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Lesson_CreateStudentLesson_FullMethodName = "/workbench.v1.Lesson/CreateStudentLesson"
	Lesson_GetStudentLesson_FullMethodName    = "/workbench.v1.Lesson/GetStudentLesson"
	Lesson_ListStudentLesson_FullMethodName   = "/workbench.v1.Lesson/ListStudentLesson"
)

// LessonClient is the client API for Lesson service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonClient interface {
	// 课时
	CreateStudentLesson(ctx context.Context, in *CreateStudentLessonRequest, opts ...grpc.CallOption) (*CreateStudentLessonReply, error)
	GetStudentLesson(ctx context.Context, in *GetStudentLessonRequest, opts ...grpc.CallOption) (*GetStudentLessonReply, error)
	ListStudentLesson(ctx context.Context, in *ListStudentLessonRequest, opts ...grpc.CallOption) (*ListStudentLessonReply, error)
}

type lessonClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonClient(cc grpc.ClientConnInterface) LessonClient {
	return &lessonClient{cc}
}

func (c *lessonClient) CreateStudentLesson(ctx context.Context, in *CreateStudentLessonRequest, opts ...grpc.CallOption) (*CreateStudentLessonReply, error) {
	out := new(CreateStudentLessonReply)
	err := c.cc.Invoke(ctx, Lesson_CreateStudentLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonClient) GetStudentLesson(ctx context.Context, in *GetStudentLessonRequest, opts ...grpc.CallOption) (*GetStudentLessonReply, error) {
	out := new(GetStudentLessonReply)
	err := c.cc.Invoke(ctx, Lesson_GetStudentLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonClient) ListStudentLesson(ctx context.Context, in *ListStudentLessonRequest, opts ...grpc.CallOption) (*ListStudentLessonReply, error) {
	out := new(ListStudentLessonReply)
	err := c.cc.Invoke(ctx, Lesson_ListStudentLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonServer is the server API for Lesson service.
// All implementations must embed UnimplementedLessonServer
// for forward compatibility
type LessonServer interface {
	// 课时
	CreateStudentLesson(context.Context, *CreateStudentLessonRequest) (*CreateStudentLessonReply, error)
	GetStudentLesson(context.Context, *GetStudentLessonRequest) (*GetStudentLessonReply, error)
	ListStudentLesson(context.Context, *ListStudentLessonRequest) (*ListStudentLessonReply, error)
	mustEmbedUnimplementedLessonServer()
}

// UnimplementedLessonServer must be embedded to have forward compatible implementations.
type UnimplementedLessonServer struct {
}

func (UnimplementedLessonServer) CreateStudentLesson(context.Context, *CreateStudentLessonRequest) (*CreateStudentLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudentLesson not implemented")
}
func (UnimplementedLessonServer) GetStudentLesson(context.Context, *GetStudentLessonRequest) (*GetStudentLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentLesson not implemented")
}
func (UnimplementedLessonServer) ListStudentLesson(context.Context, *ListStudentLessonRequest) (*ListStudentLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentLesson not implemented")
}
func (UnimplementedLessonServer) mustEmbedUnimplementedLessonServer() {}

// UnsafeLessonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonServer will
// result in compilation errors.
type UnsafeLessonServer interface {
	mustEmbedUnimplementedLessonServer()
}

func RegisterLessonServer(s grpc.ServiceRegistrar, srv LessonServer) {
	s.RegisterService(&Lesson_ServiceDesc, srv)
}

func _Lesson_CreateStudentLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).CreateStudentLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lesson_CreateStudentLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).CreateStudentLesson(ctx, req.(*CreateStudentLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lesson_GetStudentLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).GetStudentLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lesson_GetStudentLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).GetStudentLesson(ctx, req.(*GetStudentLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lesson_ListStudentLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).ListStudentLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lesson_ListStudentLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).ListStudentLesson(ctx, req.(*ListStudentLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lesson_ServiceDesc is the grpc.ServiceDesc for Lesson service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lesson_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workbench.v1.Lesson",
	HandlerType: (*LessonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudentLesson",
			Handler:    _Lesson_CreateStudentLesson_Handler,
		},
		{
			MethodName: "GetStudentLesson",
			Handler:    _Lesson_GetStudentLesson_Handler,
		},
		{
			MethodName: "ListStudentLesson",
			Handler:    _Lesson_ListStudentLesson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lesson/v1/lesson.proto",
}
