// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: course/v1/course.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Course_CreateCoursePlan_FullMethodName                = "/workbench.v1.Course/CreateCoursePlan"
	Course_UpdateCoursePlan_FullMethodName                = "/workbench.v1.Course/UpdateCoursePlan"
	Course_DeleteCoursePlan_FullMethodName                = "/workbench.v1.Course/DeleteCoursePlan"
	Course_GetCoursePlan_FullMethodName                   = "/workbench.v1.Course/GetCoursePlan"
	Course_ListCoursePlan_FullMethodName                  = "/workbench.v1.Course/ListCoursePlan"
	Course_ReleaseCoursePlan_FullMethodName               = "/workbench.v1.Course/ReleaseCoursePlan"
	Course_ScheduleDateForCoursePlan_FullMethodName       = "/workbench.v1.Course/ScheduleDateForCoursePlan"
	Course_CreateCoursePlanDetail_FullMethodName          = "/workbench.v1.Course/CreateCoursePlanDetail"
	Course_UpdateCoursePlanDetail_FullMethodName          = "/workbench.v1.Course/UpdateCoursePlanDetail"
	Course_DeleteCoursePlanDetail_FullMethodName          = "/workbench.v1.Course/DeleteCoursePlanDetail"
	Course_GetCoursePlanDetail_FullMethodName             = "/workbench.v1.Course/GetCoursePlanDetail"
	Course_ListCoursePlanDetail_FullMethodName            = "/workbench.v1.Course/ListCoursePlanDetail"
	Course_ListAllCoursePlanDetail_FullMethodName         = "/workbench.v1.Course/ListAllCoursePlanDetail"
	Course_BatchAddCoursePlanDetail_FullMethodName        = "/workbench.v1.Course/BatchAddCoursePlanDetail"
	Course_StopCoursePlanDetail_FullMethodName            = "/workbench.v1.Course/StopCoursePlanDetail"
	Course_ScheduleDateForCoursePlanDetail_FullMethodName = "/workbench.v1.Course/ScheduleDateForCoursePlanDetail"
	Course_CreateCoursePlanStudent_FullMethodName         = "/workbench.v1.Course/CreateCoursePlanStudent"
	Course_UpdateCoursePlanStudent_FullMethodName         = "/workbench.v1.Course/UpdateCoursePlanStudent"
	Course_DeleteCoursePlanStudent_FullMethodName         = "/workbench.v1.Course/DeleteCoursePlanStudent"
	Course_GetCoursePlanStudent_FullMethodName            = "/workbench.v1.Course/GetCoursePlanStudent"
	Course_ListCoursePlanStudent_FullMethodName           = "/workbench.v1.Course/ListCoursePlanStudent"
	Course_StopCoursePlanStudent_FullMethodName           = "/workbench.v1.Course/StopCoursePlanStudent"
	Course_CreateDailyLesson_FullMethodName               = "/workbench.v1.Course/CreateDailyLesson"
	Course_UpdateDailyLesson_FullMethodName               = "/workbench.v1.Course/UpdateDailyLesson"
	Course_DeleteDailyLesson_FullMethodName               = "/workbench.v1.Course/DeleteDailyLesson"
	Course_GetDailyLesson_FullMethodName                  = "/workbench.v1.Course/GetDailyLesson"
	Course_ListDailyLesson_FullMethodName                 = "/workbench.v1.Course/ListDailyLesson"
	Course_StartDailyLesson_FullMethodName                = "/workbench.v1.Course/StartDailyLesson"
	Course_CancelDailyLesson_FullMethodName               = "/workbench.v1.Course/CancelDailyLesson"
	Course_FinishDailyLesson_FullMethodName               = "/workbench.v1.Course/FinishDailyLesson"
	Course_ListDailyLessonStudent_FullMethodName          = "/workbench.v1.Course/ListDailyLessonStudent"
	Course_SignDailyLessonStudent_FullMethodName          = "/workbench.v1.Course/SignDailyLessonStudent"
	Course_LeaveDailyLessonStudent_FullMethodName         = "/workbench.v1.Course/LeaveDailyLessonStudent"
)

// CourseClient is the client API for Course service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseClient interface {
	// coursePlan
	CreateCoursePlan(ctx context.Context, in *CreateCoursePlanRequest, opts ...grpc.CallOption) (*CreateCoursePlanReply, error)
	UpdateCoursePlan(ctx context.Context, in *UpdateCoursePlanRequest, opts ...grpc.CallOption) (*UpdateCoursePlanReply, error)
	DeleteCoursePlan(ctx context.Context, in *DeleteCoursePlanRequest, opts ...grpc.CallOption) (*DeleteCoursePlanReply, error)
	GetCoursePlan(ctx context.Context, in *GetCoursePlanRequest, opts ...grpc.CallOption) (*GetCoursePlanReply, error)
	ListCoursePlan(ctx context.Context, in *ListCoursePlanRequest, opts ...grpc.CallOption) (*ListCoursePlanReply, error)
	ReleaseCoursePlan(ctx context.Context, in *ReleaseCoursePlanRequest, opts ...grpc.CallOption) (*ReleaseCoursePlanReply, error)
	ScheduleDateForCoursePlan(ctx context.Context, in *ScheduleDateForCoursePlanRequest, opts ...grpc.CallOption) (*ScheduleDateForCoursePlanReply, error)
	// coursePlanDetail
	CreateCoursePlanDetail(ctx context.Context, in *CreateCoursePlanDetailRequest, opts ...grpc.CallOption) (*CreateCoursePlanDetailReply, error)
	UpdateCoursePlanDetail(ctx context.Context, in *UpdateCoursePlanDetailRequest, opts ...grpc.CallOption) (*UpdateCoursePlanDetailReply, error)
	DeleteCoursePlanDetail(ctx context.Context, in *DeleteCoursePlanDetailRequest, opts ...grpc.CallOption) (*DeleteCoursePlanDetailReply, error)
	GetCoursePlanDetail(ctx context.Context, in *GetCoursePlanDetailRequest, opts ...grpc.CallOption) (*GetCoursePlanDetailReply, error)
	ListCoursePlanDetail(ctx context.Context, in *ListCoursePlanDetailRequest, opts ...grpc.CallOption) (*ListCoursePlanDetailReply, error)
	ListAllCoursePlanDetail(ctx context.Context, in *ListAllCoursePlanDetailRequest, opts ...grpc.CallOption) (*ListAllCoursePlanDetailReply, error)
	BatchAddCoursePlanDetail(ctx context.Context, in *BatchAddCoursePlanDetailRequest, opts ...grpc.CallOption) (*BatchAddCoursePlanDetailReply, error)
	StopCoursePlanDetail(ctx context.Context, in *StopCoursePlanDetailRequest, opts ...grpc.CallOption) (*StopCoursePlanDetailReply, error)
	ScheduleDateForCoursePlanDetail(ctx context.Context, in *ScheduleDateForCoursePlanDetailRequest, opts ...grpc.CallOption) (*ScheduleDateForCoursePlanDetailReply, error)
	// 报名
	// coursePlan
	CreateCoursePlanStudent(ctx context.Context, in *CreateCoursePlanStudentRequest, opts ...grpc.CallOption) (*CreateCoursePlanStudentReply, error)
	UpdateCoursePlanStudent(ctx context.Context, in *UpdateCoursePlanStudentRequest, opts ...grpc.CallOption) (*UpdateCoursePlanStudentReply, error)
	DeleteCoursePlanStudent(ctx context.Context, in *DeleteCoursePlanStudentRequest, opts ...grpc.CallOption) (*DeleteCoursePlanStudentReply, error)
	GetCoursePlanStudent(ctx context.Context, in *GetCoursePlanStudentRequest, opts ...grpc.CallOption) (*GetCoursePlanStudentReply, error)
	ListCoursePlanStudent(ctx context.Context, in *ListCoursePlanStudentRequest, opts ...grpc.CallOption) (*ListCoursePlanStudentReply, error)
	StopCoursePlanStudent(ctx context.Context, in *StopCoursePlanStudentRequest, opts ...grpc.CallOption) (*StopCoursePlanStudentReply, error)
	// 课表
	// coursePlanDetail
	CreateDailyLesson(ctx context.Context, in *CreateDailyLessonRequest, opts ...grpc.CallOption) (*CreateDailyLessonReply, error)
	UpdateDailyLesson(ctx context.Context, in *UpdateDailyLessonRequest, opts ...grpc.CallOption) (*UpdateDailyLessonReply, error)
	DeleteDailyLesson(ctx context.Context, in *DeleteDailyLessonRequest, opts ...grpc.CallOption) (*DeleteDailyLessonReply, error)
	GetDailyLesson(ctx context.Context, in *GetDailyLessonRequest, opts ...grpc.CallOption) (*GetDailyLessonReply, error)
	ListDailyLesson(ctx context.Context, in *ListDailyLessonRequest, opts ...grpc.CallOption) (*ListDailyLessonReply, error)
	StartDailyLesson(ctx context.Context, in *StartDailyLessonRequest, opts ...grpc.CallOption) (*StartDailyLessonReply, error)
	CancelDailyLesson(ctx context.Context, in *CancelDailyLessonRequest, opts ...grpc.CallOption) (*CancelDailyLessonReply, error)
	FinishDailyLesson(ctx context.Context, in *FinishDailyLessonRequest, opts ...grpc.CallOption) (*FinishDailyLessonReply, error)
	ListDailyLessonStudent(ctx context.Context, in *ListDailyLessonStudentRequest, opts ...grpc.CallOption) (*ListDailyLessonStudentReply, error)
	SignDailyLessonStudent(ctx context.Context, in *SignDailyLessonStudentRequest, opts ...grpc.CallOption) (*SignDailyLessonStudentReply, error)
	LeaveDailyLessonStudent(ctx context.Context, in *LeaveDailyLessonStudentRequest, opts ...grpc.CallOption) (*LeaveDailyLessonStudentReply, error)
}

type courseClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseClient(cc grpc.ClientConnInterface) CourseClient {
	return &courseClient{cc}
}

func (c *courseClient) CreateCoursePlan(ctx context.Context, in *CreateCoursePlanRequest, opts ...grpc.CallOption) (*CreateCoursePlanReply, error) {
	out := new(CreateCoursePlanReply)
	err := c.cc.Invoke(ctx, Course_CreateCoursePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) UpdateCoursePlan(ctx context.Context, in *UpdateCoursePlanRequest, opts ...grpc.CallOption) (*UpdateCoursePlanReply, error) {
	out := new(UpdateCoursePlanReply)
	err := c.cc.Invoke(ctx, Course_UpdateCoursePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) DeleteCoursePlan(ctx context.Context, in *DeleteCoursePlanRequest, opts ...grpc.CallOption) (*DeleteCoursePlanReply, error) {
	out := new(DeleteCoursePlanReply)
	err := c.cc.Invoke(ctx, Course_DeleteCoursePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) GetCoursePlan(ctx context.Context, in *GetCoursePlanRequest, opts ...grpc.CallOption) (*GetCoursePlanReply, error) {
	out := new(GetCoursePlanReply)
	err := c.cc.Invoke(ctx, Course_GetCoursePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) ListCoursePlan(ctx context.Context, in *ListCoursePlanRequest, opts ...grpc.CallOption) (*ListCoursePlanReply, error) {
	out := new(ListCoursePlanReply)
	err := c.cc.Invoke(ctx, Course_ListCoursePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) ReleaseCoursePlan(ctx context.Context, in *ReleaseCoursePlanRequest, opts ...grpc.CallOption) (*ReleaseCoursePlanReply, error) {
	out := new(ReleaseCoursePlanReply)
	err := c.cc.Invoke(ctx, Course_ReleaseCoursePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) ScheduleDateForCoursePlan(ctx context.Context, in *ScheduleDateForCoursePlanRequest, opts ...grpc.CallOption) (*ScheduleDateForCoursePlanReply, error) {
	out := new(ScheduleDateForCoursePlanReply)
	err := c.cc.Invoke(ctx, Course_ScheduleDateForCoursePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) CreateCoursePlanDetail(ctx context.Context, in *CreateCoursePlanDetailRequest, opts ...grpc.CallOption) (*CreateCoursePlanDetailReply, error) {
	out := new(CreateCoursePlanDetailReply)
	err := c.cc.Invoke(ctx, Course_CreateCoursePlanDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) UpdateCoursePlanDetail(ctx context.Context, in *UpdateCoursePlanDetailRequest, opts ...grpc.CallOption) (*UpdateCoursePlanDetailReply, error) {
	out := new(UpdateCoursePlanDetailReply)
	err := c.cc.Invoke(ctx, Course_UpdateCoursePlanDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) DeleteCoursePlanDetail(ctx context.Context, in *DeleteCoursePlanDetailRequest, opts ...grpc.CallOption) (*DeleteCoursePlanDetailReply, error) {
	out := new(DeleteCoursePlanDetailReply)
	err := c.cc.Invoke(ctx, Course_DeleteCoursePlanDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) GetCoursePlanDetail(ctx context.Context, in *GetCoursePlanDetailRequest, opts ...grpc.CallOption) (*GetCoursePlanDetailReply, error) {
	out := new(GetCoursePlanDetailReply)
	err := c.cc.Invoke(ctx, Course_GetCoursePlanDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) ListCoursePlanDetail(ctx context.Context, in *ListCoursePlanDetailRequest, opts ...grpc.CallOption) (*ListCoursePlanDetailReply, error) {
	out := new(ListCoursePlanDetailReply)
	err := c.cc.Invoke(ctx, Course_ListCoursePlanDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) ListAllCoursePlanDetail(ctx context.Context, in *ListAllCoursePlanDetailRequest, opts ...grpc.CallOption) (*ListAllCoursePlanDetailReply, error) {
	out := new(ListAllCoursePlanDetailReply)
	err := c.cc.Invoke(ctx, Course_ListAllCoursePlanDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) BatchAddCoursePlanDetail(ctx context.Context, in *BatchAddCoursePlanDetailRequest, opts ...grpc.CallOption) (*BatchAddCoursePlanDetailReply, error) {
	out := new(BatchAddCoursePlanDetailReply)
	err := c.cc.Invoke(ctx, Course_BatchAddCoursePlanDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) StopCoursePlanDetail(ctx context.Context, in *StopCoursePlanDetailRequest, opts ...grpc.CallOption) (*StopCoursePlanDetailReply, error) {
	out := new(StopCoursePlanDetailReply)
	err := c.cc.Invoke(ctx, Course_StopCoursePlanDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) ScheduleDateForCoursePlanDetail(ctx context.Context, in *ScheduleDateForCoursePlanDetailRequest, opts ...grpc.CallOption) (*ScheduleDateForCoursePlanDetailReply, error) {
	out := new(ScheduleDateForCoursePlanDetailReply)
	err := c.cc.Invoke(ctx, Course_ScheduleDateForCoursePlanDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) CreateCoursePlanStudent(ctx context.Context, in *CreateCoursePlanStudentRequest, opts ...grpc.CallOption) (*CreateCoursePlanStudentReply, error) {
	out := new(CreateCoursePlanStudentReply)
	err := c.cc.Invoke(ctx, Course_CreateCoursePlanStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) UpdateCoursePlanStudent(ctx context.Context, in *UpdateCoursePlanStudentRequest, opts ...grpc.CallOption) (*UpdateCoursePlanStudentReply, error) {
	out := new(UpdateCoursePlanStudentReply)
	err := c.cc.Invoke(ctx, Course_UpdateCoursePlanStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) DeleteCoursePlanStudent(ctx context.Context, in *DeleteCoursePlanStudentRequest, opts ...grpc.CallOption) (*DeleteCoursePlanStudentReply, error) {
	out := new(DeleteCoursePlanStudentReply)
	err := c.cc.Invoke(ctx, Course_DeleteCoursePlanStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) GetCoursePlanStudent(ctx context.Context, in *GetCoursePlanStudentRequest, opts ...grpc.CallOption) (*GetCoursePlanStudentReply, error) {
	out := new(GetCoursePlanStudentReply)
	err := c.cc.Invoke(ctx, Course_GetCoursePlanStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) ListCoursePlanStudent(ctx context.Context, in *ListCoursePlanStudentRequest, opts ...grpc.CallOption) (*ListCoursePlanStudentReply, error) {
	out := new(ListCoursePlanStudentReply)
	err := c.cc.Invoke(ctx, Course_ListCoursePlanStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) StopCoursePlanStudent(ctx context.Context, in *StopCoursePlanStudentRequest, opts ...grpc.CallOption) (*StopCoursePlanStudentReply, error) {
	out := new(StopCoursePlanStudentReply)
	err := c.cc.Invoke(ctx, Course_StopCoursePlanStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) CreateDailyLesson(ctx context.Context, in *CreateDailyLessonRequest, opts ...grpc.CallOption) (*CreateDailyLessonReply, error) {
	out := new(CreateDailyLessonReply)
	err := c.cc.Invoke(ctx, Course_CreateDailyLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) UpdateDailyLesson(ctx context.Context, in *UpdateDailyLessonRequest, opts ...grpc.CallOption) (*UpdateDailyLessonReply, error) {
	out := new(UpdateDailyLessonReply)
	err := c.cc.Invoke(ctx, Course_UpdateDailyLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) DeleteDailyLesson(ctx context.Context, in *DeleteDailyLessonRequest, opts ...grpc.CallOption) (*DeleteDailyLessonReply, error) {
	out := new(DeleteDailyLessonReply)
	err := c.cc.Invoke(ctx, Course_DeleteDailyLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) GetDailyLesson(ctx context.Context, in *GetDailyLessonRequest, opts ...grpc.CallOption) (*GetDailyLessonReply, error) {
	out := new(GetDailyLessonReply)
	err := c.cc.Invoke(ctx, Course_GetDailyLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) ListDailyLesson(ctx context.Context, in *ListDailyLessonRequest, opts ...grpc.CallOption) (*ListDailyLessonReply, error) {
	out := new(ListDailyLessonReply)
	err := c.cc.Invoke(ctx, Course_ListDailyLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) StartDailyLesson(ctx context.Context, in *StartDailyLessonRequest, opts ...grpc.CallOption) (*StartDailyLessonReply, error) {
	out := new(StartDailyLessonReply)
	err := c.cc.Invoke(ctx, Course_StartDailyLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) CancelDailyLesson(ctx context.Context, in *CancelDailyLessonRequest, opts ...grpc.CallOption) (*CancelDailyLessonReply, error) {
	out := new(CancelDailyLessonReply)
	err := c.cc.Invoke(ctx, Course_CancelDailyLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) FinishDailyLesson(ctx context.Context, in *FinishDailyLessonRequest, opts ...grpc.CallOption) (*FinishDailyLessonReply, error) {
	out := new(FinishDailyLessonReply)
	err := c.cc.Invoke(ctx, Course_FinishDailyLesson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) ListDailyLessonStudent(ctx context.Context, in *ListDailyLessonStudentRequest, opts ...grpc.CallOption) (*ListDailyLessonStudentReply, error) {
	out := new(ListDailyLessonStudentReply)
	err := c.cc.Invoke(ctx, Course_ListDailyLessonStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) SignDailyLessonStudent(ctx context.Context, in *SignDailyLessonStudentRequest, opts ...grpc.CallOption) (*SignDailyLessonStudentReply, error) {
	out := new(SignDailyLessonStudentReply)
	err := c.cc.Invoke(ctx, Course_SignDailyLessonStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) LeaveDailyLessonStudent(ctx context.Context, in *LeaveDailyLessonStudentRequest, opts ...grpc.CallOption) (*LeaveDailyLessonStudentReply, error) {
	out := new(LeaveDailyLessonStudentReply)
	err := c.cc.Invoke(ctx, Course_LeaveDailyLessonStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServer is the server API for Course service.
// All implementations must embed UnimplementedCourseServer
// for forward compatibility
type CourseServer interface {
	// coursePlan
	CreateCoursePlan(context.Context, *CreateCoursePlanRequest) (*CreateCoursePlanReply, error)
	UpdateCoursePlan(context.Context, *UpdateCoursePlanRequest) (*UpdateCoursePlanReply, error)
	DeleteCoursePlan(context.Context, *DeleteCoursePlanRequest) (*DeleteCoursePlanReply, error)
	GetCoursePlan(context.Context, *GetCoursePlanRequest) (*GetCoursePlanReply, error)
	ListCoursePlan(context.Context, *ListCoursePlanRequest) (*ListCoursePlanReply, error)
	ReleaseCoursePlan(context.Context, *ReleaseCoursePlanRequest) (*ReleaseCoursePlanReply, error)
	ScheduleDateForCoursePlan(context.Context, *ScheduleDateForCoursePlanRequest) (*ScheduleDateForCoursePlanReply, error)
	// coursePlanDetail
	CreateCoursePlanDetail(context.Context, *CreateCoursePlanDetailRequest) (*CreateCoursePlanDetailReply, error)
	UpdateCoursePlanDetail(context.Context, *UpdateCoursePlanDetailRequest) (*UpdateCoursePlanDetailReply, error)
	DeleteCoursePlanDetail(context.Context, *DeleteCoursePlanDetailRequest) (*DeleteCoursePlanDetailReply, error)
	GetCoursePlanDetail(context.Context, *GetCoursePlanDetailRequest) (*GetCoursePlanDetailReply, error)
	ListCoursePlanDetail(context.Context, *ListCoursePlanDetailRequest) (*ListCoursePlanDetailReply, error)
	ListAllCoursePlanDetail(context.Context, *ListAllCoursePlanDetailRequest) (*ListAllCoursePlanDetailReply, error)
	BatchAddCoursePlanDetail(context.Context, *BatchAddCoursePlanDetailRequest) (*BatchAddCoursePlanDetailReply, error)
	StopCoursePlanDetail(context.Context, *StopCoursePlanDetailRequest) (*StopCoursePlanDetailReply, error)
	ScheduleDateForCoursePlanDetail(context.Context, *ScheduleDateForCoursePlanDetailRequest) (*ScheduleDateForCoursePlanDetailReply, error)
	// 报名
	// coursePlan
	CreateCoursePlanStudent(context.Context, *CreateCoursePlanStudentRequest) (*CreateCoursePlanStudentReply, error)
	UpdateCoursePlanStudent(context.Context, *UpdateCoursePlanStudentRequest) (*UpdateCoursePlanStudentReply, error)
	DeleteCoursePlanStudent(context.Context, *DeleteCoursePlanStudentRequest) (*DeleteCoursePlanStudentReply, error)
	GetCoursePlanStudent(context.Context, *GetCoursePlanStudentRequest) (*GetCoursePlanStudentReply, error)
	ListCoursePlanStudent(context.Context, *ListCoursePlanStudentRequest) (*ListCoursePlanStudentReply, error)
	StopCoursePlanStudent(context.Context, *StopCoursePlanStudentRequest) (*StopCoursePlanStudentReply, error)
	// 课表
	// coursePlanDetail
	CreateDailyLesson(context.Context, *CreateDailyLessonRequest) (*CreateDailyLessonReply, error)
	UpdateDailyLesson(context.Context, *UpdateDailyLessonRequest) (*UpdateDailyLessonReply, error)
	DeleteDailyLesson(context.Context, *DeleteDailyLessonRequest) (*DeleteDailyLessonReply, error)
	GetDailyLesson(context.Context, *GetDailyLessonRequest) (*GetDailyLessonReply, error)
	ListDailyLesson(context.Context, *ListDailyLessonRequest) (*ListDailyLessonReply, error)
	StartDailyLesson(context.Context, *StartDailyLessonRequest) (*StartDailyLessonReply, error)
	CancelDailyLesson(context.Context, *CancelDailyLessonRequest) (*CancelDailyLessonReply, error)
	FinishDailyLesson(context.Context, *FinishDailyLessonRequest) (*FinishDailyLessonReply, error)
	ListDailyLessonStudent(context.Context, *ListDailyLessonStudentRequest) (*ListDailyLessonStudentReply, error)
	SignDailyLessonStudent(context.Context, *SignDailyLessonStudentRequest) (*SignDailyLessonStudentReply, error)
	LeaveDailyLessonStudent(context.Context, *LeaveDailyLessonStudentRequest) (*LeaveDailyLessonStudentReply, error)
	mustEmbedUnimplementedCourseServer()
}

// UnimplementedCourseServer must be embedded to have forward compatible implementations.
type UnimplementedCourseServer struct {
}

func (UnimplementedCourseServer) CreateCoursePlan(context.Context, *CreateCoursePlanRequest) (*CreateCoursePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoursePlan not implemented")
}
func (UnimplementedCourseServer) UpdateCoursePlan(context.Context, *UpdateCoursePlanRequest) (*UpdateCoursePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoursePlan not implemented")
}
func (UnimplementedCourseServer) DeleteCoursePlan(context.Context, *DeleteCoursePlanRequest) (*DeleteCoursePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoursePlan not implemented")
}
func (UnimplementedCourseServer) GetCoursePlan(context.Context, *GetCoursePlanRequest) (*GetCoursePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursePlan not implemented")
}
func (UnimplementedCourseServer) ListCoursePlan(context.Context, *ListCoursePlanRequest) (*ListCoursePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoursePlan not implemented")
}
func (UnimplementedCourseServer) ReleaseCoursePlan(context.Context, *ReleaseCoursePlanRequest) (*ReleaseCoursePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCoursePlan not implemented")
}
func (UnimplementedCourseServer) ScheduleDateForCoursePlan(context.Context, *ScheduleDateForCoursePlanRequest) (*ScheduleDateForCoursePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleDateForCoursePlan not implemented")
}
func (UnimplementedCourseServer) CreateCoursePlanDetail(context.Context, *CreateCoursePlanDetailRequest) (*CreateCoursePlanDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoursePlanDetail not implemented")
}
func (UnimplementedCourseServer) UpdateCoursePlanDetail(context.Context, *UpdateCoursePlanDetailRequest) (*UpdateCoursePlanDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoursePlanDetail not implemented")
}
func (UnimplementedCourseServer) DeleteCoursePlanDetail(context.Context, *DeleteCoursePlanDetailRequest) (*DeleteCoursePlanDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoursePlanDetail not implemented")
}
func (UnimplementedCourseServer) GetCoursePlanDetail(context.Context, *GetCoursePlanDetailRequest) (*GetCoursePlanDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursePlanDetail not implemented")
}
func (UnimplementedCourseServer) ListCoursePlanDetail(context.Context, *ListCoursePlanDetailRequest) (*ListCoursePlanDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoursePlanDetail not implemented")
}
func (UnimplementedCourseServer) ListAllCoursePlanDetail(context.Context, *ListAllCoursePlanDetailRequest) (*ListAllCoursePlanDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCoursePlanDetail not implemented")
}
func (UnimplementedCourseServer) BatchAddCoursePlanDetail(context.Context, *BatchAddCoursePlanDetailRequest) (*BatchAddCoursePlanDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddCoursePlanDetail not implemented")
}
func (UnimplementedCourseServer) StopCoursePlanDetail(context.Context, *StopCoursePlanDetailRequest) (*StopCoursePlanDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCoursePlanDetail not implemented")
}
func (UnimplementedCourseServer) ScheduleDateForCoursePlanDetail(context.Context, *ScheduleDateForCoursePlanDetailRequest) (*ScheduleDateForCoursePlanDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleDateForCoursePlanDetail not implemented")
}
func (UnimplementedCourseServer) CreateCoursePlanStudent(context.Context, *CreateCoursePlanStudentRequest) (*CreateCoursePlanStudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoursePlanStudent not implemented")
}
func (UnimplementedCourseServer) UpdateCoursePlanStudent(context.Context, *UpdateCoursePlanStudentRequest) (*UpdateCoursePlanStudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoursePlanStudent not implemented")
}
func (UnimplementedCourseServer) DeleteCoursePlanStudent(context.Context, *DeleteCoursePlanStudentRequest) (*DeleteCoursePlanStudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoursePlanStudent not implemented")
}
func (UnimplementedCourseServer) GetCoursePlanStudent(context.Context, *GetCoursePlanStudentRequest) (*GetCoursePlanStudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursePlanStudent not implemented")
}
func (UnimplementedCourseServer) ListCoursePlanStudent(context.Context, *ListCoursePlanStudentRequest) (*ListCoursePlanStudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoursePlanStudent not implemented")
}
func (UnimplementedCourseServer) StopCoursePlanStudent(context.Context, *StopCoursePlanStudentRequest) (*StopCoursePlanStudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCoursePlanStudent not implemented")
}
func (UnimplementedCourseServer) CreateDailyLesson(context.Context, *CreateDailyLessonRequest) (*CreateDailyLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDailyLesson not implemented")
}
func (UnimplementedCourseServer) UpdateDailyLesson(context.Context, *UpdateDailyLessonRequest) (*UpdateDailyLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDailyLesson not implemented")
}
func (UnimplementedCourseServer) DeleteDailyLesson(context.Context, *DeleteDailyLessonRequest) (*DeleteDailyLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDailyLesson not implemented")
}
func (UnimplementedCourseServer) GetDailyLesson(context.Context, *GetDailyLessonRequest) (*GetDailyLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyLesson not implemented")
}
func (UnimplementedCourseServer) ListDailyLesson(context.Context, *ListDailyLessonRequest) (*ListDailyLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDailyLesson not implemented")
}
func (UnimplementedCourseServer) StartDailyLesson(context.Context, *StartDailyLessonRequest) (*StartDailyLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDailyLesson not implemented")
}
func (UnimplementedCourseServer) CancelDailyLesson(context.Context, *CancelDailyLessonRequest) (*CancelDailyLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDailyLesson not implemented")
}
func (UnimplementedCourseServer) FinishDailyLesson(context.Context, *FinishDailyLessonRequest) (*FinishDailyLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishDailyLesson not implemented")
}
func (UnimplementedCourseServer) ListDailyLessonStudent(context.Context, *ListDailyLessonStudentRequest) (*ListDailyLessonStudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDailyLessonStudent not implemented")
}
func (UnimplementedCourseServer) SignDailyLessonStudent(context.Context, *SignDailyLessonStudentRequest) (*SignDailyLessonStudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignDailyLessonStudent not implemented")
}
func (UnimplementedCourseServer) LeaveDailyLessonStudent(context.Context, *LeaveDailyLessonStudentRequest) (*LeaveDailyLessonStudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveDailyLessonStudent not implemented")
}
func (UnimplementedCourseServer) mustEmbedUnimplementedCourseServer() {}

// UnsafeCourseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServer will
// result in compilation errors.
type UnsafeCourseServer interface {
	mustEmbedUnimplementedCourseServer()
}

func RegisterCourseServer(s grpc.ServiceRegistrar, srv CourseServer) {
	s.RegisterService(&Course_ServiceDesc, srv)
}

func _Course_CreateCoursePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoursePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).CreateCoursePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_CreateCoursePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).CreateCoursePlan(ctx, req.(*CreateCoursePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpdateCoursePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoursePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpdateCoursePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_UpdateCoursePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpdateCoursePlan(ctx, req.(*UpdateCoursePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_DeleteCoursePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoursePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).DeleteCoursePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_DeleteCoursePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).DeleteCoursePlan(ctx, req.(*DeleteCoursePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_GetCoursePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).GetCoursePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_GetCoursePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).GetCoursePlan(ctx, req.(*GetCoursePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ListCoursePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoursePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ListCoursePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_ListCoursePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ListCoursePlan(ctx, req.(*ListCoursePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ReleaseCoursePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCoursePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ReleaseCoursePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_ReleaseCoursePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ReleaseCoursePlan(ctx, req.(*ReleaseCoursePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ScheduleDateForCoursePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleDateForCoursePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ScheduleDateForCoursePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_ScheduleDateForCoursePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ScheduleDateForCoursePlan(ctx, req.(*ScheduleDateForCoursePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_CreateCoursePlanDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoursePlanDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).CreateCoursePlanDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_CreateCoursePlanDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).CreateCoursePlanDetail(ctx, req.(*CreateCoursePlanDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpdateCoursePlanDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoursePlanDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpdateCoursePlanDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_UpdateCoursePlanDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpdateCoursePlanDetail(ctx, req.(*UpdateCoursePlanDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_DeleteCoursePlanDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoursePlanDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).DeleteCoursePlanDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_DeleteCoursePlanDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).DeleteCoursePlanDetail(ctx, req.(*DeleteCoursePlanDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_GetCoursePlanDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursePlanDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).GetCoursePlanDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_GetCoursePlanDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).GetCoursePlanDetail(ctx, req.(*GetCoursePlanDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ListCoursePlanDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoursePlanDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ListCoursePlanDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_ListCoursePlanDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ListCoursePlanDetail(ctx, req.(*ListCoursePlanDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ListAllCoursePlanDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllCoursePlanDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ListAllCoursePlanDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_ListAllCoursePlanDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ListAllCoursePlanDetail(ctx, req.(*ListAllCoursePlanDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_BatchAddCoursePlanDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddCoursePlanDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).BatchAddCoursePlanDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_BatchAddCoursePlanDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).BatchAddCoursePlanDetail(ctx, req.(*BatchAddCoursePlanDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_StopCoursePlanDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCoursePlanDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).StopCoursePlanDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_StopCoursePlanDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).StopCoursePlanDetail(ctx, req.(*StopCoursePlanDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ScheduleDateForCoursePlanDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleDateForCoursePlanDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ScheduleDateForCoursePlanDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_ScheduleDateForCoursePlanDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ScheduleDateForCoursePlanDetail(ctx, req.(*ScheduleDateForCoursePlanDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_CreateCoursePlanStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoursePlanStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).CreateCoursePlanStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_CreateCoursePlanStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).CreateCoursePlanStudent(ctx, req.(*CreateCoursePlanStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpdateCoursePlanStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoursePlanStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpdateCoursePlanStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_UpdateCoursePlanStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpdateCoursePlanStudent(ctx, req.(*UpdateCoursePlanStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_DeleteCoursePlanStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoursePlanStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).DeleteCoursePlanStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_DeleteCoursePlanStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).DeleteCoursePlanStudent(ctx, req.(*DeleteCoursePlanStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_GetCoursePlanStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursePlanStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).GetCoursePlanStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_GetCoursePlanStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).GetCoursePlanStudent(ctx, req.(*GetCoursePlanStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ListCoursePlanStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoursePlanStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ListCoursePlanStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_ListCoursePlanStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ListCoursePlanStudent(ctx, req.(*ListCoursePlanStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_StopCoursePlanStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCoursePlanStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).StopCoursePlanStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_StopCoursePlanStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).StopCoursePlanStudent(ctx, req.(*StopCoursePlanStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_CreateDailyLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDailyLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).CreateDailyLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_CreateDailyLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).CreateDailyLesson(ctx, req.(*CreateDailyLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpdateDailyLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDailyLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpdateDailyLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_UpdateDailyLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpdateDailyLesson(ctx, req.(*UpdateDailyLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_DeleteDailyLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDailyLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).DeleteDailyLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_DeleteDailyLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).DeleteDailyLesson(ctx, req.(*DeleteDailyLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_GetDailyLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).GetDailyLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_GetDailyLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).GetDailyLesson(ctx, req.(*GetDailyLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ListDailyLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDailyLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ListDailyLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_ListDailyLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ListDailyLesson(ctx, req.(*ListDailyLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_StartDailyLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDailyLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).StartDailyLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_StartDailyLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).StartDailyLesson(ctx, req.(*StartDailyLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_CancelDailyLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDailyLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).CancelDailyLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_CancelDailyLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).CancelDailyLesson(ctx, req.(*CancelDailyLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_FinishDailyLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishDailyLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).FinishDailyLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_FinishDailyLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).FinishDailyLesson(ctx, req.(*FinishDailyLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ListDailyLessonStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDailyLessonStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ListDailyLessonStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_ListDailyLessonStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ListDailyLessonStudent(ctx, req.(*ListDailyLessonStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_SignDailyLessonStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignDailyLessonStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).SignDailyLessonStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_SignDailyLessonStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).SignDailyLessonStudent(ctx, req.(*SignDailyLessonStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_LeaveDailyLessonStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveDailyLessonStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).LeaveDailyLessonStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_LeaveDailyLessonStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).LeaveDailyLessonStudent(ctx, req.(*LeaveDailyLessonStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Course_ServiceDesc is the grpc.ServiceDesc for Course service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Course_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workbench.v1.Course",
	HandlerType: (*CourseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoursePlan",
			Handler:    _Course_CreateCoursePlan_Handler,
		},
		{
			MethodName: "UpdateCoursePlan",
			Handler:    _Course_UpdateCoursePlan_Handler,
		},
		{
			MethodName: "DeleteCoursePlan",
			Handler:    _Course_DeleteCoursePlan_Handler,
		},
		{
			MethodName: "GetCoursePlan",
			Handler:    _Course_GetCoursePlan_Handler,
		},
		{
			MethodName: "ListCoursePlan",
			Handler:    _Course_ListCoursePlan_Handler,
		},
		{
			MethodName: "ReleaseCoursePlan",
			Handler:    _Course_ReleaseCoursePlan_Handler,
		},
		{
			MethodName: "ScheduleDateForCoursePlan",
			Handler:    _Course_ScheduleDateForCoursePlan_Handler,
		},
		{
			MethodName: "CreateCoursePlanDetail",
			Handler:    _Course_CreateCoursePlanDetail_Handler,
		},
		{
			MethodName: "UpdateCoursePlanDetail",
			Handler:    _Course_UpdateCoursePlanDetail_Handler,
		},
		{
			MethodName: "DeleteCoursePlanDetail",
			Handler:    _Course_DeleteCoursePlanDetail_Handler,
		},
		{
			MethodName: "GetCoursePlanDetail",
			Handler:    _Course_GetCoursePlanDetail_Handler,
		},
		{
			MethodName: "ListCoursePlanDetail",
			Handler:    _Course_ListCoursePlanDetail_Handler,
		},
		{
			MethodName: "ListAllCoursePlanDetail",
			Handler:    _Course_ListAllCoursePlanDetail_Handler,
		},
		{
			MethodName: "BatchAddCoursePlanDetail",
			Handler:    _Course_BatchAddCoursePlanDetail_Handler,
		},
		{
			MethodName: "StopCoursePlanDetail",
			Handler:    _Course_StopCoursePlanDetail_Handler,
		},
		{
			MethodName: "ScheduleDateForCoursePlanDetail",
			Handler:    _Course_ScheduleDateForCoursePlanDetail_Handler,
		},
		{
			MethodName: "CreateCoursePlanStudent",
			Handler:    _Course_CreateCoursePlanStudent_Handler,
		},
		{
			MethodName: "UpdateCoursePlanStudent",
			Handler:    _Course_UpdateCoursePlanStudent_Handler,
		},
		{
			MethodName: "DeleteCoursePlanStudent",
			Handler:    _Course_DeleteCoursePlanStudent_Handler,
		},
		{
			MethodName: "GetCoursePlanStudent",
			Handler:    _Course_GetCoursePlanStudent_Handler,
		},
		{
			MethodName: "ListCoursePlanStudent",
			Handler:    _Course_ListCoursePlanStudent_Handler,
		},
		{
			MethodName: "StopCoursePlanStudent",
			Handler:    _Course_StopCoursePlanStudent_Handler,
		},
		{
			MethodName: "CreateDailyLesson",
			Handler:    _Course_CreateDailyLesson_Handler,
		},
		{
			MethodName: "UpdateDailyLesson",
			Handler:    _Course_UpdateDailyLesson_Handler,
		},
		{
			MethodName: "DeleteDailyLesson",
			Handler:    _Course_DeleteDailyLesson_Handler,
		},
		{
			MethodName: "GetDailyLesson",
			Handler:    _Course_GetDailyLesson_Handler,
		},
		{
			MethodName: "ListDailyLesson",
			Handler:    _Course_ListDailyLesson_Handler,
		},
		{
			MethodName: "StartDailyLesson",
			Handler:    _Course_StartDailyLesson_Handler,
		},
		{
			MethodName: "CancelDailyLesson",
			Handler:    _Course_CancelDailyLesson_Handler,
		},
		{
			MethodName: "FinishDailyLesson",
			Handler:    _Course_FinishDailyLesson_Handler,
		},
		{
			MethodName: "ListDailyLessonStudent",
			Handler:    _Course_ListDailyLessonStudent_Handler,
		},
		{
			MethodName: "SignDailyLessonStudent",
			Handler:    _Course_SignDailyLessonStudent_Handler,
		},
		{
			MethodName: "LeaveDailyLessonStudent",
			Handler:    _Course_LeaveDailyLessonStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course/v1/course.proto",
}
