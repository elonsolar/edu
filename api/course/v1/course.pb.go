// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: course/v1/course.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// coursePlan
type CreateCoursePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	StartTime   string                                 `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     string                                 `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CycleType   int32                                  `protobuf:"varint,5,opt,name=cycle_type,json=cycleType,proto3" json:"cycle_type,omitempty"`
	ExcludeRule []*CreateCoursePlanRequest_ExcludeRule `protobuf:"bytes,7,rep,name=exclude_rule,json=excludeRule,proto3" json:"exclude_rule,omitempty"`
}

func (x *CreateCoursePlanRequest) Reset() {
	*x = CreateCoursePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoursePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoursePlanRequest) ProtoMessage() {}

func (x *CreateCoursePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoursePlanRequest.ProtoReflect.Descriptor instead.
func (*CreateCoursePlanRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCoursePlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCoursePlanRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCoursePlanRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CreateCoursePlanRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CreateCoursePlanRequest) GetCycleType() int32 {
	if x != nil {
		return x.CycleType
	}
	return 0
}

func (x *CreateCoursePlanRequest) GetExcludeRule() []*CreateCoursePlanRequest_ExcludeRule {
	if x != nil {
		return x.ExcludeRule
	}
	return nil
}

type CreateCoursePlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCoursePlanReply) Reset() {
	*x = CreateCoursePlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoursePlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoursePlanReply) ProtoMessage() {}

func (x *CreateCoursePlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoursePlanReply.ProtoReflect.Descriptor instead.
func (*CreateCoursePlanReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{1}
}

type UpdateCoursePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartTime   string                                 `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     string                                 `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CycleType   int32                                  `protobuf:"varint,9,opt,name=cycle_type,json=cycleType,proto3" json:"cycle_type,omitempty"`
	ExcludeRule []*UpdateCoursePlanRequest_ExcludeRule `protobuf:"bytes,7,rep,name=exclude_rule,json=excludeRule,proto3" json:"exclude_rule,omitempty"`
	Version     int32                                  `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateCoursePlanRequest) Reset() {
	*x = UpdateCoursePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoursePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoursePlanRequest) ProtoMessage() {}

func (x *UpdateCoursePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoursePlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoursePlanRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateCoursePlanRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCoursePlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCoursePlanRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCoursePlanRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateCoursePlanRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateCoursePlanRequest) GetCycleType() int32 {
	if x != nil {
		return x.CycleType
	}
	return 0
}

func (x *UpdateCoursePlanRequest) GetExcludeRule() []*UpdateCoursePlanRequest_ExcludeRule {
	if x != nil {
		return x.ExcludeRule
	}
	return nil
}

func (x *UpdateCoursePlanRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type UpdateCoursePlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCoursePlanReply) Reset() {
	*x = UpdateCoursePlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoursePlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoursePlanReply) ProtoMessage() {}

func (x *UpdateCoursePlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoursePlanReply.ProtoReflect.Descriptor instead.
func (*UpdateCoursePlanReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{3}
}

type DeleteCoursePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCoursePlanRequest) Reset() {
	*x = DeleteCoursePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoursePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoursePlanRequest) ProtoMessage() {}

func (x *DeleteCoursePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoursePlanRequest.ProtoReflect.Descriptor instead.
func (*DeleteCoursePlanRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteCoursePlanRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteCoursePlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCoursePlanReply) Reset() {
	*x = DeleteCoursePlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoursePlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoursePlanReply) ProtoMessage() {}

func (x *DeleteCoursePlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoursePlanReply.ProtoReflect.Descriptor instead.
func (*DeleteCoursePlanReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{5}
}

type GetCoursePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCoursePlanRequest) Reset() {
	*x = GetCoursePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoursePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoursePlanRequest) ProtoMessage() {}

func (x *GetCoursePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoursePlanRequest.ProtoReflect.Descriptor instead.
func (*GetCoursePlanRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{6}
}

func (x *GetCoursePlanRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCoursePlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartTime   string                            `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     string                            `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CycleType   int32                             `protobuf:"varint,6,opt,name=cycle_type,json=cycleType,proto3" json:"cycle_type,omitempty"`
	ExcludeRule []*GetCoursePlanReply_ExcludeRule `protobuf:"bytes,7,rep,name=exclude_rule,json=excludeRule,proto3" json:"exclude_rule,omitempty"`
	Version     int32                             `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetCoursePlanReply) Reset() {
	*x = GetCoursePlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoursePlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoursePlanReply) ProtoMessage() {}

func (x *GetCoursePlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoursePlanReply.ProtoReflect.Descriptor instead.
func (*GetCoursePlanReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{7}
}

func (x *GetCoursePlanReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCoursePlanReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCoursePlanReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetCoursePlanReply) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetCoursePlanReply) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetCoursePlanReply) GetCycleType() int32 {
	if x != nil {
		return x.CycleType
	}
	return 0
}

func (x *GetCoursePlanReply) GetExcludeRule() []*GetCoursePlanReply_ExcludeRule {
	if x != nil {
		return x.ExcludeRule
	}
	return nil
}

func (x *GetCoursePlanReply) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListCoursePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr     string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	PageNo   int32  `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListCoursePlanRequest) Reset() {
	*x = ListCoursePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursePlanRequest) ProtoMessage() {}

func (x *ListCoursePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursePlanRequest.ProtoReflect.Descriptor instead.
func (*ListCoursePlanRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{8}
}

func (x *ListCoursePlanRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *ListCoursePlanRequest) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListCoursePlanRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListCoursePlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ListCoursePlanReply_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32                       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListCoursePlanReply) Reset() {
	*x = ListCoursePlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursePlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursePlanReply) ProtoMessage() {}

func (x *ListCoursePlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursePlanReply.ProtoReflect.Descriptor instead.
func (*ListCoursePlanReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{9}
}

func (x *ListCoursePlanReply) GetData() []*ListCoursePlanReply_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCoursePlanReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ReleaseCoursePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdList []int32 `protobuf:"varint,1,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
}

func (x *ReleaseCoursePlanRequest) Reset() {
	*x = ReleaseCoursePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseCoursePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCoursePlanRequest) ProtoMessage() {}

func (x *ReleaseCoursePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCoursePlanRequest.ProtoReflect.Descriptor instead.
func (*ReleaseCoursePlanRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{10}
}

func (x *ReleaseCoursePlanRequest) GetIdList() []int32 {
	if x != nil {
		return x.IdList
	}
	return nil
}

type ReleaseCoursePlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessNum int32  `protobuf:"varint,1,opt,name=success_num,json=successNum,proto3" json:"success_num,omitempty"`
	FailureNum int32  `protobuf:"varint,2,opt,name=failure_num,json=failureNum,proto3" json:"failure_num,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ReleaseCoursePlanReply) Reset() {
	*x = ReleaseCoursePlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseCoursePlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCoursePlanReply) ProtoMessage() {}

func (x *ReleaseCoursePlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCoursePlanReply.ProtoReflect.Descriptor instead.
func (*ReleaseCoursePlanReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{11}
}

func (x *ReleaseCoursePlanReply) GetSuccessNum() int32 {
	if x != nil {
		return x.SuccessNum
	}
	return 0
}

func (x *ReleaseCoursePlanReply) GetFailureNum() int32 {
	if x != nil {
		return x.FailureNum
	}
	return 0
}

func (x *ReleaseCoursePlanReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ScheduleDateForCoursePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DetailIds []int32 `protobuf:"varint,2,rep,packed,name=detail_ids,json=detailIds,proto3" json:"detail_ids,omitempty"`
}

func (x *ScheduleDateForCoursePlanRequest) Reset() {
	*x = ScheduleDateForCoursePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleDateForCoursePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleDateForCoursePlanRequest) ProtoMessage() {}

func (x *ScheduleDateForCoursePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleDateForCoursePlanRequest.ProtoReflect.Descriptor instead.
func (*ScheduleDateForCoursePlanRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{12}
}

func (x *ScheduleDateForCoursePlanRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScheduleDateForCoursePlanRequest) GetDetailIds() []int32 {
	if x != nil {
		return x.DetailIds
	}
	return nil
}

type ScheduleDateForCoursePlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScheduleDateForCoursePlanReply) Reset() {
	*x = ScheduleDateForCoursePlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleDateForCoursePlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleDateForCoursePlanReply) ProtoMessage() {}

func (x *ScheduleDateForCoursePlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleDateForCoursePlanReply.ProtoReflect.Descriptor instead.
func (*ScheduleDateForCoursePlanReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{13}
}

type CreateCoursePlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId       int32  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	DayIndex     int32  `protobuf:"varint,3,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	DayIndexName string `protobuf:"bytes,4,opt,name=day_index_name,json=dayIndexName,proto3" json:"day_index_name,omitempty"`
	StartTime    string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RoomId       int32  `protobuf:"varint,7,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName     string `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	TeacherId    int32  `protobuf:"varint,9,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	TeacherName  string `protobuf:"bytes,10,opt,name=teacher_name,json=teacherName,proto3" json:"teacher_name,omitempty"`
	SubjectId    int32  `protobuf:"varint,11,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectName  string `protobuf:"bytes,12,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	GradeId      int32  `protobuf:"varint,13,opt,name=grade_id,json=gradeId,proto3" json:"grade_id,omitempty"`
	GradeName    string `protobuf:"bytes,14,opt,name=grade_name,json=gradeName,proto3" json:"grade_name,omitempty"`
	LessonNum    int32  `protobuf:"varint,15,opt,name=lesson_num,json=lessonNum,proto3" json:"lesson_num,omitempty"`
	PlanNum      int32  `protobuf:"varint,16,opt,name=plan_num,json=planNum,proto3" json:"plan_num,omitempty"`       // 计划上课人数
	ActualNum    int32  `protobuf:"varint,17,opt,name=actual_num,json=actualNum,proto3" json:"actual_num,omitempty"` // 报名人数
	Status       int32  `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	PlanName     string `protobuf:"bytes,19,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
}

func (x *CreateCoursePlanDetailRequest) Reset() {
	*x = CreateCoursePlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoursePlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoursePlanDetailRequest) ProtoMessage() {}

func (x *CreateCoursePlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoursePlanDetailRequest.ProtoReflect.Descriptor instead.
func (*CreateCoursePlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{14}
}

func (x *CreateCoursePlanDetailRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetDayIndex() int32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetDayIndexName() string {
	if x != nil {
		return x.DayIndexName
	}
	return ""
}

func (x *CreateCoursePlanDetailRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CreateCoursePlanDetailRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CreateCoursePlanDetailRequest) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *CreateCoursePlanDetailRequest) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *CreateCoursePlanDetailRequest) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *CreateCoursePlanDetailRequest) GetGradeId() int32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *CreateCoursePlanDetailRequest) GetLessonNum() int32 {
	if x != nil {
		return x.LessonNum
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetPlanNum() int32 {
	if x != nil {
		return x.PlanNum
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetActualNum() int32 {
	if x != nil {
		return x.ActualNum
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateCoursePlanDetailRequest) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

type CreateCoursePlanDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCoursePlanDetailReply) Reset() {
	*x = CreateCoursePlanDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoursePlanDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoursePlanDetailReply) ProtoMessage() {}

func (x *CreateCoursePlanDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoursePlanDetailReply.ProtoReflect.Descriptor instead.
func (*CreateCoursePlanDetailReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{15}
}

type UpdateCoursePlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code         string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	PlanId       int32  `protobuf:"varint,3,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	DayIndex     int32  `protobuf:"varint,4,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	DayIndexName string `protobuf:"bytes,5,opt,name=day_index_name,json=dayIndexName,proto3" json:"day_index_name,omitempty"`
	StartTime    string `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      string `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RoomId       int32  `protobuf:"varint,8,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName     string `protobuf:"bytes,9,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	TeacherId    int32  `protobuf:"varint,10,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	TeacherName  string `protobuf:"bytes,11,opt,name=teacher_name,json=teacherName,proto3" json:"teacher_name,omitempty"`
	SubjectId    int32  `protobuf:"varint,12,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectName  string `protobuf:"bytes,13,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	GradeId      int32  `protobuf:"varint,14,opt,name=grade_id,json=gradeId,proto3" json:"grade_id,omitempty"`
	GradeName    string `protobuf:"bytes,15,opt,name=grade_name,json=gradeName,proto3" json:"grade_name,omitempty"`
	LessonNum    int32  `protobuf:"varint,16,opt,name=lesson_num,json=lessonNum,proto3" json:"lesson_num,omitempty"`
	PlanNum      int32  `protobuf:"varint,17,opt,name=plan_num,json=planNum,proto3" json:"plan_num,omitempty"`       // 计划上课人数
	ActualNum    int32  `protobuf:"varint,18,opt,name=actual_num,json=actualNum,proto3" json:"actual_num,omitempty"` // 报名人数
	Status       int32  `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	PlanName     string `protobuf:"bytes,20,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	Version      int32  `protobuf:"varint,21,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateCoursePlanDetailRequest) Reset() {
	*x = UpdateCoursePlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoursePlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoursePlanDetailRequest) ProtoMessage() {}

func (x *UpdateCoursePlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoursePlanDetailRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoursePlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateCoursePlanDetailRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateCoursePlanDetailRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetDayIndex() int32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetDayIndexName() string {
	if x != nil {
		return x.DayIndexName
	}
	return ""
}

func (x *UpdateCoursePlanDetailRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateCoursePlanDetailRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateCoursePlanDetailRequest) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *UpdateCoursePlanDetailRequest) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *UpdateCoursePlanDetailRequest) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *UpdateCoursePlanDetailRequest) GetGradeId() int32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *UpdateCoursePlanDetailRequest) GetLessonNum() int32 {
	if x != nil {
		return x.LessonNum
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetPlanNum() int32 {
	if x != nil {
		return x.PlanNum
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetActualNum() int32 {
	if x != nil {
		return x.ActualNum
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateCoursePlanDetailRequest) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *UpdateCoursePlanDetailRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type UpdateCoursePlanDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCoursePlanDetailReply) Reset() {
	*x = UpdateCoursePlanDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoursePlanDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoursePlanDetailReply) ProtoMessage() {}

func (x *UpdateCoursePlanDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoursePlanDetailReply.ProtoReflect.Descriptor instead.
func (*UpdateCoursePlanDetailReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{17}
}

type DeleteCoursePlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCoursePlanDetailRequest) Reset() {
	*x = DeleteCoursePlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoursePlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoursePlanDetailRequest) ProtoMessage() {}

func (x *DeleteCoursePlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoursePlanDetailRequest.ProtoReflect.Descriptor instead.
func (*DeleteCoursePlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteCoursePlanDetailRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteCoursePlanDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCoursePlanDetailReply) Reset() {
	*x = DeleteCoursePlanDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoursePlanDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoursePlanDetailReply) ProtoMessage() {}

func (x *DeleteCoursePlanDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoursePlanDetailReply.ProtoReflect.Descriptor instead.
func (*DeleteCoursePlanDetailReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{19}
}

type GetCoursePlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCoursePlanDetailRequest) Reset() {
	*x = GetCoursePlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoursePlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoursePlanDetailRequest) ProtoMessage() {}

func (x *GetCoursePlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoursePlanDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCoursePlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{20}
}

func (x *GetCoursePlanDetailRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCoursePlanDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId      int32  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	DayIndex    int32  `protobuf:"varint,3,opt,name=DayIndex,proto3" json:"DayIndex,omitempty"`
	StartTime   string `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime     string `protobuf:"bytes,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	RoomId      int32  `protobuf:"varint,6,opt,name=RoomId,proto3" json:"RoomId,omitempty"`
	RoomName    string `protobuf:"bytes,7,opt,name=RoomName,proto3" json:"RoomName,omitempty"`
	TeacherId   int32  `protobuf:"varint,8,opt,name=TeacherId,proto3" json:"TeacherId,omitempty"`
	TeacherName string `protobuf:"bytes,9,opt,name=TeacherName,proto3" json:"TeacherName,omitempty"`
	SubjectId   int32  `protobuf:"varint,10,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
	SubjectName string `protobuf:"bytes,11,opt,name=SubjectName,proto3" json:"SubjectName,omitempty"`
	GradeId     int32  `protobuf:"varint,12,opt,name=GradeId,proto3" json:"GradeId,omitempty"`
	GradeName   string `protobuf:"bytes,13,opt,name=GradeName,proto3" json:"GradeName,omitempty"`
	Version     int32  `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetCoursePlanDetailReply) Reset() {
	*x = GetCoursePlanDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoursePlanDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoursePlanDetailReply) ProtoMessage() {}

func (x *GetCoursePlanDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoursePlanDetailReply.ProtoReflect.Descriptor instead.
func (*GetCoursePlanDetailReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{21}
}

func (x *GetCoursePlanDetailReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCoursePlanDetailReply) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *GetCoursePlanDetailReply) GetDayIndex() int32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *GetCoursePlanDetailReply) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetCoursePlanDetailReply) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetCoursePlanDetailReply) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *GetCoursePlanDetailReply) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *GetCoursePlanDetailReply) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *GetCoursePlanDetailReply) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *GetCoursePlanDetailReply) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *GetCoursePlanDetailReply) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *GetCoursePlanDetailReply) GetGradeId() int32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

func (x *GetCoursePlanDetailReply) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *GetCoursePlanDetailReply) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListCoursePlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr     string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	PageNo   int32  `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListCoursePlanDetailRequest) Reset() {
	*x = ListCoursePlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursePlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursePlanDetailRequest) ProtoMessage() {}

func (x *ListCoursePlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursePlanDetailRequest.ProtoReflect.Descriptor instead.
func (*ListCoursePlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{22}
}

func (x *ListCoursePlanDetailRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *ListCoursePlanDetailRequest) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListCoursePlanDetailRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListCoursePlanDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ListCoursePlanDetailReply_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32                             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListCoursePlanDetailReply) Reset() {
	*x = ListCoursePlanDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursePlanDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursePlanDetailReply) ProtoMessage() {}

func (x *ListCoursePlanDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursePlanDetailReply.ProtoReflect.Descriptor instead.
func (*ListCoursePlanDetailReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{23}
}

func (x *ListCoursePlanDetailReply) GetData() []*ListCoursePlanDetailReply_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCoursePlanDetailReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListAllCoursePlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *ListAllCoursePlanDetailRequest) Reset() {
	*x = ListAllCoursePlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllCoursePlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllCoursePlanDetailRequest) ProtoMessage() {}

func (x *ListAllCoursePlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllCoursePlanDetailRequest.ProtoReflect.Descriptor instead.
func (*ListAllCoursePlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{24}
}

func (x *ListAllCoursePlanDetailRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

type ListAllCoursePlanDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ListAllCoursePlanDetailReply_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListAllCoursePlanDetailReply) Reset() {
	*x = ListAllCoursePlanDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllCoursePlanDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllCoursePlanDetailReply) ProtoMessage() {}

func (x *ListAllCoursePlanDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllCoursePlanDetailReply.ProtoReflect.Descriptor instead.
func (*ListAllCoursePlanDetailReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{25}
}

func (x *ListAllCoursePlanDetailReply) GetData() []*ListAllCoursePlanDetailReply_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchAddCoursePlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*BatchAddCoursePlanDetailRequest_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchAddCoursePlanDetailRequest) Reset() {
	*x = BatchAddCoursePlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddCoursePlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddCoursePlanDetailRequest) ProtoMessage() {}

func (x *BatchAddCoursePlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddCoursePlanDetailRequest.ProtoReflect.Descriptor instead.
func (*BatchAddCoursePlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{26}
}

func (x *BatchAddCoursePlanDetailRequest) GetData() []*BatchAddCoursePlanDetailRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchAddCoursePlanDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchAddCoursePlanDetailReply) Reset() {
	*x = BatchAddCoursePlanDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddCoursePlanDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddCoursePlanDetailReply) ProtoMessage() {}

func (x *BatchAddCoursePlanDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddCoursePlanDetailReply.ProtoReflect.Descriptor instead.
func (*BatchAddCoursePlanDetailReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{27}
}

type StopCoursePlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopCoursePlanDetailRequest) Reset() {
	*x = StopCoursePlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCoursePlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCoursePlanDetailRequest) ProtoMessage() {}

func (x *StopCoursePlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCoursePlanDetailRequest.ProtoReflect.Descriptor instead.
func (*StopCoursePlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{28}
}

func (x *StopCoursePlanDetailRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type StopCoursePlanDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopCoursePlanDetailReply) Reset() {
	*x = StopCoursePlanDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCoursePlanDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCoursePlanDetailReply) ProtoMessage() {}

func (x *StopCoursePlanDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCoursePlanDetailReply.ProtoReflect.Descriptor instead.
func (*StopCoursePlanDetailReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{29}
}

type ScheduleDateForCoursePlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ScheduleDateForCoursePlanDetailRequest) Reset() {
	*x = ScheduleDateForCoursePlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleDateForCoursePlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleDateForCoursePlanDetailRequest) ProtoMessage() {}

func (x *ScheduleDateForCoursePlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleDateForCoursePlanDetailRequest.ProtoReflect.Descriptor instead.
func (*ScheduleDateForCoursePlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{30}
}

func (x *ScheduleDateForCoursePlanDetailRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ScheduleDateForCoursePlanDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScheduleDateForCoursePlanDetailReply) Reset() {
	*x = ScheduleDateForCoursePlanDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleDateForCoursePlanDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleDateForCoursePlanDetailReply) ProtoMessage() {}

func (x *ScheduleDateForCoursePlanDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleDateForCoursePlanDetailReply.ProtoReflect.Descriptor instead.
func (*ScheduleDateForCoursePlanDetailReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{31}
}

// coursePlanStudent
type CreateCoursePlanStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerPhone string `protobuf:"bytes,1,opt,name=customer_phone,json=customerPhone,proto3" json:"customer_phone,omitempty"`
	StudentId     int32  `protobuf:"varint,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName   string `protobuf:"bytes,3,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	PlanId        int32  `protobuf:"varint,4,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	PlanName      string `protobuf:"bytes,5,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	PlanDetailId  int32  `protobuf:"varint,6,opt,name=plan_detail_id,json=planDetailId,proto3" json:"plan_detail_id,omitempty"`
}

func (x *CreateCoursePlanStudentRequest) Reset() {
	*x = CreateCoursePlanStudentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoursePlanStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoursePlanStudentRequest) ProtoMessage() {}

func (x *CreateCoursePlanStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoursePlanStudentRequest.ProtoReflect.Descriptor instead.
func (*CreateCoursePlanStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{32}
}

func (x *CreateCoursePlanStudentRequest) GetCustomerPhone() string {
	if x != nil {
		return x.CustomerPhone
	}
	return ""
}

func (x *CreateCoursePlanStudentRequest) GetStudentId() int32 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *CreateCoursePlanStudentRequest) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *CreateCoursePlanStudentRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *CreateCoursePlanStudentRequest) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *CreateCoursePlanStudentRequest) GetPlanDetailId() int32 {
	if x != nil {
		return x.PlanDetailId
	}
	return 0
}

type CreateCoursePlanStudentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCoursePlanStudentReply) Reset() {
	*x = CreateCoursePlanStudentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoursePlanStudentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoursePlanStudentReply) ProtoMessage() {}

func (x *CreateCoursePlanStudentReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoursePlanStudentReply.ProtoReflect.Descriptor instead.
func (*CreateCoursePlanStudentReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{33}
}

type UpdateCoursePlanStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerPhone string `protobuf:"bytes,2,opt,name=customer_phone,json=customerPhone,proto3" json:"customer_phone,omitempty"`
	StudentId     int32  `protobuf:"varint,3,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName   string `protobuf:"bytes,4,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	PlanId        int32  `protobuf:"varint,5,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	PlanName      string `protobuf:"bytes,6,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	PlanDetailId  int32  `protobuf:"varint,7,opt,name=plan_detail_id,json=planDetailId,proto3" json:"plan_detail_id,omitempty"`
	Version       int32  `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateCoursePlanStudentRequest) Reset() {
	*x = UpdateCoursePlanStudentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoursePlanStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoursePlanStudentRequest) ProtoMessage() {}

func (x *UpdateCoursePlanStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoursePlanStudentRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoursePlanStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateCoursePlanStudentRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCoursePlanStudentRequest) GetCustomerPhone() string {
	if x != nil {
		return x.CustomerPhone
	}
	return ""
}

func (x *UpdateCoursePlanStudentRequest) GetStudentId() int32 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *UpdateCoursePlanStudentRequest) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *UpdateCoursePlanStudentRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpdateCoursePlanStudentRequest) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *UpdateCoursePlanStudentRequest) GetPlanDetailId() int32 {
	if x != nil {
		return x.PlanDetailId
	}
	return 0
}

func (x *UpdateCoursePlanStudentRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type UpdateCoursePlanStudentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCoursePlanStudentReply) Reset() {
	*x = UpdateCoursePlanStudentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoursePlanStudentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoursePlanStudentReply) ProtoMessage() {}

func (x *UpdateCoursePlanStudentReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoursePlanStudentReply.ProtoReflect.Descriptor instead.
func (*UpdateCoursePlanStudentReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{35}
}

type DeleteCoursePlanStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCoursePlanStudentRequest) Reset() {
	*x = DeleteCoursePlanStudentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoursePlanStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoursePlanStudentRequest) ProtoMessage() {}

func (x *DeleteCoursePlanStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoursePlanStudentRequest.ProtoReflect.Descriptor instead.
func (*DeleteCoursePlanStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteCoursePlanStudentRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteCoursePlanStudentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCoursePlanStudentReply) Reset() {
	*x = DeleteCoursePlanStudentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoursePlanStudentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoursePlanStudentReply) ProtoMessage() {}

func (x *DeleteCoursePlanStudentReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoursePlanStudentReply.ProtoReflect.Descriptor instead.
func (*DeleteCoursePlanStudentReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{37}
}

type GetCoursePlanStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCoursePlanStudentRequest) Reset() {
	*x = GetCoursePlanStudentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoursePlanStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoursePlanStudentRequest) ProtoMessage() {}

func (x *GetCoursePlanStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoursePlanStudentRequest.ProtoReflect.Descriptor instead.
func (*GetCoursePlanStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{38}
}

func (x *GetCoursePlanStudentRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCoursePlanStudentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerPhone string `protobuf:"bytes,2,opt,name=customer_phone,json=customerPhone,proto3" json:"customer_phone,omitempty"`
	StudentId     int32  `protobuf:"varint,3,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName   string `protobuf:"bytes,4,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	PlanId        int32  `protobuf:"varint,5,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	PlanName      string `protobuf:"bytes,6,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	PlanDetailId  int32  `protobuf:"varint,7,opt,name=plan_detail_id,json=planDetailId,proto3" json:"plan_detail_id,omitempty"`
	Status        int32  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Version       int32  `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetCoursePlanStudentReply) Reset() {
	*x = GetCoursePlanStudentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoursePlanStudentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoursePlanStudentReply) ProtoMessage() {}

func (x *GetCoursePlanStudentReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoursePlanStudentReply.ProtoReflect.Descriptor instead.
func (*GetCoursePlanStudentReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{39}
}

func (x *GetCoursePlanStudentReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCoursePlanStudentReply) GetCustomerPhone() string {
	if x != nil {
		return x.CustomerPhone
	}
	return ""
}

func (x *GetCoursePlanStudentReply) GetStudentId() int32 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *GetCoursePlanStudentReply) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *GetCoursePlanStudentReply) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *GetCoursePlanStudentReply) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *GetCoursePlanStudentReply) GetPlanDetailId() int32 {
	if x != nil {
		return x.PlanDetailId
	}
	return 0
}

func (x *GetCoursePlanStudentReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCoursePlanStudentReply) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListCoursePlanStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr     string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	PageNo   int32  `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListCoursePlanStudentRequest) Reset() {
	*x = ListCoursePlanStudentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursePlanStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursePlanStudentRequest) ProtoMessage() {}

func (x *ListCoursePlanStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursePlanStudentRequest.ProtoReflect.Descriptor instead.
func (*ListCoursePlanStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{40}
}

func (x *ListCoursePlanStudentRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *ListCoursePlanStudentRequest) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListCoursePlanStudentRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListCoursePlanStudentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ListCoursePlanStudentReply_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32                              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListCoursePlanStudentReply) Reset() {
	*x = ListCoursePlanStudentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursePlanStudentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursePlanStudentReply) ProtoMessage() {}

func (x *ListCoursePlanStudentReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursePlanStudentReply.ProtoReflect.Descriptor instead.
func (*ListCoursePlanStudentReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{41}
}

func (x *ListCoursePlanStudentReply) GetData() []*ListCoursePlanStudentReply_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCoursePlanStudentReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type StopCoursePlanStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopCoursePlanStudentRequest) Reset() {
	*x = StopCoursePlanStudentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCoursePlanStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCoursePlanStudentRequest) ProtoMessage() {}

func (x *StopCoursePlanStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCoursePlanStudentRequest.ProtoReflect.Descriptor instead.
func (*StopCoursePlanStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{42}
}

func (x *StopCoursePlanStudentRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type StopCoursePlanStudentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopCoursePlanStudentReply) Reset() {
	*x = StopCoursePlanStudentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCoursePlanStudentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCoursePlanStudentReply) ProtoMessage() {}

func (x *StopCoursePlanStudentReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCoursePlanStudentReply.ProtoReflect.Descriptor instead.
func (*StopCoursePlanStudentReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{43}
}

type CreateDailyLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId       int32  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	DayIndex     int32  `protobuf:"varint,3,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	DayIndexName string `protobuf:"bytes,4,opt,name=day_index_name,json=dayIndexName,proto3" json:"day_index_name,omitempty"`
	StartTime    string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RoomId       int32  `protobuf:"varint,7,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName     string `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	TeacherId    int32  `protobuf:"varint,9,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	TeacherName  string `protobuf:"bytes,10,opt,name=teacher_name,json=teacherName,proto3" json:"teacher_name,omitempty"`
	SubjectId    int32  `protobuf:"varint,11,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectName  string `protobuf:"bytes,12,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	GradeId      int32  `protobuf:"varint,13,opt,name=grade_id,json=gradeId,proto3" json:"grade_id,omitempty"`
	GradeName    string `protobuf:"bytes,14,opt,name=grade_name,json=gradeName,proto3" json:"grade_name,omitempty"`
	LessonNum    int32  `protobuf:"varint,15,opt,name=lesson_num,json=lessonNum,proto3" json:"lesson_num,omitempty"`
	PlanNum      int32  `protobuf:"varint,16,opt,name=plan_num,json=planNum,proto3" json:"plan_num,omitempty"`       // 计划上课人数
	ActualNum    int32  `protobuf:"varint,17,opt,name=actual_num,json=actualNum,proto3" json:"actual_num,omitempty"` // 报名人数
	Status       int32  `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	PlanName     string `protobuf:"bytes,19,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
}

func (x *CreateDailyLessonRequest) Reset() {
	*x = CreateDailyLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDailyLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDailyLessonRequest) ProtoMessage() {}

func (x *CreateDailyLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDailyLessonRequest.ProtoReflect.Descriptor instead.
func (*CreateDailyLessonRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{44}
}

func (x *CreateDailyLessonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetDayIndex() int32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetDayIndexName() string {
	if x != nil {
		return x.DayIndexName
	}
	return ""
}

func (x *CreateDailyLessonRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CreateDailyLessonRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CreateDailyLessonRequest) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *CreateDailyLessonRequest) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *CreateDailyLessonRequest) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *CreateDailyLessonRequest) GetGradeId() int32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *CreateDailyLessonRequest) GetLessonNum() int32 {
	if x != nil {
		return x.LessonNum
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetPlanNum() int32 {
	if x != nil {
		return x.PlanNum
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetActualNum() int32 {
	if x != nil {
		return x.ActualNum
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateDailyLessonRequest) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

type CreateDailyLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDailyLessonReply) Reset() {
	*x = CreateDailyLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDailyLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDailyLessonReply) ProtoMessage() {}

func (x *CreateDailyLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDailyLessonReply.ProtoReflect.Descriptor instead.
func (*CreateDailyLessonReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{45}
}

type UpdateDailyLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId      int32  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	DayIndex    int32  `protobuf:"varint,3,opt,name=DayIndex,proto3" json:"DayIndex,omitempty"`
	StartTime   string `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime     string `protobuf:"bytes,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	RoomId      int32  `protobuf:"varint,6,opt,name=RoomId,proto3" json:"RoomId,omitempty"`
	RoomName    string `protobuf:"bytes,7,opt,name=RoomName,proto3" json:"RoomName,omitempty"`
	TeacherId   int32  `protobuf:"varint,8,opt,name=TeacherId,proto3" json:"TeacherId,omitempty"`
	TeacherName string `protobuf:"bytes,9,opt,name=TeacherName,proto3" json:"TeacherName,omitempty"`
	SubjectId   int32  `protobuf:"varint,10,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
	SubjectName string `protobuf:"bytes,11,opt,name=SubjectName,proto3" json:"SubjectName,omitempty"`
	GradeId     int32  `protobuf:"varint,12,opt,name=GradeId,proto3" json:"GradeId,omitempty"`
	GradeName   string `protobuf:"bytes,13,opt,name=GradeName,proto3" json:"GradeName,omitempty"`
	Version     int32  `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
	PlanName    string `protobuf:"bytes,15,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	Status      int32  `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateDailyLessonRequest) Reset() {
	*x = UpdateDailyLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDailyLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDailyLessonRequest) ProtoMessage() {}

func (x *UpdateDailyLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDailyLessonRequest.ProtoReflect.Descriptor instead.
func (*UpdateDailyLessonRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateDailyLessonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateDailyLessonRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpdateDailyLessonRequest) GetDayIndex() int32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *UpdateDailyLessonRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateDailyLessonRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateDailyLessonRequest) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *UpdateDailyLessonRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *UpdateDailyLessonRequest) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *UpdateDailyLessonRequest) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *UpdateDailyLessonRequest) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *UpdateDailyLessonRequest) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *UpdateDailyLessonRequest) GetGradeId() int32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

func (x *UpdateDailyLessonRequest) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *UpdateDailyLessonRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UpdateDailyLessonRequest) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *UpdateDailyLessonRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UpdateDailyLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDailyLessonReply) Reset() {
	*x = UpdateDailyLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDailyLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDailyLessonReply) ProtoMessage() {}

func (x *UpdateDailyLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDailyLessonReply.ProtoReflect.Descriptor instead.
func (*UpdateDailyLessonReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{47}
}

type DeleteDailyLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDailyLessonRequest) Reset() {
	*x = DeleteDailyLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDailyLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDailyLessonRequest) ProtoMessage() {}

func (x *DeleteDailyLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDailyLessonRequest.ProtoReflect.Descriptor instead.
func (*DeleteDailyLessonRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteDailyLessonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteDailyLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDailyLessonReply) Reset() {
	*x = DeleteDailyLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDailyLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDailyLessonReply) ProtoMessage() {}

func (x *DeleteDailyLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDailyLessonReply.ProtoReflect.Descriptor instead.
func (*DeleteDailyLessonReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{49}
}

type GetDailyLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDailyLessonRequest) Reset() {
	*x = GetDailyLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyLessonRequest) ProtoMessage() {}

func (x *GetDailyLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyLessonRequest.ProtoReflect.Descriptor instead.
func (*GetDailyLessonRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{50}
}

func (x *GetDailyLessonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetDailyLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId      int32  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	DayIndex    int32  `protobuf:"varint,3,opt,name=DayIndex,proto3" json:"DayIndex,omitempty"`
	StartTime   string `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime     string `protobuf:"bytes,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	RoomId      int32  `protobuf:"varint,6,opt,name=RoomId,proto3" json:"RoomId,omitempty"`
	RoomName    string `protobuf:"bytes,7,opt,name=RoomName,proto3" json:"RoomName,omitempty"`
	TeacherId   int32  `protobuf:"varint,8,opt,name=TeacherId,proto3" json:"TeacherId,omitempty"`
	TeacherName string `protobuf:"bytes,9,opt,name=TeacherName,proto3" json:"TeacherName,omitempty"`
	SubjectId   int32  `protobuf:"varint,10,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
	SubjectName string `protobuf:"bytes,11,opt,name=SubjectName,proto3" json:"SubjectName,omitempty"`
	GradeId     int32  `protobuf:"varint,12,opt,name=GradeId,proto3" json:"GradeId,omitempty"`
	GradeName   string `protobuf:"bytes,13,opt,name=GradeName,proto3" json:"GradeName,omitempty"`
	Version     int32  `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
	Status      int32  `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetDailyLessonReply) Reset() {
	*x = GetDailyLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyLessonReply) ProtoMessage() {}

func (x *GetDailyLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyLessonReply.ProtoReflect.Descriptor instead.
func (*GetDailyLessonReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{51}
}

func (x *GetDailyLessonReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDailyLessonReply) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *GetDailyLessonReply) GetDayIndex() int32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *GetDailyLessonReply) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetDailyLessonReply) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetDailyLessonReply) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *GetDailyLessonReply) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *GetDailyLessonReply) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *GetDailyLessonReply) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *GetDailyLessonReply) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *GetDailyLessonReply) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *GetDailyLessonReply) GetGradeId() int32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

func (x *GetDailyLessonReply) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *GetDailyLessonReply) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetDailyLessonReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ListDailyLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr     string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	PageNo   int32  `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListDailyLessonRequest) Reset() {
	*x = ListDailyLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDailyLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyLessonRequest) ProtoMessage() {}

func (x *ListDailyLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyLessonRequest.ProtoReflect.Descriptor instead.
func (*ListDailyLessonRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{52}
}

func (x *ListDailyLessonRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *ListDailyLessonRequest) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListDailyLessonRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListDailyLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ListDailyLessonReply_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32                        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListDailyLessonReply) Reset() {
	*x = ListDailyLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDailyLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyLessonReply) ProtoMessage() {}

func (x *ListDailyLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyLessonReply.ProtoReflect.Descriptor instead.
func (*ListDailyLessonReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{53}
}

func (x *ListDailyLessonReply) GetData() []*ListDailyLessonReply_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListDailyLessonReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type StartDailyLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartDailyLessonRequest) Reset() {
	*x = StartDailyLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDailyLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDailyLessonRequest) ProtoMessage() {}

func (x *StartDailyLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDailyLessonRequest.ProtoReflect.Descriptor instead.
func (*StartDailyLessonRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{54}
}

func (x *StartDailyLessonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type StartDailyLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartDailyLessonReply) Reset() {
	*x = StartDailyLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDailyLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDailyLessonReply) ProtoMessage() {}

func (x *StartDailyLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDailyLessonReply.ProtoReflect.Descriptor instead.
func (*StartDailyLessonReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{55}
}

type CancelDailyLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelDailyLessonRequest) Reset() {
	*x = CancelDailyLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelDailyLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDailyLessonRequest) ProtoMessage() {}

func (x *CancelDailyLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDailyLessonRequest.ProtoReflect.Descriptor instead.
func (*CancelDailyLessonRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{56}
}

func (x *CancelDailyLessonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CancelDailyLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelDailyLessonReply) Reset() {
	*x = CancelDailyLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelDailyLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDailyLessonReply) ProtoMessage() {}

func (x *CancelDailyLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDailyLessonReply.ProtoReflect.Descriptor instead.
func (*CancelDailyLessonReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{57}
}

type FinishDailyLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FinishDailyLessonRequest) Reset() {
	*x = FinishDailyLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishDailyLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishDailyLessonRequest) ProtoMessage() {}

func (x *FinishDailyLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishDailyLessonRequest.ProtoReflect.Descriptor instead.
func (*FinishDailyLessonRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{58}
}

func (x *FinishDailyLessonRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FinishDailyLessonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinishDailyLessonReply) Reset() {
	*x = FinishDailyLessonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishDailyLessonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishDailyLessonReply) ProtoMessage() {}

func (x *FinishDailyLessonReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishDailyLessonReply.ProtoReflect.Descriptor instead.
func (*FinishDailyLessonReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{59}
}

type ListDailyLessonStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr     string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	PageNo   int32  `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListDailyLessonStudentRequest) Reset() {
	*x = ListDailyLessonStudentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDailyLessonStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyLessonStudentRequest) ProtoMessage() {}

func (x *ListDailyLessonStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyLessonStudentRequest.ProtoReflect.Descriptor instead.
func (*ListDailyLessonStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{60}
}

func (x *ListDailyLessonStudentRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *ListDailyLessonStudentRequest) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListDailyLessonStudentRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListDailyLessonStudentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*ListDailyLessonStudentReply_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32                               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListDailyLessonStudentReply) Reset() {
	*x = ListDailyLessonStudentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDailyLessonStudentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyLessonStudentReply) ProtoMessage() {}

func (x *ListDailyLessonStudentReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyLessonStudentReply.ProtoReflect.Descriptor instead.
func (*ListDailyLessonStudentReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{61}
}

func (x *ListDailyLessonStudentReply) GetData() []*ListDailyLessonStudentReply_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListDailyLessonStudentReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SignDailyLessonStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SignDailyLessonStudentRequest) Reset() {
	*x = SignDailyLessonStudentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignDailyLessonStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignDailyLessonStudentRequest) ProtoMessage() {}

func (x *SignDailyLessonStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignDailyLessonStudentRequest.ProtoReflect.Descriptor instead.
func (*SignDailyLessonStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{62}
}

func (x *SignDailyLessonStudentRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SignDailyLessonStudentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignDailyLessonStudentReply) Reset() {
	*x = SignDailyLessonStudentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignDailyLessonStudentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignDailyLessonStudentReply) ProtoMessage() {}

func (x *SignDailyLessonStudentReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignDailyLessonStudentReply.ProtoReflect.Descriptor instead.
func (*SignDailyLessonStudentReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{63}
}

type LeaveDailyLessonStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LeaveDailyLessonStudentRequest) Reset() {
	*x = LeaveDailyLessonStudentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveDailyLessonStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveDailyLessonStudentRequest) ProtoMessage() {}

func (x *LeaveDailyLessonStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveDailyLessonStudentRequest.ProtoReflect.Descriptor instead.
func (*LeaveDailyLessonStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{64}
}

func (x *LeaveDailyLessonStudentRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type LeaveDailyLessonStudentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeaveDailyLessonStudentReply) Reset() {
	*x = LeaveDailyLessonStudentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveDailyLessonStudentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveDailyLessonStudentReply) ProtoMessage() {}

func (x *LeaveDailyLessonStudentReply) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveDailyLessonStudentReply.ProtoReflect.Descriptor instead.
func (*LeaveDailyLessonStudentReply) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{65}
}

type CreateCoursePlanRequest_ExcludeRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeType int32    `protobuf:"varint,1,opt,name=excludeType,proto3" json:"excludeType,omitempty"`
	ExcludeDate []string `protobuf:"bytes,2,rep,name=excludeDate,proto3" json:"excludeDate,omitempty"`
}

func (x *CreateCoursePlanRequest_ExcludeRule) Reset() {
	*x = CreateCoursePlanRequest_ExcludeRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoursePlanRequest_ExcludeRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoursePlanRequest_ExcludeRule) ProtoMessage() {}

func (x *CreateCoursePlanRequest_ExcludeRule) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoursePlanRequest_ExcludeRule.ProtoReflect.Descriptor instead.
func (*CreateCoursePlanRequest_ExcludeRule) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CreateCoursePlanRequest_ExcludeRule) GetExcludeType() int32 {
	if x != nil {
		return x.ExcludeType
	}
	return 0
}

func (x *CreateCoursePlanRequest_ExcludeRule) GetExcludeDate() []string {
	if x != nil {
		return x.ExcludeDate
	}
	return nil
}

type UpdateCoursePlanRequest_ExcludeRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeType int32    `protobuf:"varint,1,opt,name=excludeType,proto3" json:"excludeType,omitempty"`
	ExcludeDate []string `protobuf:"bytes,2,rep,name=excludeDate,proto3" json:"excludeDate,omitempty"`
}

func (x *UpdateCoursePlanRequest_ExcludeRule) Reset() {
	*x = UpdateCoursePlanRequest_ExcludeRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoursePlanRequest_ExcludeRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoursePlanRequest_ExcludeRule) ProtoMessage() {}

func (x *UpdateCoursePlanRequest_ExcludeRule) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoursePlanRequest_ExcludeRule.ProtoReflect.Descriptor instead.
func (*UpdateCoursePlanRequest_ExcludeRule) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{2, 0}
}

func (x *UpdateCoursePlanRequest_ExcludeRule) GetExcludeType() int32 {
	if x != nil {
		return x.ExcludeType
	}
	return 0
}

func (x *UpdateCoursePlanRequest_ExcludeRule) GetExcludeDate() []string {
	if x != nil {
		return x.ExcludeDate
	}
	return nil
}

type GetCoursePlanReply_ExcludeRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeType int32    `protobuf:"varint,1,opt,name=excludeType,proto3" json:"excludeType,omitempty"`
	ExcludeDate []string `protobuf:"bytes,2,rep,name=excludeDate,proto3" json:"excludeDate,omitempty"`
}

func (x *GetCoursePlanReply_ExcludeRule) Reset() {
	*x = GetCoursePlanReply_ExcludeRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoursePlanReply_ExcludeRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoursePlanReply_ExcludeRule) ProtoMessage() {}

func (x *GetCoursePlanReply_ExcludeRule) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoursePlanReply_ExcludeRule.ProtoReflect.Descriptor instead.
func (*GetCoursePlanReply_ExcludeRule) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetCoursePlanReply_ExcludeRule) GetExcludeType() int32 {
	if x != nil {
		return x.ExcludeType
	}
	return 0
}

func (x *GetCoursePlanReply_ExcludeRule) GetExcludeDate() []string {
	if x != nil {
		return x.ExcludeDate
	}
	return nil
}

type ListCoursePlanReply_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartTime   string                                  `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     string                                  `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CycleType   int32                                   `protobuf:"varint,6,opt,name=cycle_type,json=cycleType,proto3" json:"cycle_type,omitempty"`
	ExcludeRule []*ListCoursePlanReply_Data_ExcludeRule `protobuf:"bytes,7,rep,name=exclude_rule,json=excludeRule,proto3" json:"exclude_rule,omitempty"`
	Status      int32                                   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Version     int32                                   `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	UpdatedAt   string                                  `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ListCoursePlanReply_Data) Reset() {
	*x = ListCoursePlanReply_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursePlanReply_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursePlanReply_Data) ProtoMessage() {}

func (x *ListCoursePlanReply_Data) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursePlanReply_Data.ProtoReflect.Descriptor instead.
func (*ListCoursePlanReply_Data) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListCoursePlanReply_Data) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListCoursePlanReply_Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCoursePlanReply_Data) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListCoursePlanReply_Data) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ListCoursePlanReply_Data) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ListCoursePlanReply_Data) GetCycleType() int32 {
	if x != nil {
		return x.CycleType
	}
	return 0
}

func (x *ListCoursePlanReply_Data) GetExcludeRule() []*ListCoursePlanReply_Data_ExcludeRule {
	if x != nil {
		return x.ExcludeRule
	}
	return nil
}

func (x *ListCoursePlanReply_Data) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListCoursePlanReply_Data) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListCoursePlanReply_Data) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ListCoursePlanReply_Data_ExcludeRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeType int32    `protobuf:"varint,1,opt,name=excludeType,proto3" json:"excludeType,omitempty"`
	ExcludeDate []string `protobuf:"bytes,2,rep,name=excludeDate,proto3" json:"excludeDate,omitempty"`
}

func (x *ListCoursePlanReply_Data_ExcludeRule) Reset() {
	*x = ListCoursePlanReply_Data_ExcludeRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursePlanReply_Data_ExcludeRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursePlanReply_Data_ExcludeRule) ProtoMessage() {}

func (x *ListCoursePlanReply_Data_ExcludeRule) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursePlanReply_Data_ExcludeRule.ProtoReflect.Descriptor instead.
func (*ListCoursePlanReply_Data_ExcludeRule) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{9, 0, 0}
}

func (x *ListCoursePlanReply_Data_ExcludeRule) GetExcludeType() int32 {
	if x != nil {
		return x.ExcludeType
	}
	return 0
}

func (x *ListCoursePlanReply_Data_ExcludeRule) GetExcludeDate() []string {
	if x != nil {
		return x.ExcludeDate
	}
	return nil
}

type ListCoursePlanDetailReply_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId       int32  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	DayIndex     int32  `protobuf:"varint,3,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	DayIndexName string `protobuf:"bytes,4,opt,name=day_index_name,json=dayIndexName,proto3" json:"day_index_name,omitempty"`
	StartTime    string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RoomId       int32  `protobuf:"varint,7,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName     string `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	TeacherId    int32  `protobuf:"varint,9,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	TeacherName  string `protobuf:"bytes,10,opt,name=teacher_name,json=teacherName,proto3" json:"teacher_name,omitempty"`
	SubjectId    int32  `protobuf:"varint,11,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectName  string `protobuf:"bytes,12,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	GradeId      int32  `protobuf:"varint,13,opt,name=grade_id,json=gradeId,proto3" json:"grade_id,omitempty"`
	GradeName    string `protobuf:"bytes,14,opt,name=grade_name,json=gradeName,proto3" json:"grade_name,omitempty"`
	LessonNum    int32  `protobuf:"varint,15,opt,name=lesson_num,json=lessonNum,proto3" json:"lesson_num,omitempty"`
	PlanNum      int32  `protobuf:"varint,16,opt,name=plan_num,json=planNum,proto3" json:"plan_num,omitempty"`       // 计划上课人数
	ActualNum    int32  `protobuf:"varint,17,opt,name=actual_num,json=actualNum,proto3" json:"actual_num,omitempty"` // 报名人数
	Status       int32  `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	Version      int32  `protobuf:"varint,19,opt,name=version,proto3" json:"version,omitempty"`
	PlanName     string `protobuf:"bytes,20,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	Code         string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ListCoursePlanDetailReply_Data) Reset() {
	*x = ListCoursePlanDetailReply_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursePlanDetailReply_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursePlanDetailReply_Data) ProtoMessage() {}

func (x *ListCoursePlanDetailReply_Data) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursePlanDetailReply_Data.ProtoReflect.Descriptor instead.
func (*ListCoursePlanDetailReply_Data) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ListCoursePlanDetailReply_Data) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetDayIndex() int32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetDayIndexName() string {
	if x != nil {
		return x.DayIndexName
	}
	return ""
}

func (x *ListCoursePlanDetailReply_Data) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ListCoursePlanDetailReply_Data) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ListCoursePlanDetailReply_Data) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *ListCoursePlanDetailReply_Data) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *ListCoursePlanDetailReply_Data) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *ListCoursePlanDetailReply_Data) GetGradeId() int32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *ListCoursePlanDetailReply_Data) GetLessonNum() int32 {
	if x != nil {
		return x.LessonNum
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetPlanNum() int32 {
	if x != nil {
		return x.PlanNum
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetActualNum() int32 {
	if x != nil {
		return x.ActualNum
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListCoursePlanDetailReply_Data) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *ListCoursePlanDetailReply_Data) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ListAllCoursePlanDetailReply_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId       int32  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	DayIndex     int32  `protobuf:"varint,3,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	DayIndexName string `protobuf:"bytes,4,opt,name=day_index_name,json=dayIndexName,proto3" json:"day_index_name,omitempty"`
	StartTime    string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RoomId       int32  `protobuf:"varint,7,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName     string `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	TeacherId    int32  `protobuf:"varint,9,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	TeacherName  string `protobuf:"bytes,10,opt,name=teacher_name,json=teacherName,proto3" json:"teacher_name,omitempty"`
	SubjectId    int32  `protobuf:"varint,11,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectName  string `protobuf:"bytes,12,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	GradeId      int32  `protobuf:"varint,13,opt,name=grade_id,json=gradeId,proto3" json:"grade_id,omitempty"`
	GradeName    string `protobuf:"bytes,14,opt,name=grade_name,json=gradeName,proto3" json:"grade_name,omitempty"`
	LessonNum    int32  `protobuf:"varint,15,opt,name=lesson_num,json=lessonNum,proto3" json:"lesson_num,omitempty"`
	PlanNum      int32  `protobuf:"varint,16,opt,name=plan_num,json=planNum,proto3" json:"plan_num,omitempty"`       // 计划上课人数
	ActualNum    int32  `protobuf:"varint,17,opt,name=actual_num,json=actualNum,proto3" json:"actual_num,omitempty"` // 报名人数
	Status       int32  `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	Version      int32  `protobuf:"varint,19,opt,name=version,proto3" json:"version,omitempty"`
	PlanName     string `protobuf:"bytes,20,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	Code         string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ListAllCoursePlanDetailReply_Data) Reset() {
	*x = ListAllCoursePlanDetailReply_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllCoursePlanDetailReply_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllCoursePlanDetailReply_Data) ProtoMessage() {}

func (x *ListAllCoursePlanDetailReply_Data) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllCoursePlanDetailReply_Data.ProtoReflect.Descriptor instead.
func (*ListAllCoursePlanDetailReply_Data) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{25, 0}
}

func (x *ListAllCoursePlanDetailReply_Data) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetDayIndex() int32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetDayIndexName() string {
	if x != nil {
		return x.DayIndexName
	}
	return ""
}

func (x *ListAllCoursePlanDetailReply_Data) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ListAllCoursePlanDetailReply_Data) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ListAllCoursePlanDetailReply_Data) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *ListAllCoursePlanDetailReply_Data) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *ListAllCoursePlanDetailReply_Data) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *ListAllCoursePlanDetailReply_Data) GetGradeId() int32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *ListAllCoursePlanDetailReply_Data) GetLessonNum() int32 {
	if x != nil {
		return x.LessonNum
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetPlanNum() int32 {
	if x != nil {
		return x.PlanNum
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetActualNum() int32 {
	if x != nil {
		return x.ActualNum
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListAllCoursePlanDetailReply_Data) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *ListAllCoursePlanDetailReply_Data) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type BatchAddCoursePlanDetailRequest_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId       int32  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	DayIndex     int32  `protobuf:"varint,3,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	DayIndexName string `protobuf:"bytes,4,opt,name=day_index_name,json=dayIndexName,proto3" json:"day_index_name,omitempty"`
	StartTime    string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RoomId       int32  `protobuf:"varint,7,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName     string `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	TeacherId    int32  `protobuf:"varint,9,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	TeacherName  string `protobuf:"bytes,10,opt,name=teacher_name,json=teacherName,proto3" json:"teacher_name,omitempty"`
	SubjectId    int32  `protobuf:"varint,11,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectName  string `protobuf:"bytes,12,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	GradeId      int32  `protobuf:"varint,13,opt,name=grade_id,json=gradeId,proto3" json:"grade_id,omitempty"`
	GradeName    string `protobuf:"bytes,14,opt,name=grade_name,json=gradeName,proto3" json:"grade_name,omitempty"`
	LessonNum    int32  `protobuf:"varint,15,opt,name=lesson_num,json=lessonNum,proto3" json:"lesson_num,omitempty"`
	PlanNum      int32  `protobuf:"varint,16,opt,name=plan_num,json=planNum,proto3" json:"plan_num,omitempty"`       // 计划上课人数
	ActualNum    int32  `protobuf:"varint,17,opt,name=actual_num,json=actualNum,proto3" json:"actual_num,omitempty"` // 报名人数
	Status       int32  `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	Version      int32  `protobuf:"varint,19,opt,name=version,proto3" json:"version,omitempty"`
	PlanName     string `protobuf:"bytes,20,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	Code         string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *BatchAddCoursePlanDetailRequest_Data) Reset() {
	*x = BatchAddCoursePlanDetailRequest_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddCoursePlanDetailRequest_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddCoursePlanDetailRequest_Data) ProtoMessage() {}

func (x *BatchAddCoursePlanDetailRequest_Data) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddCoursePlanDetailRequest_Data.ProtoReflect.Descriptor instead.
func (*BatchAddCoursePlanDetailRequest_Data) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{26, 0}
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetDayIndex() int32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetDayIndexName() string {
	if x != nil {
		return x.DayIndexName
	}
	return ""
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetGradeId() int32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetLessonNum() int32 {
	if x != nil {
		return x.LessonNum
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetPlanNum() int32 {
	if x != nil {
		return x.PlanNum
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetActualNum() int32 {
	if x != nil {
		return x.ActualNum
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *BatchAddCoursePlanDetailRequest_Data) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ListCoursePlanStudentReply_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerPhone string `protobuf:"bytes,2,opt,name=customer_phone,json=customerPhone,proto3" json:"customer_phone,omitempty"`
	StudentId     int32  `protobuf:"varint,3,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName   string `protobuf:"bytes,4,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	PlanId        int32  `protobuf:"varint,5,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	PlanName      string `protobuf:"bytes,6,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	PlanDetailId  int32  `protobuf:"varint,7,opt,name=plan_detail_id,json=planDetailId,proto3" json:"plan_detail_id,omitempty"`
	Status        int32  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Version       int32  `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	UpdatedAt     string `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ListCoursePlanStudentReply_Data) Reset() {
	*x = ListCoursePlanStudentReply_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoursePlanStudentReply_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoursePlanStudentReply_Data) ProtoMessage() {}

func (x *ListCoursePlanStudentReply_Data) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoursePlanStudentReply_Data.ProtoReflect.Descriptor instead.
func (*ListCoursePlanStudentReply_Data) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{41, 0}
}

func (x *ListCoursePlanStudentReply_Data) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListCoursePlanStudentReply_Data) GetCustomerPhone() string {
	if x != nil {
		return x.CustomerPhone
	}
	return ""
}

func (x *ListCoursePlanStudentReply_Data) GetStudentId() int32 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *ListCoursePlanStudentReply_Data) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *ListCoursePlanStudentReply_Data) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *ListCoursePlanStudentReply_Data) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *ListCoursePlanStudentReply_Data) GetPlanDetailId() int32 {
	if x != nil {
		return x.PlanDetailId
	}
	return 0
}

func (x *ListCoursePlanStudentReply_Data) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListCoursePlanStudentReply_Data) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListCoursePlanStudentReply_Data) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ListDailyLessonReply_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId       int32  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	PlanName     string `protobuf:"bytes,3,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	PlanDatailId int32  `protobuf:"varint,4,opt,name=plan_datail_id,json=planDatailId,proto3" json:"plan_datail_id,omitempty"`
	DateOfDay    string `protobuf:"bytes,5,opt,name=date_of_day,json=dateOfDay,proto3" json:"date_of_day,omitempty"`
	StartTime    string `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      string `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RoomId       int32  `protobuf:"varint,8,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName     string `protobuf:"bytes,9,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	TeacherId    int32  `protobuf:"varint,10,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	TeacherName  string `protobuf:"bytes,11,opt,name=teacher_name,json=teacherName,proto3" json:"teacher_name,omitempty"`
	SubjectId    int32  `protobuf:"varint,12,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectName  string `protobuf:"bytes,13,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	GradeId      int32  `protobuf:"varint,14,opt,name=grade_id,json=gradeId,proto3" json:"grade_id,omitempty"`
	GradeName    string `protobuf:"bytes,15,opt,name=grade_name,json=gradeName,proto3" json:"grade_name,omitempty"`
	LessonNum    int32  `protobuf:"varint,16,opt,name=lesson_num,json=lessonNum,proto3" json:"lesson_num,omitempty"`
	PlanNum      int32  `protobuf:"varint,17,opt,name=plan_num,json=planNum,proto3" json:"plan_num,omitempty"`       // 计划上课人数
	ActualNum    int32  `protobuf:"varint,18,opt,name=actual_num,json=actualNum,proto3" json:"actual_num,omitempty"` // 报名人数
	SignNum      int32  `protobuf:"varint,19,opt,name=sign_num,json=signNum,proto3" json:"sign_num,omitempty"`       // 签到
	Status       int32  `protobuf:"varint,20,opt,name=status,proto3" json:"status,omitempty"`
	Version      int32  `protobuf:"varint,21,opt,name=version,proto3" json:"version,omitempty"`
	CourseCode   string `protobuf:"bytes,22,opt,name=course_code,json=courseCode,proto3" json:"course_code,omitempty"`
}

func (x *ListDailyLessonReply_Data) Reset() {
	*x = ListDailyLessonReply_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDailyLessonReply_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyLessonReply_Data) ProtoMessage() {}

func (x *ListDailyLessonReply_Data) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyLessonReply_Data.ProtoReflect.Descriptor instead.
func (*ListDailyLessonReply_Data) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{53, 0}
}

func (x *ListDailyLessonReply_Data) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *ListDailyLessonReply_Data) GetPlanDatailId() int32 {
	if x != nil {
		return x.PlanDatailId
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetDateOfDay() string {
	if x != nil {
		return x.DateOfDay
	}
	return ""
}

func (x *ListDailyLessonReply_Data) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ListDailyLessonReply_Data) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ListDailyLessonReply_Data) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *ListDailyLessonReply_Data) GetTeacherId() int32 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *ListDailyLessonReply_Data) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *ListDailyLessonReply_Data) GetGradeId() int32 {
	if x != nil {
		return x.GradeId
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *ListDailyLessonReply_Data) GetLessonNum() int32 {
	if x != nil {
		return x.LessonNum
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetPlanNum() int32 {
	if x != nil {
		return x.PlanNum
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetActualNum() int32 {
	if x != nil {
		return x.ActualNum
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetSignNum() int32 {
	if x != nil {
		return x.SignNum
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListDailyLessonReply_Data) GetCourseCode() string {
	if x != nil {
		return x.CourseCode
	}
	return ""
}

type ListDailyLessonStudentReply_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId        int32  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	PlanName      string `protobuf:"bytes,3,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	PlanDetailId  int32  `protobuf:"varint,4,opt,name=plan_detail_id,json=planDetailId,proto3" json:"plan_detail_id,omitempty"`
	LessonId      int32  `protobuf:"varint,5,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	CustomerPhone string `protobuf:"bytes,6,opt,name=customer_phone,json=customerPhone,proto3" json:"customer_phone,omitempty"`
	StudentId     int32  `protobuf:"varint,7,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName   string `protobuf:"bytes,8,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	Status        int32  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	Version       int32  `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	UpdatedAt     string `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ListDailyLessonStudentReply_Data) Reset() {
	*x = ListDailyLessonStudentReply_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_course_v1_course_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDailyLessonStudentReply_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyLessonStudentReply_Data) ProtoMessage() {}

func (x *ListDailyLessonStudentReply_Data) ProtoReflect() protoreflect.Message {
	mi := &file_course_v1_course_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyLessonStudentReply_Data.ProtoReflect.Descriptor instead.
func (*ListDailyLessonStudentReply_Data) Descriptor() ([]byte, []int) {
	return file_course_v1_course_proto_rawDescGZIP(), []int{61, 0}
}

func (x *ListDailyLessonStudentReply_Data) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListDailyLessonStudentReply_Data) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *ListDailyLessonStudentReply_Data) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *ListDailyLessonStudentReply_Data) GetPlanDetailId() int32 {
	if x != nil {
		return x.PlanDetailId
	}
	return 0
}

func (x *ListDailyLessonStudentReply_Data) GetLessonId() int32 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

func (x *ListDailyLessonStudentReply_Data) GetCustomerPhone() string {
	if x != nil {
		return x.CustomerPhone
	}
	return ""
}

func (x *ListDailyLessonStudentReply_Data) GetStudentId() int32 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *ListDailyLessonStudentReply_Data) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *ListDailyLessonStudentReply_Data) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListDailyLessonStudentReply_Data) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListDailyLessonStudentReply_Data) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_course_v1_course_proto protoreflect.FileDescriptor

var file_course_v1_course_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x54, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x51, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0xfb, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x0c,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x51, 0x0a, 0x0b,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x26, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x51, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x61, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8a, 0x04, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xa0, 0x03, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a,
	0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x51, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x33, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a,
	0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x20, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xc7, 0x04, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0xf5, 0x04, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a,
	0x0e, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9d, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x44, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xd2, 0x05, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xdc, 0x04, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x4e,
	0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0xc2, 0x05, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0xdc, 0x04, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x24, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xc8, 0x05, 0x0a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xdc, 0x04, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61,
	0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x0a, 0x1b, 0x53,
	0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x38, 0x0a, 0x26, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x26, 0x0a, 0x24, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xe5, 0x01, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x8f, 0x02, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xac, 0x02, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2e, 0x0a, 0x1c, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xc2, 0x04, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x18, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xd2, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x18, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf3, 0x05, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x87, 0x05, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x75, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a,
	0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x0a, 0x18,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x69, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc3, 0x03,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xc9, 0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x2f, 0x0a, 0x1d, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x30, 0x0a, 0x1e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xa3, 0x24, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x77, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x25, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x7c, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x25, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x3a, 0x01, 0x2a, 0x1a, 0x11, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c,
	0x61, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x79, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x25, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a,
	0x11, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x6b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x22, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x12, 0x0c, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x12,
	0x73, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2f,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x26, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61,
	0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x19, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a,
	0x22, 0x19, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x73,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x95,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x1a, 0x18, 0x2f, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x2b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x2a, 0x18, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x99, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12,
	0x1c, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x61, 0x6c, 0x6c, 0x12, 0xa0, 0x01,
	0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01,
	0x2a, 0x22, 0x1d, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x61, 0x64, 0x64,
	0x12, 0x8f, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x73, 0x74,
	0x6f, 0x70, 0x12, 0xb4, 0x01, 0x0a, 0x1f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x99, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01,
	0x2a, 0x1a, 0x19, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x96, 0x01, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x90, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19,
	0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x7b, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x26,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2d,
	0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x3a, 0x01, 0x2a, 0x1a, 0x12, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2d, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7d, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x26,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2d, 0x6c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x2d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12,
	0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x2f, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x7e, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x2d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01,
	0x2a, 0x22, 0x14, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2d, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x94, 0x01, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2d,
	0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01,
	0x2a, 0x22, 0x1a, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x2d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x9b, 0x01,
	0x0a, 0x17, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b,
	0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x2d, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x42, 0x4d, 0x0a, 0x1c, 0x64,
	0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01,
	0x5a, 0x18, 0x65, 0x64, 0x75, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_course_v1_course_proto_rawDescOnce sync.Once
	file_course_v1_course_proto_rawDescData = file_course_v1_course_proto_rawDesc
)

func file_course_v1_course_proto_rawDescGZIP() []byte {
	file_course_v1_course_proto_rawDescOnce.Do(func() {
		file_course_v1_course_proto_rawDescData = protoimpl.X.CompressGZIP(file_course_v1_course_proto_rawDescData)
	})
	return file_course_v1_course_proto_rawDescData
}

var file_course_v1_course_proto_msgTypes = make([]protoimpl.MessageInfo, 77)
var file_course_v1_course_proto_goTypes = []interface{}{
	(*CreateCoursePlanRequest)(nil),                // 0: workbench.v1.CreateCoursePlanRequest
	(*CreateCoursePlanReply)(nil),                  // 1: workbench.v1.CreateCoursePlanReply
	(*UpdateCoursePlanRequest)(nil),                // 2: workbench.v1.UpdateCoursePlanRequest
	(*UpdateCoursePlanReply)(nil),                  // 3: workbench.v1.UpdateCoursePlanReply
	(*DeleteCoursePlanRequest)(nil),                // 4: workbench.v1.DeleteCoursePlanRequest
	(*DeleteCoursePlanReply)(nil),                  // 5: workbench.v1.DeleteCoursePlanReply
	(*GetCoursePlanRequest)(nil),                   // 6: workbench.v1.GetCoursePlanRequest
	(*GetCoursePlanReply)(nil),                     // 7: workbench.v1.GetCoursePlanReply
	(*ListCoursePlanRequest)(nil),                  // 8: workbench.v1.ListCoursePlanRequest
	(*ListCoursePlanReply)(nil),                    // 9: workbench.v1.ListCoursePlanReply
	(*ReleaseCoursePlanRequest)(nil),               // 10: workbench.v1.ReleaseCoursePlanRequest
	(*ReleaseCoursePlanReply)(nil),                 // 11: workbench.v1.ReleaseCoursePlanReply
	(*ScheduleDateForCoursePlanRequest)(nil),       // 12: workbench.v1.ScheduleDateForCoursePlanRequest
	(*ScheduleDateForCoursePlanReply)(nil),         // 13: workbench.v1.ScheduleDateForCoursePlanReply
	(*CreateCoursePlanDetailRequest)(nil),          // 14: workbench.v1.CreateCoursePlanDetailRequest
	(*CreateCoursePlanDetailReply)(nil),            // 15: workbench.v1.CreateCoursePlanDetailReply
	(*UpdateCoursePlanDetailRequest)(nil),          // 16: workbench.v1.UpdateCoursePlanDetailRequest
	(*UpdateCoursePlanDetailReply)(nil),            // 17: workbench.v1.UpdateCoursePlanDetailReply
	(*DeleteCoursePlanDetailRequest)(nil),          // 18: workbench.v1.DeleteCoursePlanDetailRequest
	(*DeleteCoursePlanDetailReply)(nil),            // 19: workbench.v1.DeleteCoursePlanDetailReply
	(*GetCoursePlanDetailRequest)(nil),             // 20: workbench.v1.GetCoursePlanDetailRequest
	(*GetCoursePlanDetailReply)(nil),               // 21: workbench.v1.GetCoursePlanDetailReply
	(*ListCoursePlanDetailRequest)(nil),            // 22: workbench.v1.ListCoursePlanDetailRequest
	(*ListCoursePlanDetailReply)(nil),              // 23: workbench.v1.ListCoursePlanDetailReply
	(*ListAllCoursePlanDetailRequest)(nil),         // 24: workbench.v1.ListAllCoursePlanDetailRequest
	(*ListAllCoursePlanDetailReply)(nil),           // 25: workbench.v1.ListAllCoursePlanDetailReply
	(*BatchAddCoursePlanDetailRequest)(nil),        // 26: workbench.v1.BatchAddCoursePlanDetailRequest
	(*BatchAddCoursePlanDetailReply)(nil),          // 27: workbench.v1.BatchAddCoursePlanDetailReply
	(*StopCoursePlanDetailRequest)(nil),            // 28: workbench.v1.StopCoursePlanDetailRequest
	(*StopCoursePlanDetailReply)(nil),              // 29: workbench.v1.StopCoursePlanDetailReply
	(*ScheduleDateForCoursePlanDetailRequest)(nil), // 30: workbench.v1.ScheduleDateForCoursePlanDetailRequest
	(*ScheduleDateForCoursePlanDetailReply)(nil),   // 31: workbench.v1.ScheduleDateForCoursePlanDetailReply
	(*CreateCoursePlanStudentRequest)(nil),         // 32: workbench.v1.CreateCoursePlanStudentRequest
	(*CreateCoursePlanStudentReply)(nil),           // 33: workbench.v1.CreateCoursePlanStudentReply
	(*UpdateCoursePlanStudentRequest)(nil),         // 34: workbench.v1.UpdateCoursePlanStudentRequest
	(*UpdateCoursePlanStudentReply)(nil),           // 35: workbench.v1.UpdateCoursePlanStudentReply
	(*DeleteCoursePlanStudentRequest)(nil),         // 36: workbench.v1.DeleteCoursePlanStudentRequest
	(*DeleteCoursePlanStudentReply)(nil),           // 37: workbench.v1.DeleteCoursePlanStudentReply
	(*GetCoursePlanStudentRequest)(nil),            // 38: workbench.v1.GetCoursePlanStudentRequest
	(*GetCoursePlanStudentReply)(nil),              // 39: workbench.v1.GetCoursePlanStudentReply
	(*ListCoursePlanStudentRequest)(nil),           // 40: workbench.v1.ListCoursePlanStudentRequest
	(*ListCoursePlanStudentReply)(nil),             // 41: workbench.v1.ListCoursePlanStudentReply
	(*StopCoursePlanStudentRequest)(nil),           // 42: workbench.v1.StopCoursePlanStudentRequest
	(*StopCoursePlanStudentReply)(nil),             // 43: workbench.v1.StopCoursePlanStudentReply
	(*CreateDailyLessonRequest)(nil),               // 44: workbench.v1.CreateDailyLessonRequest
	(*CreateDailyLessonReply)(nil),                 // 45: workbench.v1.CreateDailyLessonReply
	(*UpdateDailyLessonRequest)(nil),               // 46: workbench.v1.UpdateDailyLessonRequest
	(*UpdateDailyLessonReply)(nil),                 // 47: workbench.v1.UpdateDailyLessonReply
	(*DeleteDailyLessonRequest)(nil),               // 48: workbench.v1.DeleteDailyLessonRequest
	(*DeleteDailyLessonReply)(nil),                 // 49: workbench.v1.DeleteDailyLessonReply
	(*GetDailyLessonRequest)(nil),                  // 50: workbench.v1.GetDailyLessonRequest
	(*GetDailyLessonReply)(nil),                    // 51: workbench.v1.GetDailyLessonReply
	(*ListDailyLessonRequest)(nil),                 // 52: workbench.v1.ListDailyLessonRequest
	(*ListDailyLessonReply)(nil),                   // 53: workbench.v1.ListDailyLessonReply
	(*StartDailyLessonRequest)(nil),                // 54: workbench.v1.StartDailyLessonRequest
	(*StartDailyLessonReply)(nil),                  // 55: workbench.v1.StartDailyLessonReply
	(*CancelDailyLessonRequest)(nil),               // 56: workbench.v1.CancelDailyLessonRequest
	(*CancelDailyLessonReply)(nil),                 // 57: workbench.v1.CancelDailyLessonReply
	(*FinishDailyLessonRequest)(nil),               // 58: workbench.v1.FinishDailyLessonRequest
	(*FinishDailyLessonReply)(nil),                 // 59: workbench.v1.FinishDailyLessonReply
	(*ListDailyLessonStudentRequest)(nil),          // 60: workbench.v1.ListDailyLessonStudentRequest
	(*ListDailyLessonStudentReply)(nil),            // 61: workbench.v1.ListDailyLessonStudentReply
	(*SignDailyLessonStudentRequest)(nil),          // 62: workbench.v1.SignDailyLessonStudentRequest
	(*SignDailyLessonStudentReply)(nil),            // 63: workbench.v1.SignDailyLessonStudentReply
	(*LeaveDailyLessonStudentRequest)(nil),         // 64: workbench.v1.LeaveDailyLessonStudentRequest
	(*LeaveDailyLessonStudentReply)(nil),           // 65: workbench.v1.LeaveDailyLessonStudentReply
	(*CreateCoursePlanRequest_ExcludeRule)(nil),    // 66: workbench.v1.CreateCoursePlanRequest.ExcludeRule
	(*UpdateCoursePlanRequest_ExcludeRule)(nil),    // 67: workbench.v1.UpdateCoursePlanRequest.ExcludeRule
	(*GetCoursePlanReply_ExcludeRule)(nil),         // 68: workbench.v1.GetCoursePlanReply.ExcludeRule
	(*ListCoursePlanReply_Data)(nil),               // 69: workbench.v1.ListCoursePlanReply.Data
	(*ListCoursePlanReply_Data_ExcludeRule)(nil),   // 70: workbench.v1.ListCoursePlanReply.Data.ExcludeRule
	(*ListCoursePlanDetailReply_Data)(nil),         // 71: workbench.v1.ListCoursePlanDetailReply.Data
	(*ListAllCoursePlanDetailReply_Data)(nil),      // 72: workbench.v1.ListAllCoursePlanDetailReply.Data
	(*BatchAddCoursePlanDetailRequest_Data)(nil),   // 73: workbench.v1.BatchAddCoursePlanDetailRequest.Data
	(*ListCoursePlanStudentReply_Data)(nil),        // 74: workbench.v1.ListCoursePlanStudentReply.Data
	(*ListDailyLessonReply_Data)(nil),              // 75: workbench.v1.ListDailyLessonReply.Data
	(*ListDailyLessonStudentReply_Data)(nil),       // 76: workbench.v1.ListDailyLessonStudentReply.Data
}
var file_course_v1_course_proto_depIdxs = []int32{
	66, // 0: workbench.v1.CreateCoursePlanRequest.exclude_rule:type_name -> workbench.v1.CreateCoursePlanRequest.ExcludeRule
	67, // 1: workbench.v1.UpdateCoursePlanRequest.exclude_rule:type_name -> workbench.v1.UpdateCoursePlanRequest.ExcludeRule
	68, // 2: workbench.v1.GetCoursePlanReply.exclude_rule:type_name -> workbench.v1.GetCoursePlanReply.ExcludeRule
	69, // 3: workbench.v1.ListCoursePlanReply.data:type_name -> workbench.v1.ListCoursePlanReply.Data
	71, // 4: workbench.v1.ListCoursePlanDetailReply.data:type_name -> workbench.v1.ListCoursePlanDetailReply.Data
	72, // 5: workbench.v1.ListAllCoursePlanDetailReply.data:type_name -> workbench.v1.ListAllCoursePlanDetailReply.Data
	73, // 6: workbench.v1.BatchAddCoursePlanDetailRequest.data:type_name -> workbench.v1.BatchAddCoursePlanDetailRequest.Data
	74, // 7: workbench.v1.ListCoursePlanStudentReply.data:type_name -> workbench.v1.ListCoursePlanStudentReply.Data
	75, // 8: workbench.v1.ListDailyLessonReply.data:type_name -> workbench.v1.ListDailyLessonReply.Data
	76, // 9: workbench.v1.ListDailyLessonStudentReply.data:type_name -> workbench.v1.ListDailyLessonStudentReply.Data
	70, // 10: workbench.v1.ListCoursePlanReply.Data.exclude_rule:type_name -> workbench.v1.ListCoursePlanReply.Data.ExcludeRule
	0,  // 11: workbench.v1.Course.CreateCoursePlan:input_type -> workbench.v1.CreateCoursePlanRequest
	2,  // 12: workbench.v1.Course.UpdateCoursePlan:input_type -> workbench.v1.UpdateCoursePlanRequest
	4,  // 13: workbench.v1.Course.DeleteCoursePlan:input_type -> workbench.v1.DeleteCoursePlanRequest
	6,  // 14: workbench.v1.Course.GetCoursePlan:input_type -> workbench.v1.GetCoursePlanRequest
	8,  // 15: workbench.v1.Course.ListCoursePlan:input_type -> workbench.v1.ListCoursePlanRequest
	10, // 16: workbench.v1.Course.ReleaseCoursePlan:input_type -> workbench.v1.ReleaseCoursePlanRequest
	12, // 17: workbench.v1.Course.ScheduleDateForCoursePlan:input_type -> workbench.v1.ScheduleDateForCoursePlanRequest
	14, // 18: workbench.v1.Course.CreateCoursePlanDetail:input_type -> workbench.v1.CreateCoursePlanDetailRequest
	16, // 19: workbench.v1.Course.UpdateCoursePlanDetail:input_type -> workbench.v1.UpdateCoursePlanDetailRequest
	18, // 20: workbench.v1.Course.DeleteCoursePlanDetail:input_type -> workbench.v1.DeleteCoursePlanDetailRequest
	20, // 21: workbench.v1.Course.GetCoursePlanDetail:input_type -> workbench.v1.GetCoursePlanDetailRequest
	22, // 22: workbench.v1.Course.ListCoursePlanDetail:input_type -> workbench.v1.ListCoursePlanDetailRequest
	24, // 23: workbench.v1.Course.ListAllCoursePlanDetail:input_type -> workbench.v1.ListAllCoursePlanDetailRequest
	26, // 24: workbench.v1.Course.BatchAddCoursePlanDetail:input_type -> workbench.v1.BatchAddCoursePlanDetailRequest
	28, // 25: workbench.v1.Course.StopCoursePlanDetail:input_type -> workbench.v1.StopCoursePlanDetailRequest
	30, // 26: workbench.v1.Course.ScheduleDateForCoursePlanDetail:input_type -> workbench.v1.ScheduleDateForCoursePlanDetailRequest
	32, // 27: workbench.v1.Course.CreateCoursePlanStudent:input_type -> workbench.v1.CreateCoursePlanStudentRequest
	34, // 28: workbench.v1.Course.UpdateCoursePlanStudent:input_type -> workbench.v1.UpdateCoursePlanStudentRequest
	36, // 29: workbench.v1.Course.DeleteCoursePlanStudent:input_type -> workbench.v1.DeleteCoursePlanStudentRequest
	38, // 30: workbench.v1.Course.GetCoursePlanStudent:input_type -> workbench.v1.GetCoursePlanStudentRequest
	40, // 31: workbench.v1.Course.ListCoursePlanStudent:input_type -> workbench.v1.ListCoursePlanStudentRequest
	42, // 32: workbench.v1.Course.StopCoursePlanStudent:input_type -> workbench.v1.StopCoursePlanStudentRequest
	44, // 33: workbench.v1.Course.CreateDailyLesson:input_type -> workbench.v1.CreateDailyLessonRequest
	46, // 34: workbench.v1.Course.UpdateDailyLesson:input_type -> workbench.v1.UpdateDailyLessonRequest
	48, // 35: workbench.v1.Course.DeleteDailyLesson:input_type -> workbench.v1.DeleteDailyLessonRequest
	50, // 36: workbench.v1.Course.GetDailyLesson:input_type -> workbench.v1.GetDailyLessonRequest
	52, // 37: workbench.v1.Course.ListDailyLesson:input_type -> workbench.v1.ListDailyLessonRequest
	54, // 38: workbench.v1.Course.StartDailyLesson:input_type -> workbench.v1.StartDailyLessonRequest
	56, // 39: workbench.v1.Course.CancelDailyLesson:input_type -> workbench.v1.CancelDailyLessonRequest
	58, // 40: workbench.v1.Course.FinishDailyLesson:input_type -> workbench.v1.FinishDailyLessonRequest
	60, // 41: workbench.v1.Course.ListDailyLessonStudent:input_type -> workbench.v1.ListDailyLessonStudentRequest
	62, // 42: workbench.v1.Course.SignDailyLessonStudent:input_type -> workbench.v1.SignDailyLessonStudentRequest
	64, // 43: workbench.v1.Course.LeaveDailyLessonStudent:input_type -> workbench.v1.LeaveDailyLessonStudentRequest
	1,  // 44: workbench.v1.Course.CreateCoursePlan:output_type -> workbench.v1.CreateCoursePlanReply
	3,  // 45: workbench.v1.Course.UpdateCoursePlan:output_type -> workbench.v1.UpdateCoursePlanReply
	5,  // 46: workbench.v1.Course.DeleteCoursePlan:output_type -> workbench.v1.DeleteCoursePlanReply
	7,  // 47: workbench.v1.Course.GetCoursePlan:output_type -> workbench.v1.GetCoursePlanReply
	9,  // 48: workbench.v1.Course.ListCoursePlan:output_type -> workbench.v1.ListCoursePlanReply
	11, // 49: workbench.v1.Course.ReleaseCoursePlan:output_type -> workbench.v1.ReleaseCoursePlanReply
	13, // 50: workbench.v1.Course.ScheduleDateForCoursePlan:output_type -> workbench.v1.ScheduleDateForCoursePlanReply
	15, // 51: workbench.v1.Course.CreateCoursePlanDetail:output_type -> workbench.v1.CreateCoursePlanDetailReply
	17, // 52: workbench.v1.Course.UpdateCoursePlanDetail:output_type -> workbench.v1.UpdateCoursePlanDetailReply
	19, // 53: workbench.v1.Course.DeleteCoursePlanDetail:output_type -> workbench.v1.DeleteCoursePlanDetailReply
	21, // 54: workbench.v1.Course.GetCoursePlanDetail:output_type -> workbench.v1.GetCoursePlanDetailReply
	23, // 55: workbench.v1.Course.ListCoursePlanDetail:output_type -> workbench.v1.ListCoursePlanDetailReply
	25, // 56: workbench.v1.Course.ListAllCoursePlanDetail:output_type -> workbench.v1.ListAllCoursePlanDetailReply
	27, // 57: workbench.v1.Course.BatchAddCoursePlanDetail:output_type -> workbench.v1.BatchAddCoursePlanDetailReply
	29, // 58: workbench.v1.Course.StopCoursePlanDetail:output_type -> workbench.v1.StopCoursePlanDetailReply
	31, // 59: workbench.v1.Course.ScheduleDateForCoursePlanDetail:output_type -> workbench.v1.ScheduleDateForCoursePlanDetailReply
	33, // 60: workbench.v1.Course.CreateCoursePlanStudent:output_type -> workbench.v1.CreateCoursePlanStudentReply
	35, // 61: workbench.v1.Course.UpdateCoursePlanStudent:output_type -> workbench.v1.UpdateCoursePlanStudentReply
	37, // 62: workbench.v1.Course.DeleteCoursePlanStudent:output_type -> workbench.v1.DeleteCoursePlanStudentReply
	39, // 63: workbench.v1.Course.GetCoursePlanStudent:output_type -> workbench.v1.GetCoursePlanStudentReply
	41, // 64: workbench.v1.Course.ListCoursePlanStudent:output_type -> workbench.v1.ListCoursePlanStudentReply
	43, // 65: workbench.v1.Course.StopCoursePlanStudent:output_type -> workbench.v1.StopCoursePlanStudentReply
	45, // 66: workbench.v1.Course.CreateDailyLesson:output_type -> workbench.v1.CreateDailyLessonReply
	47, // 67: workbench.v1.Course.UpdateDailyLesson:output_type -> workbench.v1.UpdateDailyLessonReply
	49, // 68: workbench.v1.Course.DeleteDailyLesson:output_type -> workbench.v1.DeleteDailyLessonReply
	51, // 69: workbench.v1.Course.GetDailyLesson:output_type -> workbench.v1.GetDailyLessonReply
	53, // 70: workbench.v1.Course.ListDailyLesson:output_type -> workbench.v1.ListDailyLessonReply
	55, // 71: workbench.v1.Course.StartDailyLesson:output_type -> workbench.v1.StartDailyLessonReply
	57, // 72: workbench.v1.Course.CancelDailyLesson:output_type -> workbench.v1.CancelDailyLessonReply
	59, // 73: workbench.v1.Course.FinishDailyLesson:output_type -> workbench.v1.FinishDailyLessonReply
	61, // 74: workbench.v1.Course.ListDailyLessonStudent:output_type -> workbench.v1.ListDailyLessonStudentReply
	63, // 75: workbench.v1.Course.SignDailyLessonStudent:output_type -> workbench.v1.SignDailyLessonStudentReply
	65, // 76: workbench.v1.Course.LeaveDailyLessonStudent:output_type -> workbench.v1.LeaveDailyLessonStudentReply
	44, // [44:77] is the sub-list for method output_type
	11, // [11:44] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_course_v1_course_proto_init() }
func file_course_v1_course_proto_init() {
	if File_course_v1_course_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_course_v1_course_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoursePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoursePlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoursePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoursePlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoursePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoursePlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoursePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoursePlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursePlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseCoursePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseCoursePlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleDateForCoursePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleDateForCoursePlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoursePlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoursePlanDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoursePlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoursePlanDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoursePlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoursePlanDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoursePlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoursePlanDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursePlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursePlanDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllCoursePlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllCoursePlanDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddCoursePlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddCoursePlanDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCoursePlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCoursePlanDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleDateForCoursePlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleDateForCoursePlanDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoursePlanStudentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoursePlanStudentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoursePlanStudentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoursePlanStudentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoursePlanStudentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoursePlanStudentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoursePlanStudentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoursePlanStudentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursePlanStudentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursePlanStudentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCoursePlanStudentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCoursePlanStudentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDailyLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDailyLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDailyLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDailyLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDailyLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDailyLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDailyLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDailyLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDailyLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDailyLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelDailyLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelDailyLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishDailyLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishDailyLessonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDailyLessonStudentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDailyLessonStudentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignDailyLessonStudentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignDailyLessonStudentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveDailyLessonStudentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveDailyLessonStudentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoursePlanRequest_ExcludeRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoursePlanRequest_ExcludeRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoursePlanReply_ExcludeRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursePlanReply_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursePlanReply_Data_ExcludeRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursePlanDetailReply_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllCoursePlanDetailReply_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddCoursePlanDetailRequest_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoursePlanStudentReply_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDailyLessonReply_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_course_v1_course_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDailyLessonStudentReply_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_course_v1_course_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   77,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_course_v1_course_proto_goTypes,
		DependencyIndexes: file_course_v1_course_proto_depIdxs,
		MessageInfos:      file_course_v1_course_proto_msgTypes,
	}.Build()
	File_course_v1_course_proto = out.File
	file_course_v1_course_proto_rawDesc = nil
	file_course_v1_course_proto_goTypes = nil
	file_course_v1_course_proto_depIdxs = nil
}
