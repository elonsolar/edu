// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: course/v1/course.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCourseBatchAddCoursePlanDetail = "/workbench.v1.Course/BatchAddCoursePlanDetail"
const OperationCourseCancelDailyLesson = "/workbench.v1.Course/CancelDailyLesson"
const OperationCourseCreateCoursePlan = "/workbench.v1.Course/CreateCoursePlan"
const OperationCourseCreateCoursePlanDetail = "/workbench.v1.Course/CreateCoursePlanDetail"
const OperationCourseCreateCoursePlanStudent = "/workbench.v1.Course/CreateCoursePlanStudent"
const OperationCourseCreateDailyLesson = "/workbench.v1.Course/CreateDailyLesson"
const OperationCourseDeleteCoursePlan = "/workbench.v1.Course/DeleteCoursePlan"
const OperationCourseDeleteCoursePlanDetail = "/workbench.v1.Course/DeleteCoursePlanDetail"
const OperationCourseDeleteCoursePlanStudent = "/workbench.v1.Course/DeleteCoursePlanStudent"
const OperationCourseDeleteDailyLesson = "/workbench.v1.Course/DeleteDailyLesson"
const OperationCourseFinishDailyLesson = "/workbench.v1.Course/FinishDailyLesson"
const OperationCourseGetCoursePlan = "/workbench.v1.Course/GetCoursePlan"
const OperationCourseGetCoursePlanDetail = "/workbench.v1.Course/GetCoursePlanDetail"
const OperationCourseGetCoursePlanStudent = "/workbench.v1.Course/GetCoursePlanStudent"
const OperationCourseGetDailyLesson = "/workbench.v1.Course/GetDailyLesson"
const OperationCourseLeaveDailyLessonStudent = "/workbench.v1.Course/LeaveDailyLessonStudent"
const OperationCourseListAllCoursePlanDetail = "/workbench.v1.Course/ListAllCoursePlanDetail"
const OperationCourseListCoursePlan = "/workbench.v1.Course/ListCoursePlan"
const OperationCourseListCoursePlanDetail = "/workbench.v1.Course/ListCoursePlanDetail"
const OperationCourseListCoursePlanStudent = "/workbench.v1.Course/ListCoursePlanStudent"
const OperationCourseListDailyLesson = "/workbench.v1.Course/ListDailyLesson"
const OperationCourseListDailyLessonStudent = "/workbench.v1.Course/ListDailyLessonStudent"
const OperationCourseReleaseCoursePlan = "/workbench.v1.Course/ReleaseCoursePlan"
const OperationCourseScheduleDateForCoursePlan = "/workbench.v1.Course/ScheduleDateForCoursePlan"
const OperationCourseScheduleDateForCoursePlanDetail = "/workbench.v1.Course/ScheduleDateForCoursePlanDetail"
const OperationCourseSignDailyLessonStudent = "/workbench.v1.Course/SignDailyLessonStudent"
const OperationCourseStartDailyLesson = "/workbench.v1.Course/StartDailyLesson"
const OperationCourseStopCoursePlanDetail = "/workbench.v1.Course/StopCoursePlanDetail"
const OperationCourseStopCoursePlanStudent = "/workbench.v1.Course/StopCoursePlanStudent"
const OperationCourseUpdateCoursePlan = "/workbench.v1.Course/UpdateCoursePlan"
const OperationCourseUpdateCoursePlanDetail = "/workbench.v1.Course/UpdateCoursePlanDetail"
const OperationCourseUpdateCoursePlanStudent = "/workbench.v1.Course/UpdateCoursePlanStudent"
const OperationCourseUpdateDailyLesson = "/workbench.v1.Course/UpdateDailyLesson"

type CourseHTTPServer interface {
	BatchAddCoursePlanDetail(context.Context, *BatchAddCoursePlanDetailRequest) (*BatchAddCoursePlanDetailReply, error)
	CancelDailyLesson(context.Context, *CancelDailyLessonRequest) (*CancelDailyLessonReply, error)
	// CreateCoursePlan coursePlan
	CreateCoursePlan(context.Context, *CreateCoursePlanRequest) (*CreateCoursePlanReply, error)
	// CreateCoursePlanDetail coursePlanDetail
	CreateCoursePlanDetail(context.Context, *CreateCoursePlanDetailRequest) (*CreateCoursePlanDetailReply, error)
	// CreateCoursePlanStudent报名
	// coursePlan
	CreateCoursePlanStudent(context.Context, *CreateCoursePlanStudentRequest) (*CreateCoursePlanStudentReply, error)
	// CreateDailyLesson 课表
	// coursePlanDetail
	CreateDailyLesson(context.Context, *CreateDailyLessonRequest) (*CreateDailyLessonReply, error)
	DeleteCoursePlan(context.Context, *DeleteCoursePlanRequest) (*DeleteCoursePlanReply, error)
	DeleteCoursePlanDetail(context.Context, *DeleteCoursePlanDetailRequest) (*DeleteCoursePlanDetailReply, error)
	DeleteCoursePlanStudent(context.Context, *DeleteCoursePlanStudentRequest) (*DeleteCoursePlanStudentReply, error)
	DeleteDailyLesson(context.Context, *DeleteDailyLessonRequest) (*DeleteDailyLessonReply, error)
	FinishDailyLesson(context.Context, *FinishDailyLessonRequest) (*FinishDailyLessonReply, error)
	GetCoursePlan(context.Context, *GetCoursePlanRequest) (*GetCoursePlanReply, error)
	GetCoursePlanDetail(context.Context, *GetCoursePlanDetailRequest) (*GetCoursePlanDetailReply, error)
	GetCoursePlanStudent(context.Context, *GetCoursePlanStudentRequest) (*GetCoursePlanStudentReply, error)
	GetDailyLesson(context.Context, *GetDailyLessonRequest) (*GetDailyLessonReply, error)
	LeaveDailyLessonStudent(context.Context, *LeaveDailyLessonStudentRequest) (*LeaveDailyLessonStudentReply, error)
	ListAllCoursePlanDetail(context.Context, *ListAllCoursePlanDetailRequest) (*ListAllCoursePlanDetailReply, error)
	ListCoursePlan(context.Context, *ListCoursePlanRequest) (*ListCoursePlanReply, error)
	ListCoursePlanDetail(context.Context, *ListCoursePlanDetailRequest) (*ListCoursePlanDetailReply, error)
	ListCoursePlanStudent(context.Context, *ListCoursePlanStudentRequest) (*ListCoursePlanStudentReply, error)
	ListDailyLesson(context.Context, *ListDailyLessonRequest) (*ListDailyLessonReply, error)
	ListDailyLessonStudent(context.Context, *ListDailyLessonStudentRequest) (*ListDailyLessonStudentReply, error)
	ReleaseCoursePlan(context.Context, *ReleaseCoursePlanRequest) (*ReleaseCoursePlanReply, error)
	ScheduleDateForCoursePlan(context.Context, *ScheduleDateForCoursePlanRequest) (*ScheduleDateForCoursePlanReply, error)
	ScheduleDateForCoursePlanDetail(context.Context, *ScheduleDateForCoursePlanDetailRequest) (*ScheduleDateForCoursePlanDetailReply, error)
	SignDailyLessonStudent(context.Context, *SignDailyLessonStudentRequest) (*SignDailyLessonStudentReply, error)
	StartDailyLesson(context.Context, *StartDailyLessonRequest) (*StartDailyLessonReply, error)
	StopCoursePlanDetail(context.Context, *StopCoursePlanDetailRequest) (*StopCoursePlanDetailReply, error)
	StopCoursePlanStudent(context.Context, *StopCoursePlanStudentRequest) (*StopCoursePlanStudentReply, error)
	UpdateCoursePlan(context.Context, *UpdateCoursePlanRequest) (*UpdateCoursePlanReply, error)
	UpdateCoursePlanDetail(context.Context, *UpdateCoursePlanDetailRequest) (*UpdateCoursePlanDetailReply, error)
	UpdateCoursePlanStudent(context.Context, *UpdateCoursePlanStudentRequest) (*UpdateCoursePlanStudentReply, error)
	UpdateDailyLesson(context.Context, *UpdateDailyLessonRequest) (*UpdateDailyLessonReply, error)
}

func RegisterCourseHTTPServer(s *http.Server, srv CourseHTTPServer) {
	r := s.Route("/")
	r.POST("/course-plan", _Course_CreateCoursePlan0_HTTP_Handler(srv))
	r.PUT("/course-plan/{id}", _Course_UpdateCoursePlan0_HTTP_Handler(srv))
	r.DELETE("/course-plan/{id}", _Course_DeleteCoursePlan0_HTTP_Handler(srv))
	r.GET("/course-plan", _Course_GetCoursePlan0_HTTP_Handler(srv))
	r.GET("/course-plan/page", _Course_ListCoursePlan0_HTTP_Handler(srv))
	r.POST("/course-plan/release", _Course_ReleaseCoursePlan0_HTTP_Handler(srv))
	r.POST("/course-plan/shedule-date", _Course_ScheduleDateForCoursePlan0_HTTP_Handler(srv))
	r.POST("/course-plan-detail", _Course_CreateCoursePlanDetail0_HTTP_Handler(srv))
	r.PUT("/course-plan-detail/{id}", _Course_UpdateCoursePlanDetail0_HTTP_Handler(srv))
	r.DELETE("/course-plan-detail/{id}", _Course_DeleteCoursePlanDetail0_HTTP_Handler(srv))
	r.GET("/course-plan-detail", _Course_GetCoursePlanDetail0_HTTP_Handler(srv))
	r.GET("/course-plan-detail/page", _Course_ListCoursePlanDetail0_HTTP_Handler(srv))
	r.GET("/course-plan-detail/list-all", _Course_ListAllCoursePlanDetail0_HTTP_Handler(srv))
	r.POST("/course-plan-detail/batch-add", _Course_BatchAddCoursePlanDetail0_HTTP_Handler(srv))
	r.POST("/course-plan-detail/stop", _Course_StopCoursePlanDetail0_HTTP_Handler(srv))
	r.POST("/course-plan-detail/schedule", _Course_ScheduleDateForCoursePlanDetail0_HTTP_Handler(srv))
	r.POST("/course-plan-student", _Course_CreateCoursePlanStudent0_HTTP_Handler(srv))
	r.PUT("/course-plan-student/{id}", _Course_UpdateCoursePlanStudent0_HTTP_Handler(srv))
	r.DELETE("/course-plan-student/{id}", _Course_DeleteCoursePlanStudent0_HTTP_Handler(srv))
	r.GET("/course-plan-student", _Course_GetCoursePlanStudent0_HTTP_Handler(srv))
	r.GET("/course-plan-student/page", _Course_ListCoursePlanStudent0_HTTP_Handler(srv))
	r.POST("/course-plan-student/stop", _Course_StopCoursePlanStudent0_HTTP_Handler(srv))
	r.POST("/daily-lesson", _Course_CreateDailyLesson0_HTTP_Handler(srv))
	r.PUT("/daily-lesson/{id}", _Course_UpdateDailyLesson0_HTTP_Handler(srv))
	r.DELETE("/daily-lesson/{id}", _Course_DeleteDailyLesson0_HTTP_Handler(srv))
	r.GET("/daily-lesson", _Course_GetDailyLesson0_HTTP_Handler(srv))
	r.GET("/daily-lesson/page", _Course_ListDailyLesson0_HTTP_Handler(srv))
	r.POST("/daily-lesson/start", _Course_StartDailyLesson0_HTTP_Handler(srv))
	r.POST("/daily-lesson/cancel", _Course_CancelDailyLesson0_HTTP_Handler(srv))
	r.POST("/daily-lesson/finish", _Course_FinishDailyLesson0_HTTP_Handler(srv))
	r.GET("/daily-lesson-student/page", _Course_ListDailyLessonStudent0_HTTP_Handler(srv))
	r.POST("/daily-lesson-student/sign", _Course_SignDailyLessonStudent0_HTTP_Handler(srv))
	r.POST("/daily-lesson-student/leave", _Course_LeaveDailyLessonStudent0_HTTP_Handler(srv))
}

func _Course_CreateCoursePlan0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCoursePlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseCreateCoursePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCoursePlan(ctx, req.(*CreateCoursePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCoursePlanReply)
		return ctx.Result(200, reply)
	}
}

func _Course_UpdateCoursePlan0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCoursePlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseUpdateCoursePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCoursePlan(ctx, req.(*UpdateCoursePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCoursePlanReply)
		return ctx.Result(200, reply)
	}
}

func _Course_DeleteCoursePlan0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCoursePlanRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseDeleteCoursePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCoursePlan(ctx, req.(*DeleteCoursePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCoursePlanReply)
		return ctx.Result(200, reply)
	}
}

func _Course_GetCoursePlan0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCoursePlanRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseGetCoursePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCoursePlan(ctx, req.(*GetCoursePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCoursePlanReply)
		return ctx.Result(200, reply)
	}
}

func _Course_ListCoursePlan0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCoursePlanRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseListCoursePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCoursePlan(ctx, req.(*ListCoursePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCoursePlanReply)
		return ctx.Result(200, reply)
	}
}

func _Course_ReleaseCoursePlan0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReleaseCoursePlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseReleaseCoursePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReleaseCoursePlan(ctx, req.(*ReleaseCoursePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReleaseCoursePlanReply)
		return ctx.Result(200, reply)
	}
}

func _Course_ScheduleDateForCoursePlan0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScheduleDateForCoursePlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseScheduleDateForCoursePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ScheduleDateForCoursePlan(ctx, req.(*ScheduleDateForCoursePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScheduleDateForCoursePlanReply)
		return ctx.Result(200, reply)
	}
}

func _Course_CreateCoursePlanDetail0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCoursePlanDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseCreateCoursePlanDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCoursePlanDetail(ctx, req.(*CreateCoursePlanDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCoursePlanDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Course_UpdateCoursePlanDetail0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCoursePlanDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseUpdateCoursePlanDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCoursePlanDetail(ctx, req.(*UpdateCoursePlanDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCoursePlanDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Course_DeleteCoursePlanDetail0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCoursePlanDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseDeleteCoursePlanDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCoursePlanDetail(ctx, req.(*DeleteCoursePlanDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCoursePlanDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Course_GetCoursePlanDetail0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCoursePlanDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseGetCoursePlanDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCoursePlanDetail(ctx, req.(*GetCoursePlanDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCoursePlanDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Course_ListCoursePlanDetail0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCoursePlanDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseListCoursePlanDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCoursePlanDetail(ctx, req.(*ListCoursePlanDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCoursePlanDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Course_ListAllCoursePlanDetail0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAllCoursePlanDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseListAllCoursePlanDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAllCoursePlanDetail(ctx, req.(*ListAllCoursePlanDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAllCoursePlanDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Course_BatchAddCoursePlanDetail0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchAddCoursePlanDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseBatchAddCoursePlanDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchAddCoursePlanDetail(ctx, req.(*BatchAddCoursePlanDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchAddCoursePlanDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Course_StopCoursePlanDetail0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StopCoursePlanDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseStopCoursePlanDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StopCoursePlanDetail(ctx, req.(*StopCoursePlanDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StopCoursePlanDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Course_ScheduleDateForCoursePlanDetail0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScheduleDateForCoursePlanDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseScheduleDateForCoursePlanDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ScheduleDateForCoursePlanDetail(ctx, req.(*ScheduleDateForCoursePlanDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScheduleDateForCoursePlanDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Course_CreateCoursePlanStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCoursePlanStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseCreateCoursePlanStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCoursePlanStudent(ctx, req.(*CreateCoursePlanStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCoursePlanStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Course_UpdateCoursePlanStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCoursePlanStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseUpdateCoursePlanStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCoursePlanStudent(ctx, req.(*UpdateCoursePlanStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCoursePlanStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Course_DeleteCoursePlanStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCoursePlanStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseDeleteCoursePlanStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCoursePlanStudent(ctx, req.(*DeleteCoursePlanStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCoursePlanStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Course_GetCoursePlanStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCoursePlanStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseGetCoursePlanStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCoursePlanStudent(ctx, req.(*GetCoursePlanStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCoursePlanStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Course_ListCoursePlanStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCoursePlanStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseListCoursePlanStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCoursePlanStudent(ctx, req.(*ListCoursePlanStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCoursePlanStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Course_StopCoursePlanStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StopCoursePlanStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseStopCoursePlanStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StopCoursePlanStudent(ctx, req.(*StopCoursePlanStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StopCoursePlanStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Course_CreateDailyLesson0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDailyLessonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseCreateDailyLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDailyLesson(ctx, req.(*CreateDailyLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDailyLessonReply)
		return ctx.Result(200, reply)
	}
}

func _Course_UpdateDailyLesson0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDailyLessonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseUpdateDailyLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDailyLesson(ctx, req.(*UpdateDailyLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDailyLessonReply)
		return ctx.Result(200, reply)
	}
}

func _Course_DeleteDailyLesson0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDailyLessonRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseDeleteDailyLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDailyLesson(ctx, req.(*DeleteDailyLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDailyLessonReply)
		return ctx.Result(200, reply)
	}
}

func _Course_GetDailyLesson0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDailyLessonRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseGetDailyLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDailyLesson(ctx, req.(*GetDailyLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDailyLessonReply)
		return ctx.Result(200, reply)
	}
}

func _Course_ListDailyLesson0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDailyLessonRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseListDailyLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDailyLesson(ctx, req.(*ListDailyLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDailyLessonReply)
		return ctx.Result(200, reply)
	}
}

func _Course_StartDailyLesson0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartDailyLessonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseStartDailyLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartDailyLesson(ctx, req.(*StartDailyLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StartDailyLessonReply)
		return ctx.Result(200, reply)
	}
}

func _Course_CancelDailyLesson0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelDailyLessonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseCancelDailyLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelDailyLesson(ctx, req.(*CancelDailyLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelDailyLessonReply)
		return ctx.Result(200, reply)
	}
}

func _Course_FinishDailyLesson0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FinishDailyLessonRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseFinishDailyLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FinishDailyLesson(ctx, req.(*FinishDailyLessonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FinishDailyLessonReply)
		return ctx.Result(200, reply)
	}
}

func _Course_ListDailyLessonStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDailyLessonStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseListDailyLessonStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDailyLessonStudent(ctx, req.(*ListDailyLessonStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDailyLessonStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Course_SignDailyLessonStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SignDailyLessonStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseSignDailyLessonStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignDailyLessonStudent(ctx, req.(*SignDailyLessonStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SignDailyLessonStudentReply)
		return ctx.Result(200, reply)
	}
}

func _Course_LeaveDailyLessonStudent0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LeaveDailyLessonStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseLeaveDailyLessonStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LeaveDailyLessonStudent(ctx, req.(*LeaveDailyLessonStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveDailyLessonStudentReply)
		return ctx.Result(200, reply)
	}
}

type CourseHTTPClient interface {
	BatchAddCoursePlanDetail(ctx context.Context, req *BatchAddCoursePlanDetailRequest, opts ...http.CallOption) (rsp *BatchAddCoursePlanDetailReply, err error)
	CancelDailyLesson(ctx context.Context, req *CancelDailyLessonRequest, opts ...http.CallOption) (rsp *CancelDailyLessonReply, err error)
	CreateCoursePlan(ctx context.Context, req *CreateCoursePlanRequest, opts ...http.CallOption) (rsp *CreateCoursePlanReply, err error)
	CreateCoursePlanDetail(ctx context.Context, req *CreateCoursePlanDetailRequest, opts ...http.CallOption) (rsp *CreateCoursePlanDetailReply, err error)
	CreateCoursePlanStudent(ctx context.Context, req *CreateCoursePlanStudentRequest, opts ...http.CallOption) (rsp *CreateCoursePlanStudentReply, err error)
	CreateDailyLesson(ctx context.Context, req *CreateDailyLessonRequest, opts ...http.CallOption) (rsp *CreateDailyLessonReply, err error)
	DeleteCoursePlan(ctx context.Context, req *DeleteCoursePlanRequest, opts ...http.CallOption) (rsp *DeleteCoursePlanReply, err error)
	DeleteCoursePlanDetail(ctx context.Context, req *DeleteCoursePlanDetailRequest, opts ...http.CallOption) (rsp *DeleteCoursePlanDetailReply, err error)
	DeleteCoursePlanStudent(ctx context.Context, req *DeleteCoursePlanStudentRequest, opts ...http.CallOption) (rsp *DeleteCoursePlanStudentReply, err error)
	DeleteDailyLesson(ctx context.Context, req *DeleteDailyLessonRequest, opts ...http.CallOption) (rsp *DeleteDailyLessonReply, err error)
	FinishDailyLesson(ctx context.Context, req *FinishDailyLessonRequest, opts ...http.CallOption) (rsp *FinishDailyLessonReply, err error)
	GetCoursePlan(ctx context.Context, req *GetCoursePlanRequest, opts ...http.CallOption) (rsp *GetCoursePlanReply, err error)
	GetCoursePlanDetail(ctx context.Context, req *GetCoursePlanDetailRequest, opts ...http.CallOption) (rsp *GetCoursePlanDetailReply, err error)
	GetCoursePlanStudent(ctx context.Context, req *GetCoursePlanStudentRequest, opts ...http.CallOption) (rsp *GetCoursePlanStudentReply, err error)
	GetDailyLesson(ctx context.Context, req *GetDailyLessonRequest, opts ...http.CallOption) (rsp *GetDailyLessonReply, err error)
	LeaveDailyLessonStudent(ctx context.Context, req *LeaveDailyLessonStudentRequest, opts ...http.CallOption) (rsp *LeaveDailyLessonStudentReply, err error)
	ListAllCoursePlanDetail(ctx context.Context, req *ListAllCoursePlanDetailRequest, opts ...http.CallOption) (rsp *ListAllCoursePlanDetailReply, err error)
	ListCoursePlan(ctx context.Context, req *ListCoursePlanRequest, opts ...http.CallOption) (rsp *ListCoursePlanReply, err error)
	ListCoursePlanDetail(ctx context.Context, req *ListCoursePlanDetailRequest, opts ...http.CallOption) (rsp *ListCoursePlanDetailReply, err error)
	ListCoursePlanStudent(ctx context.Context, req *ListCoursePlanStudentRequest, opts ...http.CallOption) (rsp *ListCoursePlanStudentReply, err error)
	ListDailyLesson(ctx context.Context, req *ListDailyLessonRequest, opts ...http.CallOption) (rsp *ListDailyLessonReply, err error)
	ListDailyLessonStudent(ctx context.Context, req *ListDailyLessonStudentRequest, opts ...http.CallOption) (rsp *ListDailyLessonStudentReply, err error)
	ReleaseCoursePlan(ctx context.Context, req *ReleaseCoursePlanRequest, opts ...http.CallOption) (rsp *ReleaseCoursePlanReply, err error)
	ScheduleDateForCoursePlan(ctx context.Context, req *ScheduleDateForCoursePlanRequest, opts ...http.CallOption) (rsp *ScheduleDateForCoursePlanReply, err error)
	ScheduleDateForCoursePlanDetail(ctx context.Context, req *ScheduleDateForCoursePlanDetailRequest, opts ...http.CallOption) (rsp *ScheduleDateForCoursePlanDetailReply, err error)
	SignDailyLessonStudent(ctx context.Context, req *SignDailyLessonStudentRequest, opts ...http.CallOption) (rsp *SignDailyLessonStudentReply, err error)
	StartDailyLesson(ctx context.Context, req *StartDailyLessonRequest, opts ...http.CallOption) (rsp *StartDailyLessonReply, err error)
	StopCoursePlanDetail(ctx context.Context, req *StopCoursePlanDetailRequest, opts ...http.CallOption) (rsp *StopCoursePlanDetailReply, err error)
	StopCoursePlanStudent(ctx context.Context, req *StopCoursePlanStudentRequest, opts ...http.CallOption) (rsp *StopCoursePlanStudentReply, err error)
	UpdateCoursePlan(ctx context.Context, req *UpdateCoursePlanRequest, opts ...http.CallOption) (rsp *UpdateCoursePlanReply, err error)
	UpdateCoursePlanDetail(ctx context.Context, req *UpdateCoursePlanDetailRequest, opts ...http.CallOption) (rsp *UpdateCoursePlanDetailReply, err error)
	UpdateCoursePlanStudent(ctx context.Context, req *UpdateCoursePlanStudentRequest, opts ...http.CallOption) (rsp *UpdateCoursePlanStudentReply, err error)
	UpdateDailyLesson(ctx context.Context, req *UpdateDailyLessonRequest, opts ...http.CallOption) (rsp *UpdateDailyLessonReply, err error)
}

type CourseHTTPClientImpl struct {
	cc *http.Client
}

func NewCourseHTTPClient(client *http.Client) CourseHTTPClient {
	return &CourseHTTPClientImpl{client}
}

func (c *CourseHTTPClientImpl) BatchAddCoursePlanDetail(ctx context.Context, in *BatchAddCoursePlanDetailRequest, opts ...http.CallOption) (*BatchAddCoursePlanDetailReply, error) {
	var out BatchAddCoursePlanDetailReply
	pattern := "/course-plan-detail/batch-add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseBatchAddCoursePlanDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) CancelDailyLesson(ctx context.Context, in *CancelDailyLessonRequest, opts ...http.CallOption) (*CancelDailyLessonReply, error) {
	var out CancelDailyLessonReply
	pattern := "/daily-lesson/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseCancelDailyLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) CreateCoursePlan(ctx context.Context, in *CreateCoursePlanRequest, opts ...http.CallOption) (*CreateCoursePlanReply, error) {
	var out CreateCoursePlanReply
	pattern := "/course-plan"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseCreateCoursePlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) CreateCoursePlanDetail(ctx context.Context, in *CreateCoursePlanDetailRequest, opts ...http.CallOption) (*CreateCoursePlanDetailReply, error) {
	var out CreateCoursePlanDetailReply
	pattern := "/course-plan-detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseCreateCoursePlanDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) CreateCoursePlanStudent(ctx context.Context, in *CreateCoursePlanStudentRequest, opts ...http.CallOption) (*CreateCoursePlanStudentReply, error) {
	var out CreateCoursePlanStudentReply
	pattern := "/course-plan-student"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseCreateCoursePlanStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) CreateDailyLesson(ctx context.Context, in *CreateDailyLessonRequest, opts ...http.CallOption) (*CreateDailyLessonReply, error) {
	var out CreateDailyLessonReply
	pattern := "/daily-lesson"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseCreateDailyLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) DeleteCoursePlan(ctx context.Context, in *DeleteCoursePlanRequest, opts ...http.CallOption) (*DeleteCoursePlanReply, error) {
	var out DeleteCoursePlanReply
	pattern := "/course-plan/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseDeleteCoursePlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) DeleteCoursePlanDetail(ctx context.Context, in *DeleteCoursePlanDetailRequest, opts ...http.CallOption) (*DeleteCoursePlanDetailReply, error) {
	var out DeleteCoursePlanDetailReply
	pattern := "/course-plan-detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseDeleteCoursePlanDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) DeleteCoursePlanStudent(ctx context.Context, in *DeleteCoursePlanStudentRequest, opts ...http.CallOption) (*DeleteCoursePlanStudentReply, error) {
	var out DeleteCoursePlanStudentReply
	pattern := "/course-plan-student/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseDeleteCoursePlanStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) DeleteDailyLesson(ctx context.Context, in *DeleteDailyLessonRequest, opts ...http.CallOption) (*DeleteDailyLessonReply, error) {
	var out DeleteDailyLessonReply
	pattern := "/daily-lesson/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseDeleteDailyLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) FinishDailyLesson(ctx context.Context, in *FinishDailyLessonRequest, opts ...http.CallOption) (*FinishDailyLessonReply, error) {
	var out FinishDailyLessonReply
	pattern := "/daily-lesson/finish"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseFinishDailyLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) GetCoursePlan(ctx context.Context, in *GetCoursePlanRequest, opts ...http.CallOption) (*GetCoursePlanReply, error) {
	var out GetCoursePlanReply
	pattern := "/course-plan"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseGetCoursePlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) GetCoursePlanDetail(ctx context.Context, in *GetCoursePlanDetailRequest, opts ...http.CallOption) (*GetCoursePlanDetailReply, error) {
	var out GetCoursePlanDetailReply
	pattern := "/course-plan-detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseGetCoursePlanDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) GetCoursePlanStudent(ctx context.Context, in *GetCoursePlanStudentRequest, opts ...http.CallOption) (*GetCoursePlanStudentReply, error) {
	var out GetCoursePlanStudentReply
	pattern := "/course-plan-student"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseGetCoursePlanStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) GetDailyLesson(ctx context.Context, in *GetDailyLessonRequest, opts ...http.CallOption) (*GetDailyLessonReply, error) {
	var out GetDailyLessonReply
	pattern := "/daily-lesson"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseGetDailyLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) LeaveDailyLessonStudent(ctx context.Context, in *LeaveDailyLessonStudentRequest, opts ...http.CallOption) (*LeaveDailyLessonStudentReply, error) {
	var out LeaveDailyLessonStudentReply
	pattern := "/daily-lesson-student/leave"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseLeaveDailyLessonStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) ListAllCoursePlanDetail(ctx context.Context, in *ListAllCoursePlanDetailRequest, opts ...http.CallOption) (*ListAllCoursePlanDetailReply, error) {
	var out ListAllCoursePlanDetailReply
	pattern := "/course-plan-detail/list-all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseListAllCoursePlanDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) ListCoursePlan(ctx context.Context, in *ListCoursePlanRequest, opts ...http.CallOption) (*ListCoursePlanReply, error) {
	var out ListCoursePlanReply
	pattern := "/course-plan/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseListCoursePlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) ListCoursePlanDetail(ctx context.Context, in *ListCoursePlanDetailRequest, opts ...http.CallOption) (*ListCoursePlanDetailReply, error) {
	var out ListCoursePlanDetailReply
	pattern := "/course-plan-detail/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseListCoursePlanDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) ListCoursePlanStudent(ctx context.Context, in *ListCoursePlanStudentRequest, opts ...http.CallOption) (*ListCoursePlanStudentReply, error) {
	var out ListCoursePlanStudentReply
	pattern := "/course-plan-student/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseListCoursePlanStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) ListDailyLesson(ctx context.Context, in *ListDailyLessonRequest, opts ...http.CallOption) (*ListDailyLessonReply, error) {
	var out ListDailyLessonReply
	pattern := "/daily-lesson/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseListDailyLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) ListDailyLessonStudent(ctx context.Context, in *ListDailyLessonStudentRequest, opts ...http.CallOption) (*ListDailyLessonStudentReply, error) {
	var out ListDailyLessonStudentReply
	pattern := "/daily-lesson-student/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseListDailyLessonStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) ReleaseCoursePlan(ctx context.Context, in *ReleaseCoursePlanRequest, opts ...http.CallOption) (*ReleaseCoursePlanReply, error) {
	var out ReleaseCoursePlanReply
	pattern := "/course-plan/release"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseReleaseCoursePlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) ScheduleDateForCoursePlan(ctx context.Context, in *ScheduleDateForCoursePlanRequest, opts ...http.CallOption) (*ScheduleDateForCoursePlanReply, error) {
	var out ScheduleDateForCoursePlanReply
	pattern := "/course-plan/shedule-date"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseScheduleDateForCoursePlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) ScheduleDateForCoursePlanDetail(ctx context.Context, in *ScheduleDateForCoursePlanDetailRequest, opts ...http.CallOption) (*ScheduleDateForCoursePlanDetailReply, error) {
	var out ScheduleDateForCoursePlanDetailReply
	pattern := "/course-plan-detail/schedule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseScheduleDateForCoursePlanDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) SignDailyLessonStudent(ctx context.Context, in *SignDailyLessonStudentRequest, opts ...http.CallOption) (*SignDailyLessonStudentReply, error) {
	var out SignDailyLessonStudentReply
	pattern := "/daily-lesson-student/sign"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseSignDailyLessonStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) StartDailyLesson(ctx context.Context, in *StartDailyLessonRequest, opts ...http.CallOption) (*StartDailyLessonReply, error) {
	var out StartDailyLessonReply
	pattern := "/daily-lesson/start"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseStartDailyLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) StopCoursePlanDetail(ctx context.Context, in *StopCoursePlanDetailRequest, opts ...http.CallOption) (*StopCoursePlanDetailReply, error) {
	var out StopCoursePlanDetailReply
	pattern := "/course-plan-detail/stop"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseStopCoursePlanDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) StopCoursePlanStudent(ctx context.Context, in *StopCoursePlanStudentRequest, opts ...http.CallOption) (*StopCoursePlanStudentReply, error) {
	var out StopCoursePlanStudentReply
	pattern := "/course-plan-student/stop"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseStopCoursePlanStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) UpdateCoursePlan(ctx context.Context, in *UpdateCoursePlanRequest, opts ...http.CallOption) (*UpdateCoursePlanReply, error) {
	var out UpdateCoursePlanReply
	pattern := "/course-plan/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseUpdateCoursePlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) UpdateCoursePlanDetail(ctx context.Context, in *UpdateCoursePlanDetailRequest, opts ...http.CallOption) (*UpdateCoursePlanDetailReply, error) {
	var out UpdateCoursePlanDetailReply
	pattern := "/course-plan-detail/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseUpdateCoursePlanDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) UpdateCoursePlanStudent(ctx context.Context, in *UpdateCoursePlanStudentRequest, opts ...http.CallOption) (*UpdateCoursePlanStudentReply, error) {
	var out UpdateCoursePlanStudentReply
	pattern := "/course-plan-student/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseUpdateCoursePlanStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) UpdateDailyLesson(ctx context.Context, in *UpdateDailyLessonRequest, opts ...http.CallOption) (*UpdateDailyLessonReply, error) {
	var out UpdateDailyLessonReply
	pattern := "/daily-lesson/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseUpdateDailyLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
