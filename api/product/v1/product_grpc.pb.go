// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: product/v1/product.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Product_CreateSku_FullMethodName            = "/product.v1.Product/CreateSku"
	Product_UpdateSku_FullMethodName            = "/product.v1.Product/UpdateSku"
	Product_DeleteSku_FullMethodName            = "/product.v1.Product/DeleteSku"
	Product_GetSku_FullMethodName               = "/product.v1.Product/GetSku"
	Product_ListSku_FullMethodName              = "/product.v1.Product/ListSku"
	Product_PlaceUpSku_FullMethodName           = "/product.v1.Product/PlaceUpSku"
	Product_TakeDownSku_FullMethodName          = "/product.v1.Product/TakeDownSku"
	Product_CreateCombineSku_FullMethodName     = "/product.v1.Product/CreateCombineSku"
	Product_UpdateCombineSku_FullMethodName     = "/product.v1.Product/UpdateCombineSku"
	Product_DeleteCombineSku_FullMethodName     = "/product.v1.Product/DeleteCombineSku"
	Product_GetCombineSku_FullMethodName        = "/product.v1.Product/GetCombineSku"
	Product_ListCombineSku_FullMethodName       = "/product.v1.Product/ListCombineSku"
	Product_PlaceUpCombineSku_FullMethodName    = "/product.v1.Product/PlaceUpCombineSku"
	Product_TakeDownCombineSku_FullMethodName   = "/product.v1.Product/TakeDownCombineSku"
	Product_CreateCombineSkuItem_FullMethodName = "/product.v1.Product/CreateCombineSkuItem"
	Product_UpdateCombineSkuItem_FullMethodName = "/product.v1.Product/UpdateCombineSkuItem"
	Product_DeleteCombineSkuItem_FullMethodName = "/product.v1.Product/DeleteCombineSkuItem"
	Product_GetCombineSkuItem_FullMethodName    = "/product.v1.Product/GetCombineSkuItem"
	Product_ListCombineSkuItem_FullMethodName   = "/product.v1.Product/ListCombineSkuItem"
)

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	// sku
	CreateSku(ctx context.Context, in *CreateSkuRequest, opts ...grpc.CallOption) (*CreateSkuReply, error)
	UpdateSku(ctx context.Context, in *UpdateSkuRequest, opts ...grpc.CallOption) (*UpdateSkuReply, error)
	DeleteSku(ctx context.Context, in *DeleteSkuRequest, opts ...grpc.CallOption) (*DeleteSkuReply, error)
	GetSku(ctx context.Context, in *GetSkuRequest, opts ...grpc.CallOption) (*GetSkuReply, error)
	ListSku(ctx context.Context, in *ListSkuRequest, opts ...grpc.CallOption) (*ListSkuReply, error)
	PlaceUpSku(ctx context.Context, in *PlaceUpSkuRequest, opts ...grpc.CallOption) (*PlaceUpSkuReply, error)
	TakeDownSku(ctx context.Context, in *TakeDownSkuRequest, opts ...grpc.CallOption) (*TakeDownSkuReply, error)
	// combineSku
	CreateCombineSku(ctx context.Context, in *CreateCombineSkuRequest, opts ...grpc.CallOption) (*CreateCombineSkuReply, error)
	UpdateCombineSku(ctx context.Context, in *UpdateCombineSkuRequest, opts ...grpc.CallOption) (*UpdateCombineSkuReply, error)
	DeleteCombineSku(ctx context.Context, in *DeleteCombineSkuRequest, opts ...grpc.CallOption) (*DeleteCombineSkuReply, error)
	GetCombineSku(ctx context.Context, in *GetCombineSkuRequest, opts ...grpc.CallOption) (*GetCombineSkuReply, error)
	ListCombineSku(ctx context.Context, in *ListCombineSkuRequest, opts ...grpc.CallOption) (*ListCombineSkuReply, error)
	PlaceUpCombineSku(ctx context.Context, in *PlaceUpCombineSkuRequest, opts ...grpc.CallOption) (*PlaceUpCombineSkuReply, error)
	TakeDownCombineSku(ctx context.Context, in *TakeDownCombineSkuRequest, opts ...grpc.CallOption) (*TakeDownCombineSkuReply, error)
	// combineSkuItem
	CreateCombineSkuItem(ctx context.Context, in *CreateCombineSkuItemRequest, opts ...grpc.CallOption) (*CreateCombineSkuItemReply, error)
	UpdateCombineSkuItem(ctx context.Context, in *UpdateCombineSkuItemRequest, opts ...grpc.CallOption) (*UpdateCombineSkuItemReply, error)
	DeleteCombineSkuItem(ctx context.Context, in *DeleteCombineSkuItemRequest, opts ...grpc.CallOption) (*DeleteCombineSkuItemReply, error)
	GetCombineSkuItem(ctx context.Context, in *GetCombineSkuItemRequest, opts ...grpc.CallOption) (*GetCombineSkuItemReply, error)
	ListCombineSkuItem(ctx context.Context, in *ListCombineSkuItemRequest, opts ...grpc.CallOption) (*ListCombineSkuItemReply, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) CreateSku(ctx context.Context, in *CreateSkuRequest, opts ...grpc.CallOption) (*CreateSkuReply, error) {
	out := new(CreateSkuReply)
	err := c.cc.Invoke(ctx, Product_CreateSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateSku(ctx context.Context, in *UpdateSkuRequest, opts ...grpc.CallOption) (*UpdateSkuReply, error) {
	out := new(UpdateSkuReply)
	err := c.cc.Invoke(ctx, Product_UpdateSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteSku(ctx context.Context, in *DeleteSkuRequest, opts ...grpc.CallOption) (*DeleteSkuReply, error) {
	out := new(DeleteSkuReply)
	err := c.cc.Invoke(ctx, Product_DeleteSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSku(ctx context.Context, in *GetSkuRequest, opts ...grpc.CallOption) (*GetSkuReply, error) {
	out := new(GetSkuReply)
	err := c.cc.Invoke(ctx, Product_GetSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListSku(ctx context.Context, in *ListSkuRequest, opts ...grpc.CallOption) (*ListSkuReply, error) {
	out := new(ListSkuReply)
	err := c.cc.Invoke(ctx, Product_ListSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) PlaceUpSku(ctx context.Context, in *PlaceUpSkuRequest, opts ...grpc.CallOption) (*PlaceUpSkuReply, error) {
	out := new(PlaceUpSkuReply)
	err := c.cc.Invoke(ctx, Product_PlaceUpSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) TakeDownSku(ctx context.Context, in *TakeDownSkuRequest, opts ...grpc.CallOption) (*TakeDownSkuReply, error) {
	out := new(TakeDownSkuReply)
	err := c.cc.Invoke(ctx, Product_TakeDownSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateCombineSku(ctx context.Context, in *CreateCombineSkuRequest, opts ...grpc.CallOption) (*CreateCombineSkuReply, error) {
	out := new(CreateCombineSkuReply)
	err := c.cc.Invoke(ctx, Product_CreateCombineSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateCombineSku(ctx context.Context, in *UpdateCombineSkuRequest, opts ...grpc.CallOption) (*UpdateCombineSkuReply, error) {
	out := new(UpdateCombineSkuReply)
	err := c.cc.Invoke(ctx, Product_UpdateCombineSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteCombineSku(ctx context.Context, in *DeleteCombineSkuRequest, opts ...grpc.CallOption) (*DeleteCombineSkuReply, error) {
	out := new(DeleteCombineSkuReply)
	err := c.cc.Invoke(ctx, Product_DeleteCombineSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetCombineSku(ctx context.Context, in *GetCombineSkuRequest, opts ...grpc.CallOption) (*GetCombineSkuReply, error) {
	out := new(GetCombineSkuReply)
	err := c.cc.Invoke(ctx, Product_GetCombineSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListCombineSku(ctx context.Context, in *ListCombineSkuRequest, opts ...grpc.CallOption) (*ListCombineSkuReply, error) {
	out := new(ListCombineSkuReply)
	err := c.cc.Invoke(ctx, Product_ListCombineSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) PlaceUpCombineSku(ctx context.Context, in *PlaceUpCombineSkuRequest, opts ...grpc.CallOption) (*PlaceUpCombineSkuReply, error) {
	out := new(PlaceUpCombineSkuReply)
	err := c.cc.Invoke(ctx, Product_PlaceUpCombineSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) TakeDownCombineSku(ctx context.Context, in *TakeDownCombineSkuRequest, opts ...grpc.CallOption) (*TakeDownCombineSkuReply, error) {
	out := new(TakeDownCombineSkuReply)
	err := c.cc.Invoke(ctx, Product_TakeDownCombineSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateCombineSkuItem(ctx context.Context, in *CreateCombineSkuItemRequest, opts ...grpc.CallOption) (*CreateCombineSkuItemReply, error) {
	out := new(CreateCombineSkuItemReply)
	err := c.cc.Invoke(ctx, Product_CreateCombineSkuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateCombineSkuItem(ctx context.Context, in *UpdateCombineSkuItemRequest, opts ...grpc.CallOption) (*UpdateCombineSkuItemReply, error) {
	out := new(UpdateCombineSkuItemReply)
	err := c.cc.Invoke(ctx, Product_UpdateCombineSkuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteCombineSkuItem(ctx context.Context, in *DeleteCombineSkuItemRequest, opts ...grpc.CallOption) (*DeleteCombineSkuItemReply, error) {
	out := new(DeleteCombineSkuItemReply)
	err := c.cc.Invoke(ctx, Product_DeleteCombineSkuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetCombineSkuItem(ctx context.Context, in *GetCombineSkuItemRequest, opts ...grpc.CallOption) (*GetCombineSkuItemReply, error) {
	out := new(GetCombineSkuItemReply)
	err := c.cc.Invoke(ctx, Product_GetCombineSkuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListCombineSkuItem(ctx context.Context, in *ListCombineSkuItemRequest, opts ...grpc.CallOption) (*ListCombineSkuItemReply, error) {
	out := new(ListCombineSkuItemReply)
	err := c.cc.Invoke(ctx, Product_ListCombineSkuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {
	// sku
	CreateSku(context.Context, *CreateSkuRequest) (*CreateSkuReply, error)
	UpdateSku(context.Context, *UpdateSkuRequest) (*UpdateSkuReply, error)
	DeleteSku(context.Context, *DeleteSkuRequest) (*DeleteSkuReply, error)
	GetSku(context.Context, *GetSkuRequest) (*GetSkuReply, error)
	ListSku(context.Context, *ListSkuRequest) (*ListSkuReply, error)
	PlaceUpSku(context.Context, *PlaceUpSkuRequest) (*PlaceUpSkuReply, error)
	TakeDownSku(context.Context, *TakeDownSkuRequest) (*TakeDownSkuReply, error)
	// combineSku
	CreateCombineSku(context.Context, *CreateCombineSkuRequest) (*CreateCombineSkuReply, error)
	UpdateCombineSku(context.Context, *UpdateCombineSkuRequest) (*UpdateCombineSkuReply, error)
	DeleteCombineSku(context.Context, *DeleteCombineSkuRequest) (*DeleteCombineSkuReply, error)
	GetCombineSku(context.Context, *GetCombineSkuRequest) (*GetCombineSkuReply, error)
	ListCombineSku(context.Context, *ListCombineSkuRequest) (*ListCombineSkuReply, error)
	PlaceUpCombineSku(context.Context, *PlaceUpCombineSkuRequest) (*PlaceUpCombineSkuReply, error)
	TakeDownCombineSku(context.Context, *TakeDownCombineSkuRequest) (*TakeDownCombineSkuReply, error)
	// combineSkuItem
	CreateCombineSkuItem(context.Context, *CreateCombineSkuItemRequest) (*CreateCombineSkuItemReply, error)
	UpdateCombineSkuItem(context.Context, *UpdateCombineSkuItemRequest) (*UpdateCombineSkuItemReply, error)
	DeleteCombineSkuItem(context.Context, *DeleteCombineSkuItemRequest) (*DeleteCombineSkuItemReply, error)
	GetCombineSkuItem(context.Context, *GetCombineSkuItemRequest) (*GetCombineSkuItemReply, error)
	ListCombineSkuItem(context.Context, *ListCombineSkuItemRequest) (*ListCombineSkuItemReply, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) CreateSku(context.Context, *CreateSkuRequest) (*CreateSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSku not implemented")
}
func (UnimplementedProductServer) UpdateSku(context.Context, *UpdateSkuRequest) (*UpdateSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSku not implemented")
}
func (UnimplementedProductServer) DeleteSku(context.Context, *DeleteSkuRequest) (*DeleteSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSku not implemented")
}
func (UnimplementedProductServer) GetSku(context.Context, *GetSkuRequest) (*GetSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSku not implemented")
}
func (UnimplementedProductServer) ListSku(context.Context, *ListSkuRequest) (*ListSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSku not implemented")
}
func (UnimplementedProductServer) PlaceUpSku(context.Context, *PlaceUpSkuRequest) (*PlaceUpSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceUpSku not implemented")
}
func (UnimplementedProductServer) TakeDownSku(context.Context, *TakeDownSkuRequest) (*TakeDownSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeDownSku not implemented")
}
func (UnimplementedProductServer) CreateCombineSku(context.Context, *CreateCombineSkuRequest) (*CreateCombineSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCombineSku not implemented")
}
func (UnimplementedProductServer) UpdateCombineSku(context.Context, *UpdateCombineSkuRequest) (*UpdateCombineSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCombineSku not implemented")
}
func (UnimplementedProductServer) DeleteCombineSku(context.Context, *DeleteCombineSkuRequest) (*DeleteCombineSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCombineSku not implemented")
}
func (UnimplementedProductServer) GetCombineSku(context.Context, *GetCombineSkuRequest) (*GetCombineSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCombineSku not implemented")
}
func (UnimplementedProductServer) ListCombineSku(context.Context, *ListCombineSkuRequest) (*ListCombineSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCombineSku not implemented")
}
func (UnimplementedProductServer) PlaceUpCombineSku(context.Context, *PlaceUpCombineSkuRequest) (*PlaceUpCombineSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceUpCombineSku not implemented")
}
func (UnimplementedProductServer) TakeDownCombineSku(context.Context, *TakeDownCombineSkuRequest) (*TakeDownCombineSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeDownCombineSku not implemented")
}
func (UnimplementedProductServer) CreateCombineSkuItem(context.Context, *CreateCombineSkuItemRequest) (*CreateCombineSkuItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCombineSkuItem not implemented")
}
func (UnimplementedProductServer) UpdateCombineSkuItem(context.Context, *UpdateCombineSkuItemRequest) (*UpdateCombineSkuItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCombineSkuItem not implemented")
}
func (UnimplementedProductServer) DeleteCombineSkuItem(context.Context, *DeleteCombineSkuItemRequest) (*DeleteCombineSkuItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCombineSkuItem not implemented")
}
func (UnimplementedProductServer) GetCombineSkuItem(context.Context, *GetCombineSkuItemRequest) (*GetCombineSkuItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCombineSkuItem not implemented")
}
func (UnimplementedProductServer) ListCombineSkuItem(context.Context, *ListCombineSkuItemRequest) (*ListCombineSkuItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCombineSkuItem not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_CreateSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateSku(ctx, req.(*CreateSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateSku(ctx, req.(*UpdateSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeleteSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteSku(ctx, req.(*DeleteSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSku(ctx, req.(*GetSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListSku(ctx, req.(*ListSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_PlaceUpSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceUpSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).PlaceUpSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_PlaceUpSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).PlaceUpSku(ctx, req.(*PlaceUpSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_TakeDownSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeDownSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).TakeDownSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_TakeDownSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).TakeDownSku(ctx, req.(*TakeDownSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateCombineSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCombineSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateCombineSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateCombineSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateCombineSku(ctx, req.(*CreateCombineSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateCombineSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCombineSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateCombineSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateCombineSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateCombineSku(ctx, req.(*UpdateCombineSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteCombineSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCombineSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteCombineSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeleteCombineSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteCombineSku(ctx, req.(*DeleteCombineSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetCombineSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCombineSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetCombineSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetCombineSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetCombineSku(ctx, req.(*GetCombineSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListCombineSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCombineSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListCombineSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListCombineSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListCombineSku(ctx, req.(*ListCombineSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_PlaceUpCombineSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceUpCombineSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).PlaceUpCombineSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_PlaceUpCombineSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).PlaceUpCombineSku(ctx, req.(*PlaceUpCombineSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_TakeDownCombineSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeDownCombineSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).TakeDownCombineSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_TakeDownCombineSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).TakeDownCombineSku(ctx, req.(*TakeDownCombineSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateCombineSkuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCombineSkuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateCombineSkuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateCombineSkuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateCombineSkuItem(ctx, req.(*CreateCombineSkuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateCombineSkuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCombineSkuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateCombineSkuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateCombineSkuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateCombineSkuItem(ctx, req.(*UpdateCombineSkuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteCombineSkuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCombineSkuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteCombineSkuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeleteCombineSkuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteCombineSkuItem(ctx, req.(*DeleteCombineSkuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetCombineSkuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCombineSkuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetCombineSkuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetCombineSkuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetCombineSkuItem(ctx, req.(*GetCombineSkuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListCombineSkuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCombineSkuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListCombineSkuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListCombineSkuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListCombineSkuItem(ctx, req.(*ListCombineSkuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.v1.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSku",
			Handler:    _Product_CreateSku_Handler,
		},
		{
			MethodName: "UpdateSku",
			Handler:    _Product_UpdateSku_Handler,
		},
		{
			MethodName: "DeleteSku",
			Handler:    _Product_DeleteSku_Handler,
		},
		{
			MethodName: "GetSku",
			Handler:    _Product_GetSku_Handler,
		},
		{
			MethodName: "ListSku",
			Handler:    _Product_ListSku_Handler,
		},
		{
			MethodName: "PlaceUpSku",
			Handler:    _Product_PlaceUpSku_Handler,
		},
		{
			MethodName: "TakeDownSku",
			Handler:    _Product_TakeDownSku_Handler,
		},
		{
			MethodName: "CreateCombineSku",
			Handler:    _Product_CreateCombineSku_Handler,
		},
		{
			MethodName: "UpdateCombineSku",
			Handler:    _Product_UpdateCombineSku_Handler,
		},
		{
			MethodName: "DeleteCombineSku",
			Handler:    _Product_DeleteCombineSku_Handler,
		},
		{
			MethodName: "GetCombineSku",
			Handler:    _Product_GetCombineSku_Handler,
		},
		{
			MethodName: "ListCombineSku",
			Handler:    _Product_ListCombineSku_Handler,
		},
		{
			MethodName: "PlaceUpCombineSku",
			Handler:    _Product_PlaceUpCombineSku_Handler,
		},
		{
			MethodName: "TakeDownCombineSku",
			Handler:    _Product_TakeDownCombineSku_Handler,
		},
		{
			MethodName: "CreateCombineSkuItem",
			Handler:    _Product_CreateCombineSkuItem_Handler,
		},
		{
			MethodName: "UpdateCombineSkuItem",
			Handler:    _Product_UpdateCombineSkuItem_Handler,
		},
		{
			MethodName: "DeleteCombineSkuItem",
			Handler:    _Product_DeleteCombineSkuItem_Handler,
		},
		{
			MethodName: "GetCombineSkuItem",
			Handler:    _Product_GetCombineSkuItem_Handler,
		},
		{
			MethodName: "ListCombineSkuItem",
			Handler:    _Product_ListCombineSkuItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/v1/product.proto",
}
