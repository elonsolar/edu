// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: product/v1/product.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProductCreateCombineSku = "/product.v1.Product/CreateCombineSku"
const OperationProductCreateCombineSkuItem = "/product.v1.Product/CreateCombineSkuItem"
const OperationProductCreateSku = "/product.v1.Product/CreateSku"
const OperationProductDeleteCombineSku = "/product.v1.Product/DeleteCombineSku"
const OperationProductDeleteCombineSkuItem = "/product.v1.Product/DeleteCombineSkuItem"
const OperationProductDeleteSku = "/product.v1.Product/DeleteSku"
const OperationProductGetCombineSku = "/product.v1.Product/GetCombineSku"
const OperationProductGetCombineSkuItem = "/product.v1.Product/GetCombineSkuItem"
const OperationProductGetSku = "/product.v1.Product/GetSku"
const OperationProductListCombineSku = "/product.v1.Product/ListCombineSku"
const OperationProductListCombineSkuItem = "/product.v1.Product/ListCombineSkuItem"
const OperationProductListSku = "/product.v1.Product/ListSku"
const OperationProductPlaceUpCombineSku = "/product.v1.Product/PlaceUpCombineSku"
const OperationProductPlaceUpSku = "/product.v1.Product/PlaceUpSku"
const OperationProductTakeDownCombineSku = "/product.v1.Product/TakeDownCombineSku"
const OperationProductTakeDownSku = "/product.v1.Product/TakeDownSku"
const OperationProductUpdateCombineSku = "/product.v1.Product/UpdateCombineSku"
const OperationProductUpdateCombineSkuItem = "/product.v1.Product/UpdateCombineSkuItem"
const OperationProductUpdateSku = "/product.v1.Product/UpdateSku"

type ProductHTTPServer interface {
	// CreateCombineSku combineSku
	CreateCombineSku(context.Context, *CreateCombineSkuRequest) (*CreateCombineSkuReply, error)
	// CreateCombineSkuItem combineSkuItem
	CreateCombineSkuItem(context.Context, *CreateCombineSkuItemRequest) (*CreateCombineSkuItemReply, error)
	// CreateSku sku
	CreateSku(context.Context, *CreateSkuRequest) (*CreateSkuReply, error)
	DeleteCombineSku(context.Context, *DeleteCombineSkuRequest) (*DeleteCombineSkuReply, error)
	DeleteCombineSkuItem(context.Context, *DeleteCombineSkuItemRequest) (*DeleteCombineSkuItemReply, error)
	DeleteSku(context.Context, *DeleteSkuRequest) (*DeleteSkuReply, error)
	GetCombineSku(context.Context, *GetCombineSkuRequest) (*GetCombineSkuReply, error)
	GetCombineSkuItem(context.Context, *GetCombineSkuItemRequest) (*GetCombineSkuItemReply, error)
	GetSku(context.Context, *GetSkuRequest) (*GetSkuReply, error)
	ListCombineSku(context.Context, *ListCombineSkuRequest) (*ListCombineSkuReply, error)
	ListCombineSkuItem(context.Context, *ListCombineSkuItemRequest) (*ListCombineSkuItemReply, error)
	ListSku(context.Context, *ListSkuRequest) (*ListSkuReply, error)
	PlaceUpCombineSku(context.Context, *PlaceUpCombineSkuRequest) (*PlaceUpCombineSkuReply, error)
	PlaceUpSku(context.Context, *PlaceUpSkuRequest) (*PlaceUpSkuReply, error)
	TakeDownCombineSku(context.Context, *TakeDownCombineSkuRequest) (*TakeDownCombineSkuReply, error)
	TakeDownSku(context.Context, *TakeDownSkuRequest) (*TakeDownSkuReply, error)
	UpdateCombineSku(context.Context, *UpdateCombineSkuRequest) (*UpdateCombineSkuReply, error)
	UpdateCombineSkuItem(context.Context, *UpdateCombineSkuItemRequest) (*UpdateCombineSkuItemReply, error)
	UpdateSku(context.Context, *UpdateSkuRequest) (*UpdateSkuReply, error)
}

func RegisterProductHTTPServer(s *http.Server, srv ProductHTTPServer) {
	r := s.Route("/")
	r.POST("/sku", _Product_CreateSku0_HTTP_Handler(srv))
	r.PUT("/sku/{id}", _Product_UpdateSku0_HTTP_Handler(srv))
	r.DELETE("/sku/{id}", _Product_DeleteSku0_HTTP_Handler(srv))
	r.GET("/sku", _Product_GetSku0_HTTP_Handler(srv))
	r.GET("/sku/page", _Product_ListSku0_HTTP_Handler(srv))
	r.POST("/sku/place-up", _Product_PlaceUpSku0_HTTP_Handler(srv))
	r.POST("/sku/take-down", _Product_TakeDownSku0_HTTP_Handler(srv))
	r.POST("/combine-sku", _Product_CreateCombineSku0_HTTP_Handler(srv))
	r.PUT("/combine-sku/{id}", _Product_UpdateCombineSku0_HTTP_Handler(srv))
	r.DELETE("/combine-sku/{id}", _Product_DeleteCombineSku0_HTTP_Handler(srv))
	r.GET("/combine-sku", _Product_GetCombineSku0_HTTP_Handler(srv))
	r.GET("/combine-sku/page", _Product_ListCombineSku0_HTTP_Handler(srv))
	r.POST("/combine-sku/place-up", _Product_PlaceUpCombineSku0_HTTP_Handler(srv))
	r.POST("/combine-sku/take-down", _Product_TakeDownCombineSku0_HTTP_Handler(srv))
	r.POST("/combine-sku-item", _Product_CreateCombineSkuItem0_HTTP_Handler(srv))
	r.PUT("/combine-sku-item/{id}", _Product_UpdateCombineSkuItem0_HTTP_Handler(srv))
	r.DELETE("/combine-sku-item/{id}", _Product_DeleteCombineSkuItem0_HTTP_Handler(srv))
	r.GET("/combine-sku-item", _Product_GetCombineSkuItem0_HTTP_Handler(srv))
	r.GET("/combine-sku-item/page", _Product_ListCombineSkuItem0_HTTP_Handler(srv))
}

func _Product_CreateSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSkuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCreateSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSku(ctx, req.(*CreateSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_UpdateSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSkuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductUpdateSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSku(ctx, req.(*UpdateSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_DeleteSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSkuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductDeleteSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSku(ctx, req.(*DeleteSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_GetSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSkuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductGetSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSku(ctx, req.(*GetSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_ListSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSkuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductListSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSku(ctx, req.(*ListSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_PlaceUpSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlaceUpSkuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductPlaceUpSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlaceUpSku(ctx, req.(*PlaceUpSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlaceUpSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_TakeDownSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TakeDownSkuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductTakeDownSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TakeDownSku(ctx, req.(*TakeDownSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TakeDownSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_CreateCombineSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCombineSkuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCreateCombineSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCombineSku(ctx, req.(*CreateCombineSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCombineSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_UpdateCombineSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCombineSkuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductUpdateCombineSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCombineSku(ctx, req.(*UpdateCombineSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCombineSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_DeleteCombineSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCombineSkuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductDeleteCombineSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCombineSku(ctx, req.(*DeleteCombineSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCombineSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_GetCombineSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCombineSkuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductGetCombineSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCombineSku(ctx, req.(*GetCombineSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCombineSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_ListCombineSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCombineSkuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductListCombineSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCombineSku(ctx, req.(*ListCombineSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCombineSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_PlaceUpCombineSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlaceUpCombineSkuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductPlaceUpCombineSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlaceUpCombineSku(ctx, req.(*PlaceUpCombineSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlaceUpCombineSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_TakeDownCombineSku0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TakeDownCombineSkuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductTakeDownCombineSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TakeDownCombineSku(ctx, req.(*TakeDownCombineSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TakeDownCombineSkuReply)
		return ctx.Result(200, reply)
	}
}

func _Product_CreateCombineSkuItem0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCombineSkuItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCreateCombineSkuItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCombineSkuItem(ctx, req.(*CreateCombineSkuItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCombineSkuItemReply)
		return ctx.Result(200, reply)
	}
}

func _Product_UpdateCombineSkuItem0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCombineSkuItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductUpdateCombineSkuItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCombineSkuItem(ctx, req.(*UpdateCombineSkuItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCombineSkuItemReply)
		return ctx.Result(200, reply)
	}
}

func _Product_DeleteCombineSkuItem0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCombineSkuItemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductDeleteCombineSkuItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCombineSkuItem(ctx, req.(*DeleteCombineSkuItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCombineSkuItemReply)
		return ctx.Result(200, reply)
	}
}

func _Product_GetCombineSkuItem0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCombineSkuItemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductGetCombineSkuItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCombineSkuItem(ctx, req.(*GetCombineSkuItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCombineSkuItemReply)
		return ctx.Result(200, reply)
	}
}

func _Product_ListCombineSkuItem0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCombineSkuItemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductListCombineSkuItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCombineSkuItem(ctx, req.(*ListCombineSkuItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCombineSkuItemReply)
		return ctx.Result(200, reply)
	}
}

type ProductHTTPClient interface {
	CreateCombineSku(ctx context.Context, req *CreateCombineSkuRequest, opts ...http.CallOption) (rsp *CreateCombineSkuReply, err error)
	CreateCombineSkuItem(ctx context.Context, req *CreateCombineSkuItemRequest, opts ...http.CallOption) (rsp *CreateCombineSkuItemReply, err error)
	CreateSku(ctx context.Context, req *CreateSkuRequest, opts ...http.CallOption) (rsp *CreateSkuReply, err error)
	DeleteCombineSku(ctx context.Context, req *DeleteCombineSkuRequest, opts ...http.CallOption) (rsp *DeleteCombineSkuReply, err error)
	DeleteCombineSkuItem(ctx context.Context, req *DeleteCombineSkuItemRequest, opts ...http.CallOption) (rsp *DeleteCombineSkuItemReply, err error)
	DeleteSku(ctx context.Context, req *DeleteSkuRequest, opts ...http.CallOption) (rsp *DeleteSkuReply, err error)
	GetCombineSku(ctx context.Context, req *GetCombineSkuRequest, opts ...http.CallOption) (rsp *GetCombineSkuReply, err error)
	GetCombineSkuItem(ctx context.Context, req *GetCombineSkuItemRequest, opts ...http.CallOption) (rsp *GetCombineSkuItemReply, err error)
	GetSku(ctx context.Context, req *GetSkuRequest, opts ...http.CallOption) (rsp *GetSkuReply, err error)
	ListCombineSku(ctx context.Context, req *ListCombineSkuRequest, opts ...http.CallOption) (rsp *ListCombineSkuReply, err error)
	ListCombineSkuItem(ctx context.Context, req *ListCombineSkuItemRequest, opts ...http.CallOption) (rsp *ListCombineSkuItemReply, err error)
	ListSku(ctx context.Context, req *ListSkuRequest, opts ...http.CallOption) (rsp *ListSkuReply, err error)
	PlaceUpCombineSku(ctx context.Context, req *PlaceUpCombineSkuRequest, opts ...http.CallOption) (rsp *PlaceUpCombineSkuReply, err error)
	PlaceUpSku(ctx context.Context, req *PlaceUpSkuRequest, opts ...http.CallOption) (rsp *PlaceUpSkuReply, err error)
	TakeDownCombineSku(ctx context.Context, req *TakeDownCombineSkuRequest, opts ...http.CallOption) (rsp *TakeDownCombineSkuReply, err error)
	TakeDownSku(ctx context.Context, req *TakeDownSkuRequest, opts ...http.CallOption) (rsp *TakeDownSkuReply, err error)
	UpdateCombineSku(ctx context.Context, req *UpdateCombineSkuRequest, opts ...http.CallOption) (rsp *UpdateCombineSkuReply, err error)
	UpdateCombineSkuItem(ctx context.Context, req *UpdateCombineSkuItemRequest, opts ...http.CallOption) (rsp *UpdateCombineSkuItemReply, err error)
	UpdateSku(ctx context.Context, req *UpdateSkuRequest, opts ...http.CallOption) (rsp *UpdateSkuReply, err error)
}

type ProductHTTPClientImpl struct {
	cc *http.Client
}

func NewProductHTTPClient(client *http.Client) ProductHTTPClient {
	return &ProductHTTPClientImpl{client}
}

func (c *ProductHTTPClientImpl) CreateCombineSku(ctx context.Context, in *CreateCombineSkuRequest, opts ...http.CallOption) (*CreateCombineSkuReply, error) {
	var out CreateCombineSkuReply
	pattern := "/combine-sku"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductCreateCombineSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) CreateCombineSkuItem(ctx context.Context, in *CreateCombineSkuItemRequest, opts ...http.CallOption) (*CreateCombineSkuItemReply, error) {
	var out CreateCombineSkuItemReply
	pattern := "/combine-sku-item"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductCreateCombineSkuItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) CreateSku(ctx context.Context, in *CreateSkuRequest, opts ...http.CallOption) (*CreateSkuReply, error) {
	var out CreateSkuReply
	pattern := "/sku"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductCreateSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) DeleteCombineSku(ctx context.Context, in *DeleteCombineSkuRequest, opts ...http.CallOption) (*DeleteCombineSkuReply, error) {
	var out DeleteCombineSkuReply
	pattern := "/combine-sku/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductDeleteCombineSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) DeleteCombineSkuItem(ctx context.Context, in *DeleteCombineSkuItemRequest, opts ...http.CallOption) (*DeleteCombineSkuItemReply, error) {
	var out DeleteCombineSkuItemReply
	pattern := "/combine-sku-item/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductDeleteCombineSkuItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) DeleteSku(ctx context.Context, in *DeleteSkuRequest, opts ...http.CallOption) (*DeleteSkuReply, error) {
	var out DeleteSkuReply
	pattern := "/sku/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductDeleteSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) GetCombineSku(ctx context.Context, in *GetCombineSkuRequest, opts ...http.CallOption) (*GetCombineSkuReply, error) {
	var out GetCombineSkuReply
	pattern := "/combine-sku"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductGetCombineSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) GetCombineSkuItem(ctx context.Context, in *GetCombineSkuItemRequest, opts ...http.CallOption) (*GetCombineSkuItemReply, error) {
	var out GetCombineSkuItemReply
	pattern := "/combine-sku-item"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductGetCombineSkuItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) GetSku(ctx context.Context, in *GetSkuRequest, opts ...http.CallOption) (*GetSkuReply, error) {
	var out GetSkuReply
	pattern := "/sku"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductGetSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) ListCombineSku(ctx context.Context, in *ListCombineSkuRequest, opts ...http.CallOption) (*ListCombineSkuReply, error) {
	var out ListCombineSkuReply
	pattern := "/combine-sku/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductListCombineSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) ListCombineSkuItem(ctx context.Context, in *ListCombineSkuItemRequest, opts ...http.CallOption) (*ListCombineSkuItemReply, error) {
	var out ListCombineSkuItemReply
	pattern := "/combine-sku-item/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductListCombineSkuItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) ListSku(ctx context.Context, in *ListSkuRequest, opts ...http.CallOption) (*ListSkuReply, error) {
	var out ListSkuReply
	pattern := "/sku/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductListSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) PlaceUpCombineSku(ctx context.Context, in *PlaceUpCombineSkuRequest, opts ...http.CallOption) (*PlaceUpCombineSkuReply, error) {
	var out PlaceUpCombineSkuReply
	pattern := "/combine-sku/place-up"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductPlaceUpCombineSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) PlaceUpSku(ctx context.Context, in *PlaceUpSkuRequest, opts ...http.CallOption) (*PlaceUpSkuReply, error) {
	var out PlaceUpSkuReply
	pattern := "/sku/place-up"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductPlaceUpSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) TakeDownCombineSku(ctx context.Context, in *TakeDownCombineSkuRequest, opts ...http.CallOption) (*TakeDownCombineSkuReply, error) {
	var out TakeDownCombineSkuReply
	pattern := "/combine-sku/take-down"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductTakeDownCombineSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) TakeDownSku(ctx context.Context, in *TakeDownSkuRequest, opts ...http.CallOption) (*TakeDownSkuReply, error) {
	var out TakeDownSkuReply
	pattern := "/sku/take-down"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductTakeDownSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) UpdateCombineSku(ctx context.Context, in *UpdateCombineSkuRequest, opts ...http.CallOption) (*UpdateCombineSkuReply, error) {
	var out UpdateCombineSkuReply
	pattern := "/combine-sku/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductUpdateCombineSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) UpdateCombineSkuItem(ctx context.Context, in *UpdateCombineSkuItemRequest, opts ...http.CallOption) (*UpdateCombineSkuItemReply, error) {
	var out UpdateCombineSkuItemReply
	pattern := "/combine-sku-item/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductUpdateCombineSkuItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) UpdateSku(ctx context.Context, in *UpdateSkuRequest, opts ...http.CallOption) (*UpdateSkuReply, error) {
	var out UpdateSkuReply
	pattern := "/sku/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductUpdateSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
