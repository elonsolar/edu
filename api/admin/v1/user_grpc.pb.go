// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: admin/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dossier_CreateTenant_FullMethodName            = "/api.admin.v1.Dossier/CreateTenant"
	Dossier_UpdateTenant_FullMethodName            = "/api.admin.v1.Dossier/UpdateTenant"
	Dossier_DeleteTenant_FullMethodName            = "/api.admin.v1.Dossier/DeleteTenant"
	Dossier_GetTenant_FullMethodName               = "/api.admin.v1.Dossier/GetTenant"
	Dossier_ListTenant_FullMethodName              = "/api.admin.v1.Dossier/ListTenant"
	Dossier_GetTenantPermissionTree_FullMethodName = "/api.admin.v1.Dossier/GetTenantPermissionTree"
	Dossier_GetTenantPermission_FullMethodName     = "/api.admin.v1.Dossier/GetTenantPermission"
	Dossier_SaveTenantPermission_FullMethodName    = "/api.admin.v1.Dossier/SaveTenantPermission"
	Dossier_CreateUser_FullMethodName              = "/api.admin.v1.Dossier/CreateUser"
	Dossier_UpdateUser_FullMethodName              = "/api.admin.v1.Dossier/UpdateUser"
	Dossier_DeleteUser_FullMethodName              = "/api.admin.v1.Dossier/DeleteUser"
	Dossier_GetUser_FullMethodName                 = "/api.admin.v1.Dossier/GetUser"
	Dossier_ListUser_FullMethodName                = "/api.admin.v1.Dossier/ListUser"
	Dossier_ChangPassword_FullMethodName           = "/api.admin.v1.Dossier/ChangPassword"
	Dossier_CreateTeacher_FullMethodName           = "/api.admin.v1.Dossier/CreateTeacher"
	Dossier_UpdateTeacher_FullMethodName           = "/api.admin.v1.Dossier/UpdateTeacher"
	Dossier_DeleteTeacher_FullMethodName           = "/api.admin.v1.Dossier/DeleteTeacher"
	Dossier_GetTeacher_FullMethodName              = "/api.admin.v1.Dossier/GetTeacher"
	Dossier_ListTeacher_FullMethodName             = "/api.admin.v1.Dossier/ListTeacher"
	Dossier_CreateRoom_FullMethodName              = "/api.admin.v1.Dossier/CreateRoom"
	Dossier_UpdateRoom_FullMethodName              = "/api.admin.v1.Dossier/UpdateRoom"
	Dossier_DeleteRoom_FullMethodName              = "/api.admin.v1.Dossier/DeleteRoom"
	Dossier_GetRoom_FullMethodName                 = "/api.admin.v1.Dossier/GetRoom"
	Dossier_ListRoom_FullMethodName                = "/api.admin.v1.Dossier/ListRoom"
	Dossier_CreateSubject_FullMethodName           = "/api.admin.v1.Dossier/CreateSubject"
	Dossier_UpdateSubject_FullMethodName           = "/api.admin.v1.Dossier/UpdateSubject"
	Dossier_DeleteSubject_FullMethodName           = "/api.admin.v1.Dossier/DeleteSubject"
	Dossier_GetSubject_FullMethodName              = "/api.admin.v1.Dossier/GetSubject"
	Dossier_ListSubject_FullMethodName             = "/api.admin.v1.Dossier/ListSubject"
)

// DossierClient is the client API for Dossier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DossierClient interface {
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantReply, error)
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantReply, error)
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantReply, error)
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantReply, error)
	ListTenant(ctx context.Context, in *ListTenantRequest, opts ...grpc.CallOption) (*ListTenantReply, error)
	GetTenantPermissionTree(ctx context.Context, in *GetTenantPermissionTreeRequest, opts ...grpc.CallOption) (*GetTenantPermissionTreeReply, error)
	GetTenantPermission(ctx context.Context, in *GetTenantPermissionRequest, opts ...grpc.CallOption) (*GetTenantPermissionReply, error)
	SaveTenantPermission(ctx context.Context, in *SaveTenantPermissionRequest, opts ...grpc.CallOption) (*SaveTenantPermissionReply, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserReply, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error)
	ChangPassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordReply, error)
	// teacher
	CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*CreateTeacherReply, error)
	UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...grpc.CallOption) (*UpdateTeacherReply, error)
	DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, opts ...grpc.CallOption) (*DeleteTeacherReply, error)
	GetTeacher(ctx context.Context, in *GetTeacherRequest, opts ...grpc.CallOption) (*GetTeacherReply, error)
	ListTeacher(ctx context.Context, in *ListTeacherRequest, opts ...grpc.CallOption) (*ListTeacherReply, error)
	// classroom
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomReply, error)
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomReply, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomReply, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomReply, error)
	ListRoom(ctx context.Context, in *ListRoomRequest, opts ...grpc.CallOption) (*ListRoomReply, error)
	// subject
	CreateSubject(ctx context.Context, in *CreateSubjectRequest, opts ...grpc.CallOption) (*CreateSubjectReply, error)
	UpdateSubject(ctx context.Context, in *UpdateSubjectRequest, opts ...grpc.CallOption) (*UpdateSubjectReply, error)
	DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*DeleteSubjectReply, error)
	GetSubject(ctx context.Context, in *GetSubjectRequest, opts ...grpc.CallOption) (*GetSubjectReply, error)
	ListSubject(ctx context.Context, in *ListSubjectRequest, opts ...grpc.CallOption) (*ListSubjectReply, error)
}

type dossierClient struct {
	cc grpc.ClientConnInterface
}

func NewDossierClient(cc grpc.ClientConnInterface) DossierClient {
	return &dossierClient{cc}
}

func (c *dossierClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantReply, error) {
	out := new(CreateTenantReply)
	err := c.cc.Invoke(ctx, Dossier_CreateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantReply, error) {
	out := new(UpdateTenantReply)
	err := c.cc.Invoke(ctx, Dossier_UpdateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantReply, error) {
	out := new(DeleteTenantReply)
	err := c.cc.Invoke(ctx, Dossier_DeleteTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantReply, error) {
	out := new(GetTenantReply)
	err := c.cc.Invoke(ctx, Dossier_GetTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) ListTenant(ctx context.Context, in *ListTenantRequest, opts ...grpc.CallOption) (*ListTenantReply, error) {
	out := new(ListTenantReply)
	err := c.cc.Invoke(ctx, Dossier_ListTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) GetTenantPermissionTree(ctx context.Context, in *GetTenantPermissionTreeRequest, opts ...grpc.CallOption) (*GetTenantPermissionTreeReply, error) {
	out := new(GetTenantPermissionTreeReply)
	err := c.cc.Invoke(ctx, Dossier_GetTenantPermissionTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) GetTenantPermission(ctx context.Context, in *GetTenantPermissionRequest, opts ...grpc.CallOption) (*GetTenantPermissionReply, error) {
	out := new(GetTenantPermissionReply)
	err := c.cc.Invoke(ctx, Dossier_GetTenantPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) SaveTenantPermission(ctx context.Context, in *SaveTenantPermissionRequest, opts ...grpc.CallOption) (*SaveTenantPermissionReply, error) {
	out := new(SaveTenantPermissionReply)
	err := c.cc.Invoke(ctx, Dossier_SaveTenantPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error) {
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, Dossier_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	out := new(UpdateUserReply)
	err := c.cc.Invoke(ctx, Dossier_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserReply, error) {
	out := new(DeleteUserReply)
	err := c.cc.Invoke(ctx, Dossier_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, Dossier_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, Dossier_ListUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) ChangPassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordReply, error) {
	out := new(ChangePasswordReply)
	err := c.cc.Invoke(ctx, Dossier_ChangPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*CreateTeacherReply, error) {
	out := new(CreateTeacherReply)
	err := c.cc.Invoke(ctx, Dossier_CreateTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...grpc.CallOption) (*UpdateTeacherReply, error) {
	out := new(UpdateTeacherReply)
	err := c.cc.Invoke(ctx, Dossier_UpdateTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, opts ...grpc.CallOption) (*DeleteTeacherReply, error) {
	out := new(DeleteTeacherReply)
	err := c.cc.Invoke(ctx, Dossier_DeleteTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) GetTeacher(ctx context.Context, in *GetTeacherRequest, opts ...grpc.CallOption) (*GetTeacherReply, error) {
	out := new(GetTeacherReply)
	err := c.cc.Invoke(ctx, Dossier_GetTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) ListTeacher(ctx context.Context, in *ListTeacherRequest, opts ...grpc.CallOption) (*ListTeacherReply, error) {
	out := new(ListTeacherReply)
	err := c.cc.Invoke(ctx, Dossier_ListTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomReply, error) {
	out := new(CreateRoomReply)
	err := c.cc.Invoke(ctx, Dossier_CreateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomReply, error) {
	out := new(UpdateRoomReply)
	err := c.cc.Invoke(ctx, Dossier_UpdateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomReply, error) {
	out := new(DeleteRoomReply)
	err := c.cc.Invoke(ctx, Dossier_DeleteRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomReply, error) {
	out := new(GetRoomReply)
	err := c.cc.Invoke(ctx, Dossier_GetRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) ListRoom(ctx context.Context, in *ListRoomRequest, opts ...grpc.CallOption) (*ListRoomReply, error) {
	out := new(ListRoomReply)
	err := c.cc.Invoke(ctx, Dossier_ListRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) CreateSubject(ctx context.Context, in *CreateSubjectRequest, opts ...grpc.CallOption) (*CreateSubjectReply, error) {
	out := new(CreateSubjectReply)
	err := c.cc.Invoke(ctx, Dossier_CreateSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) UpdateSubject(ctx context.Context, in *UpdateSubjectRequest, opts ...grpc.CallOption) (*UpdateSubjectReply, error) {
	out := new(UpdateSubjectReply)
	err := c.cc.Invoke(ctx, Dossier_UpdateSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*DeleteSubjectReply, error) {
	out := new(DeleteSubjectReply)
	err := c.cc.Invoke(ctx, Dossier_DeleteSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) GetSubject(ctx context.Context, in *GetSubjectRequest, opts ...grpc.CallOption) (*GetSubjectReply, error) {
	out := new(GetSubjectReply)
	err := c.cc.Invoke(ctx, Dossier_GetSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dossierClient) ListSubject(ctx context.Context, in *ListSubjectRequest, opts ...grpc.CallOption) (*ListSubjectReply, error) {
	out := new(ListSubjectReply)
	err := c.cc.Invoke(ctx, Dossier_ListSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DossierServer is the server API for Dossier service.
// All implementations must embed UnimplementedDossierServer
// for forward compatibility
type DossierServer interface {
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantReply, error)
	UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantReply, error)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantReply, error)
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantReply, error)
	ListTenant(context.Context, *ListTenantRequest) (*ListTenantReply, error)
	GetTenantPermissionTree(context.Context, *GetTenantPermissionTreeRequest) (*GetTenantPermissionTreeReply, error)
	GetTenantPermission(context.Context, *GetTenantPermissionRequest) (*GetTenantPermissionReply, error)
	SaveTenantPermission(context.Context, *SaveTenantPermissionRequest) (*SaveTenantPermissionReply, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	ChangPassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error)
	// teacher
	CreateTeacher(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error)
	UpdateTeacher(context.Context, *UpdateTeacherRequest) (*UpdateTeacherReply, error)
	DeleteTeacher(context.Context, *DeleteTeacherRequest) (*DeleteTeacherReply, error)
	GetTeacher(context.Context, *GetTeacherRequest) (*GetTeacherReply, error)
	ListTeacher(context.Context, *ListTeacherRequest) (*ListTeacherReply, error)
	// classroom
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomReply, error)
	UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomReply, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomReply, error)
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomReply, error)
	ListRoom(context.Context, *ListRoomRequest) (*ListRoomReply, error)
	// subject
	CreateSubject(context.Context, *CreateSubjectRequest) (*CreateSubjectReply, error)
	UpdateSubject(context.Context, *UpdateSubjectRequest) (*UpdateSubjectReply, error)
	DeleteSubject(context.Context, *DeleteSubjectRequest) (*DeleteSubjectReply, error)
	GetSubject(context.Context, *GetSubjectRequest) (*GetSubjectReply, error)
	ListSubject(context.Context, *ListSubjectRequest) (*ListSubjectReply, error)
	mustEmbedUnimplementedDossierServer()
}

// UnimplementedDossierServer must be embedded to have forward compatible implementations.
type UnimplementedDossierServer struct {
}

func (UnimplementedDossierServer) CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedDossierServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedDossierServer) DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedDossierServer) GetTenant(context.Context, *GetTenantRequest) (*GetTenantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedDossierServer) ListTenant(context.Context, *ListTenantRequest) (*ListTenantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenant not implemented")
}
func (UnimplementedDossierServer) GetTenantPermissionTree(context.Context, *GetTenantPermissionTreeRequest) (*GetTenantPermissionTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantPermissionTree not implemented")
}
func (UnimplementedDossierServer) GetTenantPermission(context.Context, *GetTenantPermissionRequest) (*GetTenantPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantPermission not implemented")
}
func (UnimplementedDossierServer) SaveTenantPermission(context.Context, *SaveTenantPermissionRequest) (*SaveTenantPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTenantPermission not implemented")
}
func (UnimplementedDossierServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDossierServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDossierServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedDossierServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedDossierServer) ListUser(context.Context, *ListUserRequest) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedDossierServer) ChangPassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangPassword not implemented")
}
func (UnimplementedDossierServer) CreateTeacher(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeacher not implemented")
}
func (UnimplementedDossierServer) UpdateTeacher(context.Context, *UpdateTeacherRequest) (*UpdateTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeacher not implemented")
}
func (UnimplementedDossierServer) DeleteTeacher(context.Context, *DeleteTeacherRequest) (*DeleteTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeacher not implemented")
}
func (UnimplementedDossierServer) GetTeacher(context.Context, *GetTeacherRequest) (*GetTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacher not implemented")
}
func (UnimplementedDossierServer) ListTeacher(context.Context, *ListTeacherRequest) (*ListTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeacher not implemented")
}
func (UnimplementedDossierServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedDossierServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedDossierServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedDossierServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedDossierServer) ListRoom(context.Context, *ListRoomRequest) (*ListRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoom not implemented")
}
func (UnimplementedDossierServer) CreateSubject(context.Context, *CreateSubjectRequest) (*CreateSubjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubject not implemented")
}
func (UnimplementedDossierServer) UpdateSubject(context.Context, *UpdateSubjectRequest) (*UpdateSubjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubject not implemented")
}
func (UnimplementedDossierServer) DeleteSubject(context.Context, *DeleteSubjectRequest) (*DeleteSubjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubject not implemented")
}
func (UnimplementedDossierServer) GetSubject(context.Context, *GetSubjectRequest) (*GetSubjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubject not implemented")
}
func (UnimplementedDossierServer) ListSubject(context.Context, *ListSubjectRequest) (*ListSubjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubject not implemented")
}
func (UnimplementedDossierServer) mustEmbedUnimplementedDossierServer() {}

// UnsafeDossierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DossierServer will
// result in compilation errors.
type UnsafeDossierServer interface {
	mustEmbedUnimplementedDossierServer()
}

func RegisterDossierServer(s grpc.ServiceRegistrar, srv DossierServer) {
	s.RegisterService(&Dossier_ServiceDesc, srv)
}

func _Dossier_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_ListTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).ListTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_ListTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).ListTenant(ctx, req.(*ListTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_GetTenantPermissionTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantPermissionTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).GetTenantPermissionTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_GetTenantPermissionTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).GetTenantPermissionTree(ctx, req.(*GetTenantPermissionTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_GetTenantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).GetTenantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_GetTenantPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).GetTenantPermission(ctx, req.(*GetTenantPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_SaveTenantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTenantPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).SaveTenantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_SaveTenantPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).SaveTenantPermission(ctx, req.(*SaveTenantPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_ChangPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).ChangPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_ChangPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).ChangPassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_CreateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).CreateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_CreateTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).CreateTeacher(ctx, req.(*CreateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_UpdateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).UpdateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_UpdateTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).UpdateTeacher(ctx, req.(*UpdateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_DeleteTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).DeleteTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_DeleteTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).DeleteTeacher(ctx, req.(*DeleteTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_GetTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).GetTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_GetTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).GetTeacher(ctx, req.(*GetTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_ListTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).ListTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_ListTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).ListTeacher(ctx, req.(*ListTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_UpdateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_ListRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).ListRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_ListRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).ListRoom(ctx, req.(*ListRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_CreateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).CreateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_CreateSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).CreateSubject(ctx, req.(*CreateSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_UpdateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).UpdateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_UpdateSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).UpdateSubject(ctx, req.(*UpdateSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_DeleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).DeleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_DeleteSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).DeleteSubject(ctx, req.(*DeleteSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_GetSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).GetSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_GetSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).GetSubject(ctx, req.(*GetSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dossier_ListSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DossierServer).ListSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dossier_ListSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DossierServer).ListSubject(ctx, req.(*ListSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dossier_ServiceDesc is the grpc.ServiceDesc for Dossier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dossier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.v1.Dossier",
	HandlerType: (*DossierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTenant",
			Handler:    _Dossier_CreateTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _Dossier_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _Dossier_DeleteTenant_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _Dossier_GetTenant_Handler,
		},
		{
			MethodName: "ListTenant",
			Handler:    _Dossier_ListTenant_Handler,
		},
		{
			MethodName: "GetTenantPermissionTree",
			Handler:    _Dossier_GetTenantPermissionTree_Handler,
		},
		{
			MethodName: "GetTenantPermission",
			Handler:    _Dossier_GetTenantPermission_Handler,
		},
		{
			MethodName: "SaveTenantPermission",
			Handler:    _Dossier_SaveTenantPermission_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Dossier_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Dossier_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Dossier_DeleteUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Dossier_GetUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _Dossier_ListUser_Handler,
		},
		{
			MethodName: "ChangPassword",
			Handler:    _Dossier_ChangPassword_Handler,
		},
		{
			MethodName: "CreateTeacher",
			Handler:    _Dossier_CreateTeacher_Handler,
		},
		{
			MethodName: "UpdateTeacher",
			Handler:    _Dossier_UpdateTeacher_Handler,
		},
		{
			MethodName: "DeleteTeacher",
			Handler:    _Dossier_DeleteTeacher_Handler,
		},
		{
			MethodName: "GetTeacher",
			Handler:    _Dossier_GetTeacher_Handler,
		},
		{
			MethodName: "ListTeacher",
			Handler:    _Dossier_ListTeacher_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _Dossier_CreateRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _Dossier_UpdateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _Dossier_DeleteRoom_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _Dossier_GetRoom_Handler,
		},
		{
			MethodName: "ListRoom",
			Handler:    _Dossier_ListRoom_Handler,
		},
		{
			MethodName: "CreateSubject",
			Handler:    _Dossier_CreateSubject_Handler,
		},
		{
			MethodName: "UpdateSubject",
			Handler:    _Dossier_UpdateSubject_Handler,
		},
		{
			MethodName: "DeleteSubject",
			Handler:    _Dossier_DeleteSubject_Handler,
		},
		{
			MethodName: "GetSubject",
			Handler:    _Dossier_GetSubject_Handler,
		},
		{
			MethodName: "ListSubject",
			Handler:    _Dossier_ListSubject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/user.proto",
}

const (
	Auth_Login_FullMethodName              = "/api.admin.v1.Auth/Login"
	Auth_GetUserInfo_FullMethodName        = "/api.admin.v1.Auth/getUserInfo"
	Auth_CreatePermission_FullMethodName   = "/api.admin.v1.Auth/CreatePermission"
	Auth_UpdatePermission_FullMethodName   = "/api.admin.v1.Auth/UpdatePermission"
	Auth_DeletePermission_FullMethodName   = "/api.admin.v1.Auth/DeletePermission"
	Auth_GetPermission_FullMethodName      = "/api.admin.v1.Auth/GetPermission"
	Auth_ListPermission_FullMethodName     = "/api.admin.v1.Auth/ListPermission"
	Auth_GetPermissionTree_FullMethodName  = "/api.admin.v1.Auth/GetPermissionTree"
	Auth_CreateRole_FullMethodName         = "/api.admin.v1.Auth/CreateRole"
	Auth_UpdateRole_FullMethodName         = "/api.admin.v1.Auth/UpdateRole"
	Auth_DeleteRole_FullMethodName         = "/api.admin.v1.Auth/DeleteRole"
	Auth_GetRole_FullMethodName            = "/api.admin.v1.Auth/GetRole"
	Auth_ListRole_FullMethodName           = "/api.admin.v1.Auth/ListRole"
	Auth_GetRolePermission_FullMethodName  = "/api.admin.v1.Auth/GetRolePermission"
	Auth_SaveRolePermission_FullMethodName = "/api.admin.v1.Auth/SaveRolePermission"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoReply, error)
	// permission
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionReply, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*UpdatePermissionReply, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionReply, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionReply, error)
	ListPermission(ctx context.Context, in *ListPermissionRequest, opts ...grpc.CallOption) (*ListPermissionReply, error)
	GetPermissionTree(ctx context.Context, in *GetPermissionTreeRequest, opts ...grpc.CallOption) (*GetPermissionTreeReply, error)
	// role
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleReply, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleReply, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleReply, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleReply, error)
	ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleReply, error)
	GetRolePermission(ctx context.Context, in *GetRolePermissionRequest, opts ...grpc.CallOption) (*GetRolePermissionReply, error)
	SaveRolePermission(ctx context.Context, in *SaveRolePermissionRequest, opts ...grpc.CallOption) (*SaveRolePermissionReply, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Auth_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoReply, error) {
	out := new(UserInfoReply)
	err := c.cc.Invoke(ctx, Auth_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionReply, error) {
	out := new(CreatePermissionReply)
	err := c.cc.Invoke(ctx, Auth_CreatePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*UpdatePermissionReply, error) {
	out := new(UpdatePermissionReply)
	err := c.cc.Invoke(ctx, Auth_UpdatePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionReply, error) {
	out := new(DeletePermissionReply)
	err := c.cc.Invoke(ctx, Auth_DeletePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionReply, error) {
	out := new(GetPermissionReply)
	err := c.cc.Invoke(ctx, Auth_GetPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ListPermission(ctx context.Context, in *ListPermissionRequest, opts ...grpc.CallOption) (*ListPermissionReply, error) {
	out := new(ListPermissionReply)
	err := c.cc.Invoke(ctx, Auth_ListPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetPermissionTree(ctx context.Context, in *GetPermissionTreeRequest, opts ...grpc.CallOption) (*GetPermissionTreeReply, error) {
	out := new(GetPermissionTreeReply)
	err := c.cc.Invoke(ctx, Auth_GetPermissionTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleReply, error) {
	out := new(CreateRoleReply)
	err := c.cc.Invoke(ctx, Auth_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleReply, error) {
	out := new(UpdateRoleReply)
	err := c.cc.Invoke(ctx, Auth_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleReply, error) {
	out := new(DeleteRoleReply)
	err := c.cc.Invoke(ctx, Auth_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleReply, error) {
	out := new(GetRoleReply)
	err := c.cc.Invoke(ctx, Auth_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleReply, error) {
	out := new(ListRoleReply)
	err := c.cc.Invoke(ctx, Auth_ListRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetRolePermission(ctx context.Context, in *GetRolePermissionRequest, opts ...grpc.CallOption) (*GetRolePermissionReply, error) {
	out := new(GetRolePermissionReply)
	err := c.cc.Invoke(ctx, Auth_GetRolePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SaveRolePermission(ctx context.Context, in *SaveRolePermissionRequest, opts ...grpc.CallOption) (*SaveRolePermissionReply, error) {
	out := new(SaveRolePermissionReply)
	err := c.cc.Invoke(ctx, Auth_SaveRolePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoReply, error)
	// permission
	CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionReply, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*UpdatePermissionReply, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionReply, error)
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionReply, error)
	ListPermission(context.Context, *ListPermissionRequest) (*ListPermissionReply, error)
	GetPermissionTree(context.Context, *GetPermissionTreeRequest) (*GetPermissionTreeReply, error)
	// role
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleReply, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleReply, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleReply, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleReply, error)
	ListRole(context.Context, *ListRoleRequest) (*ListRoleReply, error)
	GetRolePermission(context.Context, *GetRolePermissionRequest) (*GetRolePermissionReply, error)
	SaveRolePermission(context.Context, *SaveRolePermissionRequest) (*SaveRolePermissionReply, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedAuthServer) CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedAuthServer) UpdatePermission(context.Context, *UpdatePermissionRequest) (*UpdatePermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedAuthServer) DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedAuthServer) GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedAuthServer) ListPermission(context.Context, *ListPermissionRequest) (*ListPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermission not implemented")
}
func (UnimplementedAuthServer) GetPermissionTree(context.Context, *GetPermissionTreeRequest) (*GetPermissionTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionTree not implemented")
}
func (UnimplementedAuthServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAuthServer) ListRole(context.Context, *ListRoleRequest) (*ListRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (UnimplementedAuthServer) GetRolePermission(context.Context, *GetRolePermissionRequest) (*GetRolePermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolePermission not implemented")
}
func (UnimplementedAuthServer) SaveRolePermission(context.Context, *SaveRolePermissionRequest) (*SaveRolePermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRolePermission not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ListPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ListPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ListPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ListPermission(ctx, req.(*ListPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetPermissionTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetPermissionTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetPermissionTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetPermissionTree(ctx, req.(*GetPermissionTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ListRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ListRole(ctx, req.(*ListRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetRolePermission(ctx, req.(*GetRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SaveRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SaveRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SaveRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SaveRolePermission(ctx, req.(*SaveRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.v1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _Auth_GetUserInfo_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _Auth_CreatePermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _Auth_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _Auth_DeletePermission_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _Auth_GetPermission_Handler,
		},
		{
			MethodName: "ListPermission",
			Handler:    _Auth_ListPermission_Handler,
		},
		{
			MethodName: "GetPermissionTree",
			Handler:    _Auth_GetPermissionTree_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Auth_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Auth_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Auth_DeleteRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Auth_GetRole_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _Auth_ListRole_Handler,
		},
		{
			MethodName: "GetRolePermission",
			Handler:    _Auth_GetRolePermission_Handler,
		},
		{
			MethodName: "SaveRolePermission",
			Handler:    _Auth_SaveRolePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/user.proto",
}
