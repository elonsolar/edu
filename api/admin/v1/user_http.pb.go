// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: admin/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDossierChangPassword = "/api.admin.v1.Dossier/ChangPassword"
const OperationDossierCreateRoom = "/api.admin.v1.Dossier/CreateRoom"
const OperationDossierCreateSubject = "/api.admin.v1.Dossier/CreateSubject"
const OperationDossierCreateTeacher = "/api.admin.v1.Dossier/CreateTeacher"
const OperationDossierCreateTenant = "/api.admin.v1.Dossier/CreateTenant"
const OperationDossierCreateUser = "/api.admin.v1.Dossier/CreateUser"
const OperationDossierDeleteRoom = "/api.admin.v1.Dossier/DeleteRoom"
const OperationDossierDeleteSubject = "/api.admin.v1.Dossier/DeleteSubject"
const OperationDossierDeleteTeacher = "/api.admin.v1.Dossier/DeleteTeacher"
const OperationDossierDeleteTenant = "/api.admin.v1.Dossier/DeleteTenant"
const OperationDossierDeleteUser = "/api.admin.v1.Dossier/DeleteUser"
const OperationDossierGetRoom = "/api.admin.v1.Dossier/GetRoom"
const OperationDossierGetSubject = "/api.admin.v1.Dossier/GetSubject"
const OperationDossierGetTeacher = "/api.admin.v1.Dossier/GetTeacher"
const OperationDossierGetTenant = "/api.admin.v1.Dossier/GetTenant"
const OperationDossierGetTenantPermission = "/api.admin.v1.Dossier/GetTenantPermission"
const OperationDossierGetTenantPermissionTree = "/api.admin.v1.Dossier/GetTenantPermissionTree"
const OperationDossierGetUser = "/api.admin.v1.Dossier/GetUser"
const OperationDossierListRoom = "/api.admin.v1.Dossier/ListRoom"
const OperationDossierListSubject = "/api.admin.v1.Dossier/ListSubject"
const OperationDossierListTeacher = "/api.admin.v1.Dossier/ListTeacher"
const OperationDossierListTenant = "/api.admin.v1.Dossier/ListTenant"
const OperationDossierListUser = "/api.admin.v1.Dossier/ListUser"
const OperationDossierSaveTenantPermission = "/api.admin.v1.Dossier/SaveTenantPermission"
const OperationDossierUpdateRoom = "/api.admin.v1.Dossier/UpdateRoom"
const OperationDossierUpdateSubject = "/api.admin.v1.Dossier/UpdateSubject"
const OperationDossierUpdateTeacher = "/api.admin.v1.Dossier/UpdateTeacher"
const OperationDossierUpdateTenant = "/api.admin.v1.Dossier/UpdateTenant"
const OperationDossierUpdateUser = "/api.admin.v1.Dossier/UpdateUser"

type DossierHTTPServer interface {
	ChangPassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error)
	// CreateRoom classroom
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomReply, error)
	// CreateSubject subject
	CreateSubject(context.Context, *CreateSubjectRequest) (*CreateSubjectReply, error)
	// CreateTeacher teacher
	CreateTeacher(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error)
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantReply, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomReply, error)
	DeleteSubject(context.Context, *DeleteSubjectRequest) (*DeleteSubjectReply, error)
	DeleteTeacher(context.Context, *DeleteTeacherRequest) (*DeleteTeacherReply, error)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantReply, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserReply, error)
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomReply, error)
	GetSubject(context.Context, *GetSubjectRequest) (*GetSubjectReply, error)
	GetTeacher(context.Context, *GetTeacherRequest) (*GetTeacherReply, error)
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantReply, error)
	GetTenantPermission(context.Context, *GetTenantPermissionRequest) (*GetTenantPermissionReply, error)
	GetTenantPermissionTree(context.Context, *GetTenantPermissionTreeRequest) (*GetTenantPermissionTreeReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	ListRoom(context.Context, *ListRoomRequest) (*ListRoomReply, error)
	ListSubject(context.Context, *ListSubjectRequest) (*ListSubjectReply, error)
	ListTeacher(context.Context, *ListTeacherRequest) (*ListTeacherReply, error)
	ListTenant(context.Context, *ListTenantRequest) (*ListTenantReply, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	SaveTenantPermission(context.Context, *SaveTenantPermissionRequest) (*SaveTenantPermissionReply, error)
	UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomReply, error)
	UpdateSubject(context.Context, *UpdateSubjectRequest) (*UpdateSubjectReply, error)
	UpdateTeacher(context.Context, *UpdateTeacherRequest) (*UpdateTeacherReply, error)
	UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
}

func RegisterDossierHTTPServer(s *http.Server, srv DossierHTTPServer) {
	r := s.Route("/")
	r.POST("/tenant", _Dossier_CreateTenant0_HTTP_Handler(srv))
	r.PUT("/tenant/{id}", _Dossier_UpdateTenant0_HTTP_Handler(srv))
	r.DELETE("/tenant/{id}", _Dossier_DeleteTenant0_HTTP_Handler(srv))
	r.GET("/tenant", _Dossier_GetTenant0_HTTP_Handler(srv))
	r.GET("/tenant/page", _Dossier_ListTenant0_HTTP_Handler(srv))
	r.GET("/tenant/permission-tree", _Dossier_GetTenantPermissionTree0_HTTP_Handler(srv))
	r.GET("/tenant/permission", _Dossier_GetTenantPermission0_HTTP_Handler(srv))
	r.POST("/tenant/permission", _Dossier_SaveTenantPermission0_HTTP_Handler(srv))
	r.POST("/user", _Dossier_CreateUser0_HTTP_Handler(srv))
	r.PUT("/user/{id}", _Dossier_UpdateUser0_HTTP_Handler(srv))
	r.DELETE("/user/{id}", _Dossier_DeleteUser0_HTTP_Handler(srv))
	r.GET("/user", _Dossier_GetUser0_HTTP_Handler(srv))
	r.GET("/user/page", _Dossier_ListUser0_HTTP_Handler(srv))
	r.POST("/user/change-password", _Dossier_ChangPassword0_HTTP_Handler(srv))
	r.POST("/teacher", _Dossier_CreateTeacher0_HTTP_Handler(srv))
	r.PUT("/teacher/{id}", _Dossier_UpdateTeacher0_HTTP_Handler(srv))
	r.DELETE("/teacher/{id}", _Dossier_DeleteTeacher0_HTTP_Handler(srv))
	r.GET("/teacher", _Dossier_GetTeacher0_HTTP_Handler(srv))
	r.GET("/teacher/page", _Dossier_ListTeacher0_HTTP_Handler(srv))
	r.POST("/room", _Dossier_CreateRoom0_HTTP_Handler(srv))
	r.PUT("/room/{id}", _Dossier_UpdateRoom0_HTTP_Handler(srv))
	r.DELETE("/room/{id}", _Dossier_DeleteRoom0_HTTP_Handler(srv))
	r.GET("/room", _Dossier_GetRoom0_HTTP_Handler(srv))
	r.GET("/room/page", _Dossier_ListRoom0_HTTP_Handler(srv))
	r.POST("/subject", _Dossier_CreateSubject0_HTTP_Handler(srv))
	r.PUT("/subject/{id}", _Dossier_UpdateSubject0_HTTP_Handler(srv))
	r.DELETE("/subject/{id}", _Dossier_DeleteSubject0_HTTP_Handler(srv))
	r.GET("/subject", _Dossier_GetSubject0_HTTP_Handler(srv))
	r.GET("/subject/page", _Dossier_ListSubject0_HTTP_Handler(srv))
}

func _Dossier_CreateTenant0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTenantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierCreateTenant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTenant(ctx, req.(*CreateTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_UpdateTenant0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTenantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierUpdateTenant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTenant(ctx, req.(*UpdateTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_DeleteTenant0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierDeleteTenant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTenant(ctx, req.(*DeleteTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_GetTenant0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierGetTenant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTenant(ctx, req.(*GetTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_ListTenant0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierListTenant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTenant(ctx, req.(*ListTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_GetTenantPermissionTree0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTenantPermissionTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierGetTenantPermissionTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTenantPermissionTree(ctx, req.(*GetTenantPermissionTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTenantPermissionTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_GetTenantPermission0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTenantPermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierGetTenantPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTenantPermission(ctx, req.(*GetTenantPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTenantPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_SaveTenantPermission0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveTenantPermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierSaveTenantPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveTenantPermission(ctx, req.(*SaveTenantPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveTenantPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_CreateUser0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_UpdateUser0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_DeleteUser0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_GetUser0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_ListUser0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_ChangPassword0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangePasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierChangPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangPassword(ctx, req.(*ChangePasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangePasswordReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_CreateTeacher0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTeacherRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierCreateTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTeacher(ctx, req.(*CreateTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_UpdateTeacher0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTeacherRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierUpdateTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTeacher(ctx, req.(*UpdateTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_DeleteTeacher0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTeacherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierDeleteTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTeacher(ctx, req.(*DeleteTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_GetTeacher0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTeacherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierGetTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTeacher(ctx, req.(*GetTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_ListTeacher0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTeacherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierListTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTeacher(ctx, req.(*ListTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_CreateRoom0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoomRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierCreateRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRoom(ctx, req.(*CreateRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoomReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_UpdateRoom0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoomRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierUpdateRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRoom(ctx, req.(*UpdateRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoomReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_DeleteRoom0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierDeleteRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoom(ctx, req.(*DeleteRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoomReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_GetRoom0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierGetRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoom(ctx, req.(*GetRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoomReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_ListRoom0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierListRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoom(ctx, req.(*ListRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoomReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_CreateSubject0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSubjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierCreateSubject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSubject(ctx, req.(*CreateSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSubjectReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_UpdateSubject0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSubjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierUpdateSubject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSubject(ctx, req.(*UpdateSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSubjectReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_DeleteSubject0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSubjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierDeleteSubject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSubject(ctx, req.(*DeleteSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSubjectReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_GetSubject0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierGetSubject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubject(ctx, req.(*GetSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubjectReply)
		return ctx.Result(200, reply)
	}
}

func _Dossier_ListSubject0_HTTP_Handler(srv DossierHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSubjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDossierListSubject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSubject(ctx, req.(*ListSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSubjectReply)
		return ctx.Result(200, reply)
	}
}

type DossierHTTPClient interface {
	ChangPassword(ctx context.Context, req *ChangePasswordRequest, opts ...http.CallOption) (rsp *ChangePasswordReply, err error)
	CreateRoom(ctx context.Context, req *CreateRoomRequest, opts ...http.CallOption) (rsp *CreateRoomReply, err error)
	CreateSubject(ctx context.Context, req *CreateSubjectRequest, opts ...http.CallOption) (rsp *CreateSubjectReply, err error)
	CreateTeacher(ctx context.Context, req *CreateTeacherRequest, opts ...http.CallOption) (rsp *CreateTeacherReply, err error)
	CreateTenant(ctx context.Context, req *CreateTenantRequest, opts ...http.CallOption) (rsp *CreateTenantReply, err error)
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *CreateUserReply, err error)
	DeleteRoom(ctx context.Context, req *DeleteRoomRequest, opts ...http.CallOption) (rsp *DeleteRoomReply, err error)
	DeleteSubject(ctx context.Context, req *DeleteSubjectRequest, opts ...http.CallOption) (rsp *DeleteSubjectReply, err error)
	DeleteTeacher(ctx context.Context, req *DeleteTeacherRequest, opts ...http.CallOption) (rsp *DeleteTeacherReply, err error)
	DeleteTenant(ctx context.Context, req *DeleteTenantRequest, opts ...http.CallOption) (rsp *DeleteTenantReply, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *DeleteUserReply, err error)
	GetRoom(ctx context.Context, req *GetRoomRequest, opts ...http.CallOption) (rsp *GetRoomReply, err error)
	GetSubject(ctx context.Context, req *GetSubjectRequest, opts ...http.CallOption) (rsp *GetSubjectReply, err error)
	GetTeacher(ctx context.Context, req *GetTeacherRequest, opts ...http.CallOption) (rsp *GetTeacherReply, err error)
	GetTenant(ctx context.Context, req *GetTenantRequest, opts ...http.CallOption) (rsp *GetTenantReply, err error)
	GetTenantPermission(ctx context.Context, req *GetTenantPermissionRequest, opts ...http.CallOption) (rsp *GetTenantPermissionReply, err error)
	GetTenantPermissionTree(ctx context.Context, req *GetTenantPermissionTreeRequest, opts ...http.CallOption) (rsp *GetTenantPermissionTreeReply, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *GetUserReply, err error)
	ListRoom(ctx context.Context, req *ListRoomRequest, opts ...http.CallOption) (rsp *ListRoomReply, err error)
	ListSubject(ctx context.Context, req *ListSubjectRequest, opts ...http.CallOption) (rsp *ListSubjectReply, err error)
	ListTeacher(ctx context.Context, req *ListTeacherRequest, opts ...http.CallOption) (rsp *ListTeacherReply, err error)
	ListTenant(ctx context.Context, req *ListTenantRequest, opts ...http.CallOption) (rsp *ListTenantReply, err error)
	ListUser(ctx context.Context, req *ListUserRequest, opts ...http.CallOption) (rsp *ListUserReply, err error)
	SaveTenantPermission(ctx context.Context, req *SaveTenantPermissionRequest, opts ...http.CallOption) (rsp *SaveTenantPermissionReply, err error)
	UpdateRoom(ctx context.Context, req *UpdateRoomRequest, opts ...http.CallOption) (rsp *UpdateRoomReply, err error)
	UpdateSubject(ctx context.Context, req *UpdateSubjectRequest, opts ...http.CallOption) (rsp *UpdateSubjectReply, err error)
	UpdateTeacher(ctx context.Context, req *UpdateTeacherRequest, opts ...http.CallOption) (rsp *UpdateTeacherReply, err error)
	UpdateTenant(ctx context.Context, req *UpdateTenantRequest, opts ...http.CallOption) (rsp *UpdateTenantReply, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *UpdateUserReply, err error)
}

type DossierHTTPClientImpl struct {
	cc *http.Client
}

func NewDossierHTTPClient(client *http.Client) DossierHTTPClient {
	return &DossierHTTPClientImpl{client}
}

func (c *DossierHTTPClientImpl) ChangPassword(ctx context.Context, in *ChangePasswordRequest, opts ...http.CallOption) (*ChangePasswordReply, error) {
	var out ChangePasswordReply
	pattern := "/user/change-password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierChangPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...http.CallOption) (*CreateRoomReply, error) {
	var out CreateRoomReply
	pattern := "/room"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierCreateRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) CreateSubject(ctx context.Context, in *CreateSubjectRequest, opts ...http.CallOption) (*CreateSubjectReply, error) {
	var out CreateSubjectReply
	pattern := "/subject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierCreateSubject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...http.CallOption) (*CreateTeacherReply, error) {
	var out CreateTeacherReply
	pattern := "/teacher"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierCreateTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...http.CallOption) (*CreateTenantReply, error) {
	var out CreateTenantReply
	pattern := "/tenant"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierCreateTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*CreateUserReply, error) {
	var out CreateUserReply
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...http.CallOption) (*DeleteRoomReply, error) {
	var out DeleteRoomReply
	pattern := "/room/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierDeleteRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...http.CallOption) (*DeleteSubjectReply, error) {
	var out DeleteSubjectReply
	pattern := "/subject/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierDeleteSubject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, opts ...http.CallOption) (*DeleteTeacherReply, error) {
	var out DeleteTeacherReply
	pattern := "/teacher/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierDeleteTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...http.CallOption) (*DeleteTenantReply, error) {
	var out DeleteTenantReply
	pattern := "/tenant/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierDeleteTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*DeleteUserReply, error) {
	var out DeleteUserReply
	pattern := "/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...http.CallOption) (*GetRoomReply, error) {
	var out GetRoomReply
	pattern := "/room"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierGetRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) GetSubject(ctx context.Context, in *GetSubjectRequest, opts ...http.CallOption) (*GetSubjectReply, error) {
	var out GetSubjectReply
	pattern := "/subject"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierGetSubject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) GetTeacher(ctx context.Context, in *GetTeacherRequest, opts ...http.CallOption) (*GetTeacherReply, error) {
	var out GetTeacherReply
	pattern := "/teacher"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierGetTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...http.CallOption) (*GetTenantReply, error) {
	var out GetTenantReply
	pattern := "/tenant"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierGetTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) GetTenantPermission(ctx context.Context, in *GetTenantPermissionRequest, opts ...http.CallOption) (*GetTenantPermissionReply, error) {
	var out GetTenantPermissionReply
	pattern := "/tenant/permission"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierGetTenantPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) GetTenantPermissionTree(ctx context.Context, in *GetTenantPermissionTreeRequest, opts ...http.CallOption) (*GetTenantPermissionTreeReply, error) {
	var out GetTenantPermissionTreeReply
	pattern := "/tenant/permission-tree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierGetTenantPermissionTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) ListRoom(ctx context.Context, in *ListRoomRequest, opts ...http.CallOption) (*ListRoomReply, error) {
	var out ListRoomReply
	pattern := "/room/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierListRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) ListSubject(ctx context.Context, in *ListSubjectRequest, opts ...http.CallOption) (*ListSubjectReply, error) {
	var out ListSubjectReply
	pattern := "/subject/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierListSubject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) ListTeacher(ctx context.Context, in *ListTeacherRequest, opts ...http.CallOption) (*ListTeacherReply, error) {
	var out ListTeacherReply
	pattern := "/teacher/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierListTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) ListTenant(ctx context.Context, in *ListTenantRequest, opts ...http.CallOption) (*ListTenantReply, error) {
	var out ListTenantReply
	pattern := "/tenant/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierListTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) ListUser(ctx context.Context, in *ListUserRequest, opts ...http.CallOption) (*ListUserReply, error) {
	var out ListUserReply
	pattern := "/user/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDossierListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) SaveTenantPermission(ctx context.Context, in *SaveTenantPermissionRequest, opts ...http.CallOption) (*SaveTenantPermissionReply, error) {
	var out SaveTenantPermissionReply
	pattern := "/tenant/permission"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierSaveTenantPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...http.CallOption) (*UpdateRoomReply, error) {
	var out UpdateRoomReply
	pattern := "/room/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierUpdateRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) UpdateSubject(ctx context.Context, in *UpdateSubjectRequest, opts ...http.CallOption) (*UpdateSubjectReply, error) {
	var out UpdateSubjectReply
	pattern := "/subject/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierUpdateSubject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...http.CallOption) (*UpdateTeacherReply, error) {
	var out UpdateTeacherReply
	pattern := "/teacher/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierUpdateTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...http.CallOption) (*UpdateTenantReply, error) {
	var out UpdateTenantReply
	pattern := "/tenant/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierUpdateTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DossierHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*UpdateUserReply, error) {
	var out UpdateUserReply
	pattern := "/user/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDossierUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationAuthCreatePermission = "/api.admin.v1.Auth/CreatePermission"
const OperationAuthCreateRole = "/api.admin.v1.Auth/CreateRole"
const OperationAuthDeletePermission = "/api.admin.v1.Auth/DeletePermission"
const OperationAuthDeleteRole = "/api.admin.v1.Auth/DeleteRole"
const OperationAuthGetPermission = "/api.admin.v1.Auth/GetPermission"
const OperationAuthGetPermissionTree = "/api.admin.v1.Auth/GetPermissionTree"
const OperationAuthGetRole = "/api.admin.v1.Auth/GetRole"
const OperationAuthGetRolePermission = "/api.admin.v1.Auth/GetRolePermission"
const OperationAuthgetUserInfo = "/api.admin.v1.Auth/getUserInfo"
const OperationAuthListPermission = "/api.admin.v1.Auth/ListPermission"
const OperationAuthListRole = "/api.admin.v1.Auth/ListRole"
const OperationAuthLogin = "/api.admin.v1.Auth/Login"
const OperationAuthSaveRolePermission = "/api.admin.v1.Auth/SaveRolePermission"
const OperationAuthUpdatePermission = "/api.admin.v1.Auth/UpdatePermission"
const OperationAuthUpdateRole = "/api.admin.v1.Auth/UpdateRole"

type AuthHTTPServer interface {
	// CreatePermission permission
	CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionReply, error)
	// CreateRolerole
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleReply, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionReply, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleReply, error)
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionReply, error)
	GetPermissionTree(context.Context, *GetPermissionTreeRequest) (*GetPermissionTreeReply, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleReply, error)
	GetRolePermission(context.Context, *GetRolePermissionRequest) (*GetRolePermissionReply, error)
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoReply, error)
	ListPermission(context.Context, *ListPermissionRequest) (*ListPermissionReply, error)
	ListRole(context.Context, *ListRoleRequest) (*ListRoleReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	SaveRolePermission(context.Context, *SaveRolePermissionRequest) (*SaveRolePermissionReply, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*UpdatePermissionReply, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleReply, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/auth/login", _Auth_Login0_HTTP_Handler(srv))
	r.GET("/auth/user", _Auth_GetUserInfo0_HTTP_Handler(srv))
	r.POST("/permission", _Auth_CreatePermission0_HTTP_Handler(srv))
	r.PUT("/permission/{id}", _Auth_UpdatePermission0_HTTP_Handler(srv))
	r.DELETE("/permission/{id}", _Auth_DeletePermission0_HTTP_Handler(srv))
	r.GET("/permission", _Auth_GetPermission0_HTTP_Handler(srv))
	r.GET("/permission/page", _Auth_ListPermission0_HTTP_Handler(srv))
	r.GET("/permission/tree", _Auth_GetPermissionTree0_HTTP_Handler(srv))
	r.POST("/role", _Auth_CreateRole0_HTTP_Handler(srv))
	r.PUT("/role/{id}", _Auth_UpdateRole0_HTTP_Handler(srv))
	r.DELETE("/role/{id}", _Auth_DeleteRole0_HTTP_Handler(srv))
	r.GET("/role", _Auth_GetRole0_HTTP_Handler(srv))
	r.GET("/role/page", _Auth_ListRole0_HTTP_Handler(srv))
	r.GET("/role/permission", _Auth_GetRolePermission0_HTTP_Handler(srv))
	r.POST("/role/permission", _Auth_SaveRolePermission0_HTTP_Handler(srv))
}

func _Auth_Login0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetUserInfo0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthgetUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*UserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_CreatePermission0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthCreatePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePermission(ctx, req.(*CreatePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_UpdatePermission0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthUpdatePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePermission(ctx, req.(*UpdatePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeletePermission0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDeletePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePermission(ctx, req.(*DeletePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetPermission0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGetPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPermission(ctx, req.(*GetPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_ListPermission0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthListPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPermission(ctx, req.(*ListPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetPermissionTree0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPermissionTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGetPermissionTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPermissionTree(ctx, req.(*GetPermissionTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPermissionTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_CreateRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_UpdateRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGetRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_ListRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthListRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRole(ctx, req.(*ListRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetRolePermission0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolePermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGetRolePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRolePermission(ctx, req.(*GetRolePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolePermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_SaveRolePermission0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveRolePermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthSaveRolePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveRolePermission(ctx, req.(*SaveRolePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveRolePermissionReply)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	CreatePermission(ctx context.Context, req *CreatePermissionRequest, opts ...http.CallOption) (rsp *CreatePermissionReply, err error)
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...http.CallOption) (rsp *CreateRoleReply, err error)
	DeletePermission(ctx context.Context, req *DeletePermissionRequest, opts ...http.CallOption) (rsp *DeletePermissionReply, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *DeleteRoleReply, err error)
	GetPermission(ctx context.Context, req *GetPermissionRequest, opts ...http.CallOption) (rsp *GetPermissionReply, err error)
	GetPermissionTree(ctx context.Context, req *GetPermissionTreeRequest, opts ...http.CallOption) (rsp *GetPermissionTreeReply, err error)
	GetRole(ctx context.Context, req *GetRoleRequest, opts ...http.CallOption) (rsp *GetRoleReply, err error)
	GetRolePermission(ctx context.Context, req *GetRolePermissionRequest, opts ...http.CallOption) (rsp *GetRolePermissionReply, err error)
	GetUserInfo(ctx context.Context, req *UserInfoRequest, opts ...http.CallOption) (rsp *UserInfoReply, err error)
	ListPermission(ctx context.Context, req *ListPermissionRequest, opts ...http.CallOption) (rsp *ListPermissionReply, err error)
	ListRole(ctx context.Context, req *ListRoleRequest, opts ...http.CallOption) (rsp *ListRoleReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	SaveRolePermission(ctx context.Context, req *SaveRolePermissionRequest, opts ...http.CallOption) (rsp *SaveRolePermissionReply, err error)
	UpdatePermission(ctx context.Context, req *UpdatePermissionRequest, opts ...http.CallOption) (rsp *UpdatePermissionReply, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleRequest, opts ...http.CallOption) (rsp *UpdateRoleReply, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...http.CallOption) (*CreatePermissionReply, error) {
	var out CreatePermissionReply
	pattern := "/permission"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthCreatePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...http.CallOption) (*CreateRoleReply, error) {
	var out CreateRoleReply
	pattern := "/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...http.CallOption) (*DeletePermissionReply, error) {
	var out DeletePermissionReply
	pattern := "/permission/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthDeletePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*DeleteRoleReply, error) {
	var out DeleteRoleReply
	pattern := "/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...http.CallOption) (*GetPermissionReply, error) {
	var out GetPermissionReply
	pattern := "/permission"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGetPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetPermissionTree(ctx context.Context, in *GetPermissionTreeRequest, opts ...http.CallOption) (*GetPermissionTreeReply, error) {
	var out GetPermissionTreeReply
	pattern := "/permission/tree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGetPermissionTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleRequest, opts ...http.CallOption) (*GetRoleReply, error) {
	var out GetRoleReply
	pattern := "/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetRolePermission(ctx context.Context, in *GetRolePermissionRequest, opts ...http.CallOption) (*GetRolePermissionReply, error) {
	var out GetRolePermissionReply
	pattern := "/role/permission"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGetRolePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...http.CallOption) (*UserInfoReply, error) {
	var out UserInfoReply
	pattern := "/auth/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthgetUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) ListPermission(ctx context.Context, in *ListPermissionRequest, opts ...http.CallOption) (*ListPermissionReply, error) {
	var out ListPermissionReply
	pattern := "/permission/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthListPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) ListRole(ctx context.Context, in *ListRoleRequest, opts ...http.CallOption) (*ListRoleReply, error) {
	var out ListRoleReply
	pattern := "/role/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthListRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/auth/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) SaveRolePermission(ctx context.Context, in *SaveRolePermissionRequest, opts ...http.CallOption) (*SaveRolePermissionReply, error) {
	var out SaveRolePermissionReply
	pattern := "/role/permission"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthSaveRolePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...http.CallOption) (*UpdatePermissionReply, error) {
	var out UpdatePermissionReply
	pattern := "/permission/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthUpdatePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...http.CallOption) (*UpdateRoleReply, error) {
	var out UpdateRoleReply
	pattern := "/role/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
